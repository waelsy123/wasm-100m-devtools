{"version":3,"file":"LighthouseStartViewFR.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/LighthouseStartViewFR.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport {StartView} from './LighthouseStartView.js';\nimport {Events} from './LighthouseController.js';\n\nconst UIStrings = {\n  /**\n   * @description Text that refers to the Lighthouse mode\n   */\n  mode: 'Mode',\n  /**\n   * @description Label for a button to start analyzing a page navigation with Lighthouse\n   */\n  analyzeNavigation: 'Analyze navigation',\n  /**\n   * @description Label for a button to start analyzing the current page state with Lighthouse\n   */\n  analyzeSnapshot: 'Analyze snapshot',\n  /**\n   * @description Label for a button that ends a Lighthouse timespan\n   */\n  startTimespan: 'Start timespan',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseStartViewFR.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class StartViewFR extends StartView {\n  protected render(): void {\n    super.render();\n    const fragment = UI.Fragment.Fragment.build`\n  <div class=\"lighthouse-form-section\">\n  <div class=\"lighthouse-form-section-label\">\n  ${i18nString(UIStrings.mode)}\n  </div>\n  <div class=\"lighthouse-form-elements\" $=\"mode-form-elements\"></div>\n  </div>\n    `;\n\n    // Populate the Lighthouse mode\n    const modeFormElements = fragment.$('mode-form-elements');\n    this.populateRuntimeSettingAsRadio('lighthouse.mode', i18nString(UIStrings.mode), modeFormElements);\n\n    const form = this.contentElement.querySelector('form');\n    form?.appendChild(fragment.element());\n    this.updateStartButton();\n  }\n\n  updateStartButton(): void {\n    const {mode} = this.controller.getFlags();\n\n    let label: Platform.UIString.LocalizedString;\n    let callback: () => void;\n\n    if (mode === 'timespan') {\n      label = i18nString(UIStrings.startTimespan);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseTimespanStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    } else if (mode === 'snapshot') {\n      label = i18nString(UIStrings.analyzeSnapshot);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    } else {\n      label = i18nString(UIStrings.analyzeNavigation);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    }\n\n    this.startButton = UI.UIUtils.createTextButton(\n        label,\n        callback,\n        /* className */ '',\n        /* primary */ true,\n    );\n\n    const startButtonContainer = this.contentElement.querySelector('.lighthouse-start-button-container');\n    if (startButtonContainer) {\n      startButtonContainer.textContent = '';\n      startButtonContainer.appendChild(this.startButton);\n    }\n  }\n}\n"]}