{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../front_end/panels/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport type * as Diff from '../../third_party/diff/diff.js';\nimport * as DiffView from '../../ui/components/diff_view/diff_view.js';\n\nexport function imageNameForResourceType(resourceType: Common.ResourceType.ResourceType): string {\n  if (resourceType.isDocument()) {\n    return 'ic_file_document';\n  }\n  if (resourceType.isImage()) {\n    return 'ic_file_image';\n  }\n  if (resourceType.isFont()) {\n    return 'ic_file_font';\n  }\n  if (resourceType.isScript()) {\n    return 'ic_file_script';\n  }\n  if (resourceType.isStyleSheet()) {\n    return 'ic_file_stylesheet';\n  }\n  if (resourceType.isWebbundle()) {\n    return 'ic_file_webbundle';\n  }\n  return 'ic_file_default';\n}\n\nexport async function formatCSSChangesFromDiff(diff: Diff.Diff.DiffArray): Promise<string> {\n  const {originalLines, currentLines, rows} = DiffView.DiffView.buildDiffRows(diff);\n\n  const {propertyToSelector: originalPropertyToSelector, ruleToSelector: originalRuleToSelector} =\n      await buildPropertyRuleMaps(originalLines.join('\\n'));\n  const {propertyToSelector: currentPropertyToSelector, ruleToSelector: currentRuleToSelector} =\n      await buildPropertyRuleMaps(currentLines.join('\\n'));\n  let changes = '';\n  let recordedOriginalSelector, recordedCurrentSelector;\n  for (const {currentLineNumber, originalLineNumber, type} of rows) {\n    // diff line arrays starts at 0, but line numbers start at 1.\n    const currentLineIndex = currentLineNumber - 1;\n    const originalLineIndex = originalLineNumber - 1;\n    switch (type) {\n      case DiffView.DiffView.RowType.Deletion: {\n        const originalLine = originalLines[originalLineIndex].trim();\n        if (originalRuleToSelector.has(originalLineIndex)) {\n          changes += `/* ${originalLine} { */\\n`;\n          recordedOriginalSelector = originalLine;\n          continue;\n        }\n\n        const originalSelector = originalPropertyToSelector.get(originalLineIndex);\n        if (!originalSelector) {\n          continue;\n        }\n        if (originalSelector !== recordedOriginalSelector && originalSelector !== recordedCurrentSelector) {\n          if (recordedOriginalSelector || recordedCurrentSelector) {\n            changes += '}\\n\\n';\n          }\n          changes += `${originalSelector} {\\n`;\n        }\n        recordedOriginalSelector = originalSelector;\n        changes += `  /* ${originalLine} */\\n`;\n        break;\n      }\n      case DiffView.DiffView.RowType.Addition: {\n        const currentLine = currentLines[currentLineIndex].trim();\n        if (currentRuleToSelector.has(currentLineIndex)) {\n          changes += `${currentLine} {\\n`;\n          recordedCurrentSelector = currentLine;\n          continue;\n        }\n\n        const currentSelector = currentPropertyToSelector.get(currentLineIndex);\n        if (!currentSelector) {\n          continue;\n        }\n        if (currentSelector !== recordedOriginalSelector && currentSelector !== recordedCurrentSelector) {\n          if (recordedOriginalSelector || recordedCurrentSelector) {\n            changes += '}\\n\\n';\n          }\n          changes += `${currentSelector} {\\n`;\n        }\n        recordedCurrentSelector = currentSelector;\n        changes += `  ${currentLine}\\n`;\n        break;\n      }\n      default:\n        break;\n    }\n  }\n  if (changes.length > 0) {\n    changes += '}';\n  }\n  return changes;\n}\n\nasync function buildPropertyRuleMaps(content: string):\n    Promise<{propertyToSelector: Map<number, string>, ruleToSelector: Map<number, string>}> {\n  const rules = await new Promise<Formatter.FormatterWorkerPool.CSSRule[]>(res => {\n    const rules: Formatter.FormatterWorkerPool.CSSRule[] = [];\n    Formatter.FormatterWorkerPool.formatterWorkerPool().parseCSS(content, (isLastChunk, currentRules) => {\n      rules.push(...currentRules);\n      if (isLastChunk) {\n        res(rules);\n      }\n    });\n  });\n  const propertyToSelector = new Map<number, string>();\n  const ruleToSelector = new Map<number, string>();\n  for (const rule of rules) {\n    if ('styleRange' in rule) {\n      const selector = rule.selectorText.split('\\n').pop()?.trim();\n      if (!selector) {\n        continue;\n      }\n      ruleToSelector.set(rule.styleRange.startLine, selector);\n      for (const property of rule.properties) {\n        propertyToSelector.set(property.range.startLine, selector);\n      }\n    }\n  }\n  return {propertyToSelector, ruleToSelector};\n}\n"]}