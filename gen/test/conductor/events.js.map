{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../../../test/conductor/events.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @fileoverview Functions and state to tie error reporting and console output of\n * the browser process and frontend pages together.\n */\n\n/* eslint-disable no-console */\n\n// use require here due to\n// https://github.com/evanw/esbuild/issues/587#issuecomment-901397213\nimport puppeteer = require('puppeteer');\n\nconst ALLOWED_ASSERTION_FAILURES = [\n  // Failure during shutdown. crbug.com/1145969\n  'Session is unregistering, can\\'t dispatch pending call to Debugger.setBlackboxPatterns',\n  // Failure during shutdown. crbug.com/1199322\n  'Session is unregistering, can\\'t dispatch pending call to DOM.getDocument',\n  // Expected failures in assertion_test.ts\n  'expected failure 1',\n  'expected failure 2',\n  // A failing fetch isn't itself a real error.\n  // TODO(https://crbug.com/124534) Remove once those messages are not printed anymore.\n  'Failed to load resource: the server responded with a status of 404 (Not Found)',\n  // Every letter \"typed\" into the console can trigger a preview `Runtime.evaluate` call.\n  // There is no way for an e2e test to know whether all of them have resolved or if there are\n  // still pending calls. If the test finishes too early, the JS context is destroyed and pending\n  // evaluations will fail. We ignore these kinds of errors. Tests have to make sure themselves\n  // that all assertions and success criteria are met (e.g. autocompletions etc).\n  // See: https://crbug.com/1192052\n  'Request Runtime.evaluate failed. {\"code\":-32602,\"message\":\"uniqueContextId not found\"}',\n  'uniqueContextId not found',\n];\n\nconst logLevels = {\n  log: 'I',\n  info: 'I',\n  warning: 'I',\n  error: 'E',\n  exception: 'E',\n  assert: 'E',\n};\n\nlet stdout = '', stderr = '';\nlet unhandledRejectionSet = false;\n\nexport function setupBrowserProcessIO(browser: puppeteer.Browser): void {\n  const browserProcess = browser.process();\n  if (!browserProcess) {\n    throw new Error('browserProcess is unexpectedly not defined.');\n  }\n\n  if (browserProcess.stderr) {\n    browserProcess.stderr.setEncoding('utf8');\n    browserProcess.stderr.on('data', data => {\n      stderr += data;\n    });\n  }\n\n  if (browserProcess.stdout) {\n    browserProcess.stdout.setEncoding('utf8');\n    browserProcess.stdout.on('data', data => {\n      stdout += data;\n    });\n  }\n\n  if (!unhandledRejectionSet) {\n    browserProcess.on('unhandledRejection', error => {\n      throw new Error(`Unhandled rejection in Frontend: ${error}`);\n    });\n    unhandledRejectionSet = true;\n  }\n}\n\nexport function installPageErrorHandlers(page: puppeteer.Page): void {\n  page.on('error', error => {\n    console.log('STDOUT:');\n    console.log(stdout);\n    console.log();\n    console.log('STDERR:');\n    console.log(stderr);\n    console.log();\n    throw new Error(`Error in Frontend: ${error}`);\n  });\n\n  page.on('pageerror', error => {\n    throw new Error(`Page error in Frontend: ${error}`);\n  });\n\n  page.on('console', async msg => {\n    const logLevel = logLevels[msg.type() as keyof typeof logLevels] as string;\n    if (logLevel) {\n      if (logLevel === 'E') {\n        let message = `${logLevel}> `;\n        if (msg.text() === 'JSHandle@error') {\n          const errorHandle: puppeteer.JSHandle<Error> = msg.args()[0];\n          message += await errorHandle.evaluate(error => {\n            return error.stack;\n          });\n          await errorHandle.dispose();\n        } else {\n          message += msg.text();\n          for (const frame of msg.stackTrace()) {\n            message += '\\n' + formatStackFrame(frame);\n          }\n        }\n        if (isExpectedError(msg)) {\n          expectedErrors.push(message);\n          console.log('(expected) ' + message);\n        } else {\n          fatalErrors.push(message);\n          console.error(message);\n        }\n      } else {\n        console.log(`${logLevel}> ${formatStackFrame(msg.location())}: ${msg.text()}`);\n      }\n    }\n  });\n}\n\nfunction isExpectedError(consoleMessage: puppeteer.ConsoleMessage) {\n  if (ALLOWED_ASSERTION_FAILURES.includes(consoleMessage.text())) {\n    return true;\n  }\n  for (const expectation of pendingErrorExpectations) {\n    if (expectation.check(consoleMessage)) {\n      pendingErrorExpectations.delete(expectation);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class ErrorExpectation {\n  #caught: puppeteer.ConsoleMessage|undefined;\n  readonly #msg: string|RegExp;\n  constructor(msg: string|RegExp) {\n    this.#msg = msg;\n  }\n\n  get caught() {\n    return this.#caught;\n  }\n\n  check(consoleMessage: puppeteer.ConsoleMessage) {\n    const text = consoleMessage.text();\n    const match = (this.#msg instanceof RegExp) ? Boolean(text.match(this.#msg)) : text.includes(this.#msg);\n    if (match) {\n      this.#caught = consoleMessage;\n    }\n    return match;\n  }\n}\n\nexport function expectError(msg: string|RegExp) {\n  const expectation = new ErrorExpectation(msg);\n  pendingErrorExpectations.add(expectation);\n  return expectation;\n}\n\nfunction formatStackFrame(stackFrame: puppeteer.ConsoleMessageLocation): string {\n  if (!stackFrame || !stackFrame.url) {\n    return '<unknown>';\n  }\n  const filename = stackFrame.url.replace(/^.*\\//, '');\n  return `${filename}:${stackFrame.lineNumber}:${stackFrame.columnNumber}`;\n}\n\nexport function dumpCollectedErrors(): void {\n  console.log('Expected errors: ' + expectedErrors.length);\n  console.log('   Fatal errors: ' + fatalErrors.length);\n  if (fatalErrors.length) {\n    throw new Error('Fatal errors logged:\\n' + fatalErrors.join('\\n'));\n  }\n}\n\nconst pendingErrorExpectations = new Set<ErrorExpectation>();\nexport const fatalErrors: string[] = [];\nexport const expectedErrors: string[] = [];\n"]}