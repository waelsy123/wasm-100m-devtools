{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../../../test/conductor/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable no-console */\n\n// use require here due to\n// https://github.com/evanw/esbuild/issues/587#issuecomment-901397213\nimport puppeteer = require('puppeteer');\n\nimport type {CoverageMapData} from 'istanbul-lib-coverage';\n\nimport {clearPuppeteerState, getBrowserAndPages, registerHandlers, setBrowserAndPages, setTestServerPort} from './puppeteer-state.js';\nimport {getTestRunnerConfigSetting} from './test_runner_config.js';\nimport {loadEmptyPageAndWaitForContent, DevToolsFrontendTab, type DevToolsFrontendReloadOptions} from './frontend_tab.js';\nimport {dumpCollectedErrors, installPageErrorHandlers, setupBrowserProcessIO} from './events.js';\nimport {TargetTab} from './target_tab.js';\n\n// Workaround for mismatching versions of puppeteer types and puppeteer library.\ndeclare module 'puppeteer' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface ConsoleMessage {\n    stackTrace(): ConsoleMessageLocation[];\n  }\n}\n\nconst viewportWidth = 1280;\nconst viewportHeight = 720;\n// Adding some offset to the window size used in the headful mode\n// so to account for the size of the browser UI.\n// Values are choosen by trial and error to make sure that the window\n// size is not much bigger than the viewport but so that the entire\n// viewport is visible.\nconst windowWidth = viewportWidth + 50;\nconst windowHeight = viewportHeight + 200;\n\nconst headless = !process.env['DEBUG_TEST'];\nconst envSlowMo = process.env['STRESS'] ? 50 : undefined;\nconst envThrottleRate = process.env['STRESS'] ? 3 : 1;\n\nconst TEST_SERVER_TYPE = getTestRunnerConfigSetting<string>('test-server-type', 'hosted-mode');\n\nlet browser: puppeteer.Browser;\nlet frontendTab: DevToolsFrontendTab;\nlet targetTab: TargetTab;\n\nconst envChromeBinary = getTestRunnerConfigSetting<string>('chrome-binary-path', process.env['CHROME_BIN'] || '');\nconst envChromeFeatures = getTestRunnerConfigSetting<string>('chrome-features', process.env['CHROME_FEATURES'] || '');\n\nfunction launchChrome() {\n  // Use port 0 to request any free port.\n  const enabledFeatures = ['Portals', 'PortalsCrossOrigin', 'PartitionedCookies'];\n  const launchArgs = [\n    '--remote-debugging-port=0', '--enable-experimental-web-platform-features',\n    // This fingerprint may be generated from the certificate using\n    // openssl x509 -noout -pubkey -in scripts/hosted_mode/cert.pem | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\n    '--ignore-certificate-errors-spki-list=KLy6vv6synForXwI6lDIl+D3ZrMV6Y1EMTY6YpOcAos=',\n    '--site-per-process',  // Default on Desktop anyway, but ensure that we always use out-of-process frames when we intend to.\n    '--host-resolver-rules=MAP *.test 127.0.0.1', '--disable-gpu',\n    '--enable-blink-features=CSSContainerQueries,HighlightInheritance',  // TODO(crbug.com/1218390) Remove globally enabled flags and conditionally enable them\n  ];\n  const opts: puppeteer.LaunchOptions&puppeteer.BrowserLaunchArgumentOptions&puppeteer.BrowserConnectOptions = {\n    headless,\n    executablePath: envChromeBinary,\n    dumpio: !headless,\n    slowMo: envSlowMo,\n  };\n\n  // Always set the default viewport because setting only the window size for\n  // headful mode would result in much smaller actual viewport.\n  opts.defaultViewport = {width: viewportWidth, height: viewportHeight};\n  // Toggle either viewport or window size depending on headless vs not.\n  if (!headless) {\n    launchArgs.push(`--window-size=${windowWidth},${windowHeight}`);\n  }\n\n  if (envChromeFeatures) {\n    enabledFeatures.push(envChromeFeatures);\n  }\n  launchArgs.push(`--enable-features=${enabledFeatures.join(',')}`);\n\n  opts.args = launchArgs;\n  return puppeteer.launch(opts);\n}\n\nasync function loadTargetPageAndFrontend(testServerPort: number) {\n  browser = await launchChrome();\n  setupBrowserProcessIO(browser);\n\n  // Load the target page.\n  targetTab = await TargetTab.create(browser);\n\n  // Create the frontend - the page that will be under test. This will be either\n  // DevTools Frontend in hosted mode, or the component docs in docs test mode.\n  let frontend: puppeteer.Page;\n\n  if (TEST_SERVER_TYPE === 'hosted-mode') {\n    /**\n     * In hosted mode we run the DevTools and test against it.\n     */\n    frontendTab = await DevToolsFrontendTab.create({browser, testServerPort, targetId: targetTab.targetId()});\n    frontend = frontendTab.page;\n  } else if (TEST_SERVER_TYPE === 'component-docs') {\n    /**\n     * In the component docs mode it points to the page where we load component\n     * doc examples, so let's just set it to an empty page for now.\n     */\n    frontend = await browser.newPage();\n    installPageErrorHandlers(frontend);\n    await loadEmptyPageAndWaitForContent(frontend);\n  } else {\n    throw new Error(`Unknown TEST_SERVER_TYPE \"${TEST_SERVER_TYPE}\"`);\n  }\n\n  setBrowserAndPages({target: targetTab.page, frontend, browser});\n}\n\nexport async function resetPages() {\n  await targetTab.reset();\n\n  // Under stress conditions throttle the CPU down.\n  await throttleCPUIfRequired();\n\n  if (TEST_SERVER_TYPE === 'hosted-mode') {\n    await frontendTab.reset();\n  } else if (TEST_SERVER_TYPE === 'component-docs') {\n    // Reset the frontend back to an empty page for the component docs server.\n    const {frontend} = getBrowserAndPages();\n    await loadEmptyPageAndWaitForContent(frontend);\n  }\n}\n\nasync function throttleCPUIfRequired(): Promise<void> {\n  const {frontend} = getBrowserAndPages();\n  // Under stress conditions throttle the CPU down.\n  if (envThrottleRate !== 1) {\n    console.log(`Throttling CPU: ${envThrottleRate}x slowdown`);\n\n    const client = await frontend.target().createCDPSession();\n    await client.send('Emulation.setCPUThrottlingRate', {rate: envThrottleRate});\n  }\n}\n\nexport async function reloadDevTools(options?: DevToolsFrontendReloadOptions) {\n  await frontendTab.reload(options);\n}\n\n// Can be run multiple times in the same process.\nexport async function preFileSetup(serverPort: number) {\n  setTestServerPort(serverPort);\n  registerHandlers();\n  await loadTargetPageAndFrontend(serverPort);\n}\n\n// Can be run multiple times in the same process.\nexport async function postFileTeardown() {\n  // We need to kill the browser before we stop the hosted mode server.\n  // That's because the browser could continue to make network requests,\n  // even after we would have closed the server. If we did so, the requests\n  // would fail and the test would crash on closedown. This only happens\n  // for the very last test that runs.\n  await browser.close();\n\n  clearPuppeteerState();\n  dumpCollectedErrors();\n}\n\nexport function collectCoverageFromPage(): Promise<CoverageMapData|undefined> {\n  const {frontend} = getBrowserAndPages();\n\n  return frontend.evaluate('window.__coverage__');\n}\n\nexport function getDevToolsFrontendHostname(): string {\n  return frontendTab.hostname();\n}\n"]}