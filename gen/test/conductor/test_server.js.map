{"version":3,"file":"test_server.js","sourceRoot":"","sources":["../../../../../test/conductor/test_server.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAG7B,iDAAoC;AACpC,6BAA6B;AAE7B,MAAM,uBAAuB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;AACxG,MAAM,0BAA0B,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,kBAAkB,EAAE,WAAW,CAAC,CAAC;AAChH,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7C,IAAI,aAA2B,CAAC;AAEhC,gFAAgF;AAChF,gDAAgD;AAChD,SAAgB,WAAW,CAAC,MAAsC;IAChE,IAAI,aAAa,EAAE;QACjB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAChD;IACD,SAAS,iBAAiB,CAAC,KAAY;QACrC,OAAO,CAAC,KAAK,CAAC,iBAAiB,KAAK,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,gBAAgB,GAAG;QACvB,aAAa,EAAE,uBAAuB;QACtC,gBAAgB,EAAE,0BAA0B;KAC7C,CAAC,MAAM,CAAC,CAAC;IAEV,4CAA4C;IAC5C,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACvC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAE,2CAA2C;IAC1D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,2EAA2E;QAC3E,yEAAyE;QACzE,wEAAwE;QACxE,uBAAuB;QACvB,MAAM,gBAAgB,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC5C,wEAAwE;QACxE,qDAAqD;QACrD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC;QAC9D,IAAI,UAAU,EAAE;YACd,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACnC;QACD,aAAa,GAAG,IAAA,qBAAK,EAAC,OAAO,CAAC,QAAQ,EAAE,gBAAgB,EAAE,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,EAAC,CAAC,CAAC;QAC9G,aAAa,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;YACpC,IAAI,OAAO,KAAK,OAAO,EAAE;gBACvB,MAAM,CAAC,wBAAwB,CAAC,CAAC;aAClC;iBAAM;gBACL,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;QACH,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QAC7C,IAAI,aAAa,CAAC,MAAM,EAAE;YACxB,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;SACpD;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAzCD,kCAyCC;AAED,SAAgB,UAAU;IACxB,aAAa,CAAC,IAAI,EAAE,CAAC;AACvB,CAAC;AAFD,gCAEC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {ChildProcess} from 'child_process';\nimport {spawn} from 'child_process';\nimport * as path from 'path';\n\nconst HOSTED_MODE_SERVER_PATH = path.join(__dirname, '..', '..', 'scripts', 'hosted_mode', 'server.js');\nconst COMPONENT_DOCS_SERVER_PATH = path.join(__dirname, '..', '..', 'scripts', 'component_server', 'server.js');\nconst cwd = path.join(__dirname, '..', '..');\nlet runningServer: ChildProcess;\n\n// Starts a hosted mode server on any available port and returns the port number\n// once the server is ready to receive requests.\nexport function startServer(server: 'hosted-mode'|'component-docs'): Promise<number> {\n  if (runningServer) {\n    throw new Error('Server was already started.');\n  }\n  function handleServerError(error: Error) {\n    console.error(`Server error: ${error}`);\n  }\n\n  const serverExecutable = {\n    'hosted-mode': HOSTED_MODE_SERVER_PATH,\n    'component-docs': COMPONENT_DOCS_SERVER_PATH,\n  }[server];\n\n  // Copy the current env and append the port.\n  const env = Object.create(process.env);\n  env.PORT = 0;  // 0 means request a free port from the OS.\n  return new Promise((resolve, reject) => {\n    // We open the server with an IPC channel so that it can report the port it\n    // used back to us. For parallel test mode, we need to avoid specifying a\n    // port directly and instead request any free port, which is what port 0\n    // signifies to the OS.\n    const processArguments = [serverExecutable];\n    // The component docs server can take extra flags to configure it, so we\n    // allow those to be set via an environment variable.\n    const extraFlags = process.env.TEST_SERVER_COMMAND_LINE_FLAGS;\n    if (extraFlags) {\n      processArguments.push(extraFlags);\n    }\n    runningServer = spawn(process.execPath, processArguments, {cwd, env, stdio: ['pipe', 'pipe', 'pipe', 'ipc']});\n    runningServer.on('message', message => {\n      if (message === 'ERROR') {\n        reject('Could not start server');\n      } else {\n        resolve(Number(message));\n      }\n    });\n    runningServer.on('error', handleServerError);\n    if (runningServer.stderr) {\n      runningServer.stderr.on('data', handleServerError);\n    }\n  });\n}\n\nexport function stopServer() {\n  runningServer.kill();\n}\n"]}