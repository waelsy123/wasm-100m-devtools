{"version":3,"file":"boot-perf_test.js","sourceRoot":"","sources":["../../../../../../test/perf/application/boot-perf_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,2CAAuC;AAEvC,sDAAsD;AACtD,8DAAkF;AAUlF,MAAM,IAAI,GAAG,EAAE,CAAC;AAEhB,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,MAAM,KAAK,GAAgB;QACzB,QAAQ,EAAE,EAAE;QACZ,IAAI,EAAE,CAAC;QACP,YAAY,EAAE,CAAC;QACf,YAAY,EAAE,CAAC;QACf,YAAY,EAAE,CAAC;KAChB,CAAC;IAEF,KAAK,CAAC,KAAK,IAAI,EAAE;QACf,+BAA+B;QAC/B,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC;QAC9B,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,IAAA,qBAAI,EAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC,IAAA,2BAAU,EAAC,MAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC,IAAA,2BAAU,EAAC,MAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC,IAAA,2BAAU,EAAC,MAAM,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjE,MAAM,IAAA,sCAAqB,EAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzE,OAAO,CAAC,GAAG,CAAC,mBAAmB,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,8BAA8B,KAAK,CAAC,YAAY,IAAI,CAAC,CAAC;QAClE,OAAO,CAAC,GAAG,CAAC,8BAA8B,KAAK,CAAC,YAAY,IAAI,CAAC,CAAC;QAClE,OAAO,CAAC,GAAG,CAAC,8BAA8B,KAAK,CAAC,YAAY,IAAI,CAAC,CAAC;QAClE,8BAA8B;IAChC,CAAC,CAAC,CAAC;IAEH,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,GAAG,EAAE,EAAE;QACpC,EAAE,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;YAClC,MAAM,KAAK,GAAG,wBAAW,CAAC,GAAG,EAAE,CAAC;YAChC,MAAM,IAAA,0BAAc,GAAE,CAAC;YAEvB,gCAAgC;YAChC,MAAM,SAAS,GAAG,CAAC,wBAAW,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzD,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {performance} from 'perf_hooks';\n\nimport {reloadDevTools} from '../../shared/helper.js';\nimport {mean, percentile, storeGeneratedResults} from '../helpers/perf-helper.js';\n\ninterface PerfTimings {\n  bootperf: number[];\n  mean: number;\n  percentile50: number;\n  percentile90: number;\n  percentile99: number;\n}\n\nconst RUNS = 37;\n\ndescribe('Boot performance', () => {\n  const times: PerfTimings = {\n    bootperf: [],\n    mean: 0,\n    percentile50: 0,\n    percentile90: 0,\n    percentile99: 0,\n  };\n\n  after(async () => {\n    /* eslint-disable no-console */\n    const values = times.bootperf;\n    times.mean = Number(mean(values).toFixed(2));\n    times.percentile50 = Number(percentile(values, 0.5).toFixed(2));\n    times.percentile90 = Number(percentile(values, 0.9).toFixed(2));\n    times.percentile99 = Number(percentile(values, 0.99).toFixed(2));\n\n    await storeGeneratedResults('devtools-perf.json', JSON.stringify(times));\n\n    console.log(`Mean boot time: ${times.mean}ms`);\n    console.log(`50th percentile boot time: ${times.percentile50}ms`);\n    console.log(`90th percentile boot time: ${times.percentile90}ms`);\n    console.log(`99th percentile boot time: ${times.percentile99}ms`);\n    /* eslint-enable no-console */\n  });\n\n  for (let run = 1; run <= RUNS; run++) {\n    it(`run ${run}/${RUNS}`, async () => {\n      const start = performance.now();\n      await reloadDevTools();\n\n      // Ensure only 2 decimal places.\n      const timeTaken = (performance.now() - start).toFixed(2);\n      times.bootperf.push(Number(timeTaken));\n    });\n  }\n});\n"]}