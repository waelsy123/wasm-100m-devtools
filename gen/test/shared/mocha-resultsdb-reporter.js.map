{"version":3,"file":"mocha-resultsdb-reporter.js","sourceRoot":"","sources":["../../../../../test/shared/mocha-resultsdb-reporter.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA+B;AAC/B,4CAA4C;AAE5C,MAAM,EACJ,aAAa,EACb,eAAe,EACf,eAAe,EACf,kBAAkB,GACnB,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;AAE3B,MAAM,iBAAkB,SAAQ,KAAK,CAAC,SAAS,CAAC,IAAI;IAC1C,WAAW,CAAU;IAE7B,YAAY,MAAoB,EAAE,OAA4B;QAC5D,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACvB,0EAA0E;QAC1E,kEAAkE;QAClE,IAAI,CAAC,WAAW,GAAI,OAA2C,EAAE,SAAS,CAAC;QAE3E,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEO,UAAU,CAAC,IAAgB;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;QACzD,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;QAC3B,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,SAAS,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC;IAEO,UAAU,CAAC,IAAgB,EAAE,KAAoB;QACvD,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;QACzD,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;QAC3B,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC5B,UAAU,CAAC,WAAW,GAAG,QAAQ,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC;QACtF,SAAS,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC;IAEO,UAAU,CAAC,IAAgB;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;QACzD,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;QAC3B,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,SAAS,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC;IAEO,gBAAgB;QACtB,SAAS,CAAC,yCAAyC,EAAE,CAAC;IACxD,CAAC;IAEO,0BAA0B,CAAC,IAAgB;QACjD,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5D,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAE,sCAAsC;QAC7E,OAAO;YACL,MAAM,EAAE,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC;YACzC,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI;SACpC,CAAC;IACJ,CAAC;CACF;AAED,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,iBAAiB,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Mocha from 'mocha';\nimport * as ResultsDb from './resultsdb.js';\n\nconst {\n  EVENT_RUN_END,\n  EVENT_TEST_FAIL,\n  EVENT_TEST_PASS,\n  EVENT_TEST_PENDING,\n} = Mocha.Runner.constants;\n\nclass ResultsDbReporter extends Mocha.reporters.Spec {\n  private suitePrefix?: string;\n\n  constructor(runner: Mocha.Runner, options?: Mocha.MochaOptions) {\n    super(runner, options);\n    // `reportOptions` doesn't work with .mocharc.js (configurig via exports).\n    // BUT, every module.exports is forwarded onto the options object.\n    this.suitePrefix = (options as {suiteName: string} | undefined)?.suiteName;\n\n    runner.on(EVENT_TEST_PASS, this.onTestPass.bind(this));\n    runner.on(EVENT_TEST_FAIL, this.onTestFail.bind(this));\n    runner.on(EVENT_TEST_PENDING, this.onTestSkip.bind(this));\n    runner.on(EVENT_RUN_END, this.onceEventRunEnds.bind(this));\n  }\n\n  private onTestPass(test: Mocha.Test) {\n    const testResult = this.buildDefaultTestResultFrom(test);\n    testResult.status = 'PASS';\n    testResult.expected = true;\n    ResultsDb.recordTestResult(testResult);\n  }\n\n  private onTestFail(test: Mocha.Test, error: Error|unknown) {\n    const testResult = this.buildDefaultTestResultFrom(test);\n    testResult.status = 'FAIL';\n    testResult.expected = false;\n    testResult.summaryHtml = `<pre>${error instanceof Error ? error.stack : error}</pre>`;\n    ResultsDb.recordTestResult(testResult);\n  }\n\n  private onTestSkip(test: Mocha.Test) {\n    const testResult = this.buildDefaultTestResultFrom(test);\n    testResult.status = 'SKIP';\n    testResult.expected = true;\n    ResultsDb.recordTestResult(testResult);\n  }\n\n  private onceEventRunEnds() {\n    ResultsDb.sendCollectedTestResultsIfSinkIsAvailable();\n  }\n\n  private buildDefaultTestResultFrom(test: Mocha.Test): ResultsDb.TestResult {\n    let testId = this.suitePrefix ? this.suitePrefix + '/' : '';\n    testId += test.titlePath().join('/');  // Chrome groups test by a path logic.\n    return {\n      testId: ResultsDb.sanitizedTestId(testId),\n      duration: `${test.duration || 0}ms`,\n    };\n  }\n}\n\nexports = module.exports = ResultsDbReporter;\n"]}