{"version":3,"file":"resultsdb.js","sourceRoot":"","sources":["../../../../../test/shared/resultsdb.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAE7B,yBAAyB;AACzB,6BAA6B;AAa7B,MAAM,kBAAkB;IACd,YAAY,CAAqB;CAC1C;AAGD,uEAAuE;AACvE,uKAAuK;AACvK,EAAE;AACF,2EAA2E;AAC3E,6BAA6B;AAC7B,SAAgB,eAAe,CAAC,SAAiB;IAC/C,OAAO,SAAS,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAoB,CAAC;AAClF,CAAC;AAFD,0CAEC;AAED,IAAI,oBAAoB,GAAiB,EAAE,CAAC;AAE5C,SAAgB,gBAAgB,CAAC,UAAsB;IACrD,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACxC,CAAC;AAFD,4CAEC;AAED,6EAA6E;AAC7E,qEAAqE;AACrE,SAAgB,yCAAyC;IACvD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QACzE,OAAO;KACR;IAED,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IACrE,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,CAAC;IACnD,8DAA8D;IAC9D,6BAA6B;IAC7B,IAAI,CAAC,IAAI,EAAE;QACT,OAAO;KACR;IAED,MAAM,GAAG,GAAG,UAAU,IAAI,CAAC,OAAO,iDAAiD,CAAC;IAEpF,MAAM,WAAW,GAAG;QAClB,MAAM,EAAE,MAAM;QACd,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE,kBAAkB;YAC5B,eAAe,EAAE,cAAc,IAAI,CAAC,UAAU,EAAE;SACjD;KACF,CAAC;IAEF,8EAA8E;IAC9E,wDAAwD;IACxD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IAEzD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,WAAW,EAAE,oBAAoB,EAAC,CAAC,CAAC;IACjE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACpB,OAAO,CAAC,GAAG,EAAE,CAAC;IAEd,oBAAoB,GAAG,EAAE,CAAC;AAC5B,CAAC;AAjCD,8FAiCC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as fs from 'fs';\nimport * as http from 'http';\n\n// This type mirrors test_result.proto.\n// https://source.chromium.org/chromium/infra/infra/+/main:recipes-py/recipe_proto/go.chromium.org/luci/resultdb/proto/sink/v1/test_result.proto\nexport interface TestResult {\n  testId: SanitizedTestId;\n  expected?: boolean;\n  status?: 'PASS'|'FAIL'|'SKIP';\n  summaryHtml?: string;\n  duration?: string;\n  tags?: {key: string, value: string}[];\n}\n\nclass SanitizedTestIdTag {\n  private sanitizedTag: (string|undefined);\n}\nexport type SanitizedTestId = string&SanitizedTestIdTag;\n\n// ResultSink checks the testId against the regex /^[[print]]{1,512}$/:\n// https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/resultdb/pbutil/test_result.go;l=43;drc=7ba090da753a71be5a0f37785558e9102e57fa10\n//\n// This function removees non-printable characters and truncates the string\n// to the max allowed length.\nexport function sanitizedTestId(rawTestId: string): SanitizedTestId {\n  return rawTestId.replace(/[^\\x20-\\x7E]/g, '').substr(0, 512) as SanitizedTestId;\n}\n\nlet collectedTestResults: TestResult[] = [];\n\nexport function recordTestResult(testResult: TestResult): void {\n  collectedTestResults.push(testResult);\n}\n\n// Call at the end of a test suite. Will send all `TestResult`s collected via\n// `recordTestResult` to the ResultSink endpoint (only if available).\nexport function sendCollectedTestResultsIfSinkIsAvailable() {\n  if (!process.env.LUCI_CONTEXT || !fs.existsSync(process.env.LUCI_CONTEXT)) {\n    return;\n  }\n\n  const luciConfig = fs.readFileSync(process.env.LUCI_CONTEXT, 'utf8');\n  const sink = JSON.parse(luciConfig)['result_sink'];\n  // LUCI_CONTEXT will not have a result_sink configuration when\n  // ResultSink is unavailable.\n  if (!sink) {\n    return;\n  }\n\n  const url = `http://${sink.address}/prpc/luci.resultsink.v1.Sink/ReportTestResults`;\n\n  const postOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Authorization': `ResultSink ${sink.auth_token}`,\n    },\n  };\n\n  // As per ResultSink documentation, this will always be a localhost connection\n  // and can be treated as reliable as a local file write.\n  const request = http.request(url, postOptions, () => {});\n\n  const data = JSON.stringify({testResults: collectedTestResults});\n  request.write(data);\n  request.end();\n\n  collectedTestResults = [];\n}\n"]}