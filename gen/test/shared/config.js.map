{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../test/shared/config.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAqB7B,SAAgB,SAAS,CACrB,IAAS,EAAE,YAAoC;IACjD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAEjC,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE;QACrC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAA0B,CAAC;KACnD;IAED,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QACpC,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3B,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACvB,KAAK,GAAG,YAAY,CAAC;SACtB;QACD,OAAO,KAA8B,CAAC;KACvC;IAED,OAAO,CAAC,MAAM,IAAI,YAAY,CAA0B,CAAC;AAC3D,CAAC;AAjBD,8BAiBC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ninterface SupportedEnvVars {\n  /* eslint-disable @typescript-eslint/naming-convention */\n  NO_SHUFFLE: boolean;      // Whether or not to shuffle tests.\n  STRESS: boolean;          // Stress test (slowdown CPU; multiple iterations)\n  VERBOSE: boolean;         // Log stdout from the workers.\n  THROTTLE: number;         // CPU throttle multiplier.\n  TEST_LIST: string;        // Absolute path to the test list.\n  TEST_PATTERNS: string;    // A semicolon-separated list of extglob pattern to filter the tests.\n  DEBUG_TEST: boolean;      // Debug mode. When enabled, has longer timeouts and runs Chrome in head mode.\n  ITERATIONS: number;       // Number of test iterations.\n  JOBS: number;             // Number of workers to use.\n  SLOWMO: number;           // Number of milliseconds between actions. Recommended value: 50.\n  CHROME_BIN: string;       // Absolute path to the Chrome binary.\n  INTERACTIVE: boolean;     // [Unused]: Placeholder for screenshot diffing.\n  TIMEOUT: number;          // The timeout in ms to wait for tests.\n  CHROME_FEATURES: string;  // --enable-features={} for the Chrome binary.\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport function getEnvVar<Key extends keyof SupportedEnvVars>(\n    name: Key, defaultValue?: SupportedEnvVars[Key]): SupportedEnvVars[Key] {\n  const envVar = process.env[name];\n\n  if (typeof defaultValue === 'boolean') {\n    return (Boolean(envVar)) as SupportedEnvVars[Key];\n  }\n\n  if (typeof defaultValue === 'number') {\n    let value = Number(envVar);\n    if (Number.isNaN(value)) {\n      value = defaultValue;\n    }\n    return value as SupportedEnvVars[Key];\n  }\n\n  return (envVar || defaultValue) as SupportedEnvVars[Key];\n}\n"]}