{"version":3,"file":"console-repl-mode_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/console/console-repl-mode_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {click, getBrowserAndPages, typeText, waitFor, waitForNone} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {CONSOLE_TAB_SELECTOR, CONSOLE_TOOLTIP_SELECTOR, focusConsolePrompt} from '../helpers/console-helpers.js';\n\ndescribe('The Console Tab', async function() {\n  // The tests in this suite are particularly slow, as they perform a lot of actions\n  this.timeout(10000);\n\n  it('allows re-declaration of let variables', async () => {\n    const {frontend} = getBrowserAndPages();\n    await click(CONSOLE_TAB_SELECTOR);\n    await focusConsolePrompt();\n\n    // To avoid races with the autosuggest box, which appears asynchronously to\n    // typing, we need to:\n    //   1. Type until the last character that causes a suggestion, waiting for\n    //      the suggestion box to open. We need to start waiting for the box to\n    //      open before we start typing to ensure we catch the opening.\n    //   2. Hit escape to close the suggestion box, and wait for it to\n    //      disappear. As above, we need to start waiting for it to disappear\n    //      before we hit escape.\n    //   3. Type the rest of the expression, where the characters don't cause\n    //      additional suggestions. Suggestions from history behave differently\n    //      and don't auto-complete on hitting enter, so they are irrelevant\n    //      here even if they do show up.\n    //   4. Hit enter\n    //   5. Wait for the results to show up and verify them.\n\n    const appearPromise = waitFor(CONSOLE_TOOLTIP_SELECTOR);\n    await typeText('let');\n    await appearPromise;\n\n    const disappearPromise = waitForNone(CONSOLE_TOOLTIP_SELECTOR);\n    await frontend.keyboard.press('Escape');\n    await disappearPromise;\n\n    await typeText(' x = 1;');\n    await frontend.keyboard.press('Enter');\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 1;\n    });\n\n    const appearPromise2 = waitFor(CONSOLE_TOOLTIP_SELECTOR);\n    await typeText('let');\n    await appearPromise2;\n\n    const disappearPromise2 = waitForNone(CONSOLE_TOOLTIP_SELECTOR);\n    await frontend.keyboard.press('Escape');\n    await disappearPromise2;\n\n    await typeText(' x = 2;');\n    await frontend.keyboard.press('Enter');\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 2;\n    });\n\n    const appearPromise3 = waitFor(CONSOLE_TOOLTIP_SELECTOR);\n    await typeText('x');\n    await appearPromise3;\n\n    const disappearPromise3 = waitForNone(CONSOLE_TOOLTIP_SELECTOR);\n    await frontend.keyboard.press('Escape');\n    await disappearPromise3;\n\n    await frontend.keyboard.press('Enter');\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 3;\n    });\n\n    const evaluateResults = await frontend.evaluate(() => {\n      return Array.from(document.querySelectorAll('.console-user-command-result')).map(node => node.textContent);\n    });\n\n    assert.deepEqual(evaluateResults, ['undefined', 'undefined', '2']);\n  });\n});\n"]}