{"version":3,"file":"console-eval-fake_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/console/console-eval-fake_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAAkF;AAClF,0EAA8D;AAC9D,sEAAuF;AACvF,sEAAwE;AAExE,IAAA,8BAAQ,EAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;IACrC,IAAA,wBAAE,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,IAAI,QAAkB,CAAC;QAEvB,MAAM,IAAA,gBAAI,EAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,IAAA,iBAAK,EAAC,yCAAoB,CAAC,CAAC;YAClC,MAAM,IAAA,uCAAkB,GAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,gBAAI,EAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,IAAA,qBAAS,EAAC;;;OAGf,CAAC,CAAC;YACH,MAAM,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEvC,2CAA2C;YAC3C,MAAM,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE;gBAClC,OAAO,QAAQ,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,gBAAI,EAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,IAAA,qBAAS,EAAC,MAAM,CAAC,CAAC;YACxB,MAAM,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,2CAA2C;QAC3C,MAAM,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE;YAClC,OAAO,QAAQ,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,gBAAI,EAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YAChD,QAAQ,GAAG,MAAM,IAAA,8CAAyB,GAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,gBAAI,EAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAChE,aAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACzB,kBAAkB;gBAClB,cAAc;aACf,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {click, getBrowserAndPages, pasteText, step} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {CONSOLE_TAB_SELECTOR, focusConsolePrompt} from '../helpers/console-helpers.js';\nimport {getCurrentConsoleMessages} from '../helpers/console-helpers.js';\n\ndescribe('The Console Tab', async () => {\n  it('doesnâ€™t break when global `eval` is overwritten', async () => {\n    const {frontend} = getBrowserAndPages();\n    let messages: string[];\n\n    await step('navigate to the Console tab', async () => {\n      await click(CONSOLE_TAB_SELECTOR);\n      await focusConsolePrompt();\n    });\n\n    await step('enter code that overwrites eval', async () => {\n      await pasteText(`\n        const foo = 'fooValue';\n        globalThis.eval = 'non-function';\n      `);\n      await frontend.keyboard.press('Enter');\n\n      // Wait for the console to be usable again.\n      await frontend.waitForFunction(() => {\n        return document.querySelectorAll('.console-user-command-result').length === 1;\n      });\n    });\n\n    await step('enter a code snippet', async () => {\n      await pasteText('foo;');\n      await frontend.keyboard.press('Enter');\n    });\n\n    // Wait for the console to be usable again.\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 2;\n    });\n\n    await step('retrieve the console log', async () => {\n      messages = await getCurrentConsoleMessages();\n    });\n\n    await step('check that the expected output is logged', async () => {\n      assert.deepEqual(messages, [\n        '\\'non-function\\'',\n        '\\'fooValue\\'',\n      ]);\n    });\n  });\n});\n"]}