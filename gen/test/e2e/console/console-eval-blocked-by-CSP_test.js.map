{"version":3,"file":"console-eval-blocked-by-CSP_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/console/console-eval-blocked-by-CSP_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAAqH;AACrH,0EAA8D;AAC9D,sEAAuF;AAEvF,IAAA,8BAAQ,EAAC,iBAAiB,EAAE,KAAK;IAC/B,IAAA,wBAAE,EAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,MAAM,IAAA,gBAAI,EAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,IAAA,iBAAK,EAAC,yCAAoB,CAAC,CAAC;YAClC,MAAM,IAAA,uCAAkB,GAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,qBAAS,EAAC,aAAa,CAAC,CAAC;QAC/B,MAAM,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEvC,MAAM,IAAA,gBAAI,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,IAAA,2BAAe,EAAC,KAAK,IAAI,EAAE;gBAC/B,MAAM,OAAO,GAAG,MAAM,IAAA,cAAE,EAAC,8BAA8B,CAAC,CAAC;gBACzD,OAAO,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,gBAAI,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE;gBAClD,OAAO,QAAQ,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;YAClF,CAAC,CAAC,CAAC;YACH,aAAM,CAAC,WAAW,CAAC,cAAc,EAAE,GAAG,EAAE,6BAA6B,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,IAAA,wBAAY,EAAC,8BAA8B,CAAC,CAAC;QAEnD,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,MAAM,IAAA,gBAAI,EAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,IAAA,iBAAK,EAAC,yCAAoB,CAAC,CAAC;YAClC,MAAM,IAAA,uCAAkB,GAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,qBAAS,EAAC,aAAa,CAAC,CAAC;QAC/B,MAAM,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEvC,MAAM,IAAA,gBAAI,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE;gBAClC,OAAO,QAAQ,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,IAAA,gBAAI,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE;gBAClD,OAAO,QAAQ,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;YAClF,CAAC,CAAC,CAAC;YACH,aAAM,CAAC,OAAO,CACV,cAAc,IAAI,EAAE,EAAE,oDAAoD,EAC1E,yCAAyC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {$$, click, getBrowserAndPages, goToResource, pasteText, step, waitForFunction} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {CONSOLE_TAB_SELECTOR, focusConsolePrompt} from '../helpers/console-helpers.js';\n\ndescribe('The Console Tab', async function() {\n  it('eval in console succeeds for pages with no CSP', async () => {\n    const {frontend} = getBrowserAndPages();\n    await step('open the console tab and focus the prompt', async () => {\n      await click(CONSOLE_TAB_SELECTOR);\n      await focusConsolePrompt();\n    });\n\n    await pasteText('eval(\"1+1\")');\n    await frontend.keyboard.press('Enter');\n\n    await step('wait for the result to appear in the console', async () => {\n      await waitForFunction(async () => {\n        const results = await $$('.console-user-command-result');\n        return results.length === 1;\n      });\n    });\n\n    await step('get the result text from the console', async () => {\n      const evaluateResult = await frontend.evaluate(() => {\n        return document.querySelectorAll('.console-user-command-result')[0].textContent;\n      });\n      assert.strictEqual(evaluateResult, '2', 'Eval result was not correct');\n    });\n  });\n\n  it('eval in console fails for pages with CSP that blocks eval', async () => {\n    await goToResource('console/CSP-blocks-eval.html');\n\n    const {frontend} = getBrowserAndPages();\n    await step('open the console tab and focus the prompt', async () => {\n      await click(CONSOLE_TAB_SELECTOR);\n      await focusConsolePrompt();\n    });\n\n    await pasteText('eval(\"1+1\")');\n    await frontend.keyboard.press('Enter');\n\n    await step('wait for the result to appear in the console', async () => {\n      await frontend.waitForFunction(() => {\n        return document.querySelectorAll('.console-user-command-result').length === 1;\n      });\n    });\n\n    await step('get the result text from the console', async () => {\n      const evaluateResult = await frontend.evaluate(() => {\n        return document.querySelectorAll('.console-user-command-result')[0].textContent;\n      });\n      assert.include(\n          evaluateResult || '', '\\'unsafe-eval\\' is not an allowed source of script',\n          'Didn\\'t find expected CSP error message');\n    });\n  });\n});\n"]}