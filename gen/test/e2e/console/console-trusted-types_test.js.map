{"version":3,"file":"console-trusted-types_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/console/console-trusted-types_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {click, getBrowserAndPages, pasteText, step} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {CONSOLE_TAB_SELECTOR, focusConsolePrompt} from '../helpers/console-helpers.js';\n\ndescribe('Logging and preview of Trusted Types objects in the Console', async () => {\n  it('Logging of Trusted Type HTML object', async () => {\n    const {frontend} = getBrowserAndPages();\n    await step('open the console tab and focus the prompt', async () => {\n      await click(CONSOLE_TAB_SELECTOR);\n      await focusConsolePrompt();\n    });\n    await pasteText(`policy = trustedTypes.createPolicy(\"generalPolicy\", {\n      createHTML: string => string\n    });`);\n    await frontend.keyboard.press('Enter');\n\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 1;\n    });\n\n    await pasteText('x = policy.createHTML(\"<foo>\"); x');\n    await frontend.keyboard.press('Enter');\n\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 2;\n    });\n\n    await step('get the result text from the console', async () => {\n      const evaluateResult = await frontend.evaluate(() => {\n        return document.querySelectorAll('.console-user-command-result')[1].textContent;\n      });\n      assert.strictEqual(evaluateResult, 'TrustedHTML \\'<foo>\\'', 'Trusted Type log is not the expected.');\n    });\n  });\n\n  it('Preview of Trusted Type HTML object', async () => {\n    const {frontend} = getBrowserAndPages();\n    await step('open the console tab and focus the prompt', async () => {\n      await click(CONSOLE_TAB_SELECTOR);\n      await focusConsolePrompt();\n    });\n    await pasteText(`policy = trustedTypes.createPolicy(\"generalPolicy\", {\n      createHTML: string => string\n    });`);\n    await frontend.keyboard.press('Enter');\n\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 1;\n    });\n\n    await pasteText('x = policy.createHTML(\"<foo>\")');\n    await frontend.keyboard.press('Enter');\n\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 2;\n    });\n    await pasteText('x');\n\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-eager-inner-preview').length === 1 &&\n          document.querySelectorAll('.console-eager-inner-preview')[0].textContent;\n    });\n\n    await step('Get the preview message', async () => {\n      const evaluateResult = await frontend.evaluate(() => {\n        return document.querySelectorAll('.console-eager-inner-preview')[0].textContent;\n      });\n      assert.strictEqual(evaluateResult, 'TrustedHTML \"<foo>\"', 'Trusted Type preview is not the expected');\n    });\n  });\n});\n"]}