{"version":3,"file":"console-error-stack_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/console/console-error-stack_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,sDAAqE;AACrE,0EAA8D;AAC9D,sEAAsH;AAEtH,+BAA+B;AAE/B,IAAA,8BAAQ,EAAC,uCAAuC,EAAE,GAAG,EAAE;IACrD,IAAA,wBAAE,EAAC,4GAA4G,EAC5G,KAAK,IAAI,EAAE;QACT,MAAM,IAAA,wBAAY,EAAC,mCAAmC,CAAC,CAAC;QACxD,MAAM,IAAA,yCAAoB,GAAE,CAAC;QAC7B,MAAM,IAAA,wCAAmB,GAAE,CAAC;QAC5B,MAAM,IAAA,2BAAe,EAAC,KAAK,IAAI,EAAE;YAC/B,MAAM,QAAQ,GAAG,MAAM,IAAA,iDAA4B,GAAE,CAAC;YACtD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzB,OAAO,KAAK,CAAC;aACd;YACD,MAAM,CAAC,EAAC,OAAO,EAAC,CAAC,GAAG,QAAQ,CAAC;YAC7B,OAAO,qCAAqC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEN,IAAA,wBAAE,EAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;QAC3F,MAAM,IAAA,wBAAY,EAAC,qCAAqC,CAAC,CAAC;QAC1D,MAAM,IAAA,yCAAoB,GAAE,CAAC;QAC7B,MAAM,IAAA,wCAAmB,GAAE,CAAC;QAC5B,MAAM,IAAA,2BAAe,EAAC,KAAK,IAAI,EAAE;YAC/B,MAAM,QAAQ,GAAG,MAAM,IAAA,iDAA4B,GAAE,CAAC;YACtD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzB,OAAO,KAAK,CAAC;aACd;YACD,MAAM,CAAC,EAAC,OAAO,EAAC,CAAC,GAAG,QAAQ,CAAC;YAC7B,OAAO,OAAO,KAAK;;2BAEE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {goToResource, waitForFunction} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {getStructuredConsoleMessages, navigateToConsoleTab, showVerboseMessages} from '../helpers/console-helpers.js';\n\n/* eslint-disable no-console */\n\ndescribe('The Console\\'s error stack formatting', () => {\n  it('picks up custom exception names ending with \\'Error\\' and symbolizes stack traces according to source maps',\n     async () => {\n       await goToResource('sources/error-with-sourcemap.html');\n       await navigateToConsoleTab();\n       await showVerboseMessages();\n       await waitForFunction(async () => {\n         const messages = await getStructuredConsoleMessages();\n         if (messages.length !== 1) {\n           return false;\n         }\n         const [{message}] = messages;\n         return /^MyError.*error-with-sourcemap.ts:6/.test(message.replace('\\n', ''));\n       });\n     });\n\n  it('correctly symbolizes stack traces with async frames for anonymous functions', async () => {\n    await goToResource('console/error-with-async-frame.html');\n    await navigateToConsoleTab();\n    await showVerboseMessages();\n    await waitForFunction(async () => {\n      const messages = await getStructuredConsoleMessages();\n      if (messages.length !== 1) {\n        return false;\n      }\n      const [{message}] = messages;\n      return message === `Error\n    at foo (async.js:2:46)\n    at async async.js:3:21`;\n    });\n  });\n});\n"]}