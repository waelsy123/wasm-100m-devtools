{"version":3,"file":"console-autocomplete_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/console/console-autocomplete_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {click, getBrowserAndPages, tabForward, timeout, typeText, waitFor, waitForFunction, waitForNone} from '../../shared/helper.js';\nimport {beforeEach, describe, it} from '../../shared/mocha-extensions.js';\nimport {CONSOLE_COMPLETION_HINT_SELECTOR, CONSOLE_TAB_SELECTOR, CONSOLE_TOOLTIP_SELECTOR, focusConsolePrompt, waitForLastConsoleMessageToHaveContent} from '../helpers/console-helpers.js';\nimport {openSourcesPanel} from '../helpers/sources-helpers.js';\n\ndescribe('The Console Tab', async () => {\n  beforeEach(async () => {\n    const {frontend} = getBrowserAndPages();\n\n    await click(CONSOLE_TAB_SELECTOR);\n    await focusConsolePrompt();\n\n    await typeText('let object = {a:1, b:2}; let map = new Map([[\"somekey\", 5], [\"some other key\", 42]])');\n    await frontend.keyboard.press('Enter');\n\n    // Wait for the console to be usable again.\n    await frontend.waitForFunction(() => {\n      return document.querySelectorAll('.console-user-command-result').length === 1;\n    });\n  });\n\n  afterEach(async () => {\n    // Make sure we don't close DevTools while there is an outstanding\n    // Runtime.evaluate CDP request, which causes an error. crbug.com/1134579.\n    await openSourcesPanel();\n  });\n\n  // See the comments in console-repl-mode_test to see why this is necessary.\n  async function objectAutocompleteTest(textAfterObject: string) {\n    const {frontend} = getBrowserAndPages();\n\n    const appearPromise = waitFor(CONSOLE_TOOLTIP_SELECTOR);\n    await typeText('object');\n    await appearPromise;\n\n    const disappearPromise = waitForNone(CONSOLE_TOOLTIP_SELECTOR);\n    await frontend.keyboard.press('Escape');\n    await disappearPromise;\n\n    const appearPromise2 = waitFor(CONSOLE_TOOLTIP_SELECTOR);\n    await typeText(textAfterObject);\n    await appearPromise2;\n\n    // The first auto-suggest result is evaluated and generates a preview, which\n    // we wait for so that we don't end the test/navigate with an open\n    // Runtime.evaluate CDP request, which causes an error. crbug.com/1134579.\n    await waitFor('.console-eager-inner-preview > span');\n  }\n\n  it('triggers autocompletion for `object.`', async () => {\n    await objectAutocompleteTest('.');\n  });\n\n  it('triggers autocompletion for `object?.`', async () => {\n    await objectAutocompleteTest('?.');\n  });\n\n  it('triggers autocompletion for `object[`', async () => {\n    await objectAutocompleteTest('[');\n  });\n\n  describe('triggers autocompletion for maps', () => {\n    async function typeMapGetter() {\n      const {frontend} = getBrowserAndPages();\n\n      const appearPromise = waitFor(CONSOLE_TOOLTIP_SELECTOR);\n      await typeText('map.get');\n      await appearPromise;\n\n      const disappearPromise = waitForNone(CONSOLE_TOOLTIP_SELECTOR);\n      await frontend.keyboard.press('Escape');\n      await disappearPromise;\n\n      const appearPromise2 = waitFor(CONSOLE_COMPLETION_HINT_SELECTOR);\n      await typeText('(');\n      await appearPromise2;\n\n      await waitForFunction(async () => {\n        const completionHint = await waitFor(CONSOLE_COMPLETION_HINT_SELECTOR);\n        return await completionHint.evaluate(node => node.textContent === '\"somekey\")');\n      });\n\n      // Even though the completion hint has the correct contents, there are no atomic DOM updates\n      // for the console input. This means that there is a race condition between when CodeMirror\n      // has finished computing the completion hint (and written it to the DOM) and when it is\n      // ready to receive further key inputs. This typically happens near instantly, but it is\n      // possible for another task to be inserted in between these two events. Since we are\n      // writing to the DOM, 100ms timeout is sufficient to flush the DOM and let all of the components\n      // be in sync.\n      await timeout(100);\n    }\n\n    it('can select the first key result', async () => {\n      const {frontend} = getBrowserAndPages();\n      await typeMapGetter();\n\n      const completionPromise = waitForNone(CONSOLE_COMPLETION_HINT_SELECTOR);\n      await tabForward();\n      await completionPromise;\n\n      await frontend.keyboard.press('Enter');\n      await frontend.waitForFunction(() => {\n        return document.querySelectorAll('.console-user-command-result').length === 2;\n      });\n\n      await waitForLastConsoleMessageToHaveContent('5');\n    });\n\n    it('can select the second key result', async () => {\n      const {frontend} = getBrowserAndPages();\n      await typeMapGetter();\n\n      // Select the second key by pressing the arrow down.\n      // Keys should be ordered by appearance in the original `Map.keys()` array\n      await frontend.keyboard.press('ArrowDown');\n\n      await frontend.waitForFunction(() => {\n        return document.querySelectorAll('.console-eager-inner-preview').length === 1 &&\n            document.querySelectorAll('.console-eager-inner-preview')[0].textContent === '42';\n      });\n\n      const completionPromise = waitForNone(CONSOLE_COMPLETION_HINT_SELECTOR);\n      await tabForward();\n      await completionPromise;\n\n      await frontend.keyboard.press('Enter');\n      await frontend.waitForFunction(() => {\n        return document.querySelectorAll('.console-user-command-result').length === 2;\n      });\n\n      await waitForLastConsoleMessageToHaveContent('42');\n    });\n  });\n});\n"]}