{"version":3,"file":"console-filter_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/console/console-filter_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\nimport type * as puppeteer from 'puppeteer';\n\nimport {$, getBrowserAndPages, step} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {CONSOLE_MESSAGE_WRAPPER_SELECTOR, deleteConsoleMessagesFilter, filterConsoleMessages, getConsoleMessages, getCurrentConsoleMessages, showVerboseMessages, toggleShowCorsErrors, waitForConsoleMessagesToBeNonEmpty} from '../helpers/console-helpers.js';\n\ntype MessageCheck = (msg: string) => boolean;\n\nfunction createUrlFilter(url: string) {\n  return `-url:${url}`;\n}\n\nfunction collectSourceUrlsFromConsoleOutput(frontend: puppeteer.Page) {\n  return frontend.evaluate(CONSOLE_MESSAGE_WRAPPER_SELECTOR => {\n    return Array.from(document.querySelectorAll(CONSOLE_MESSAGE_WRAPPER_SELECTOR)).map(wrapper => {\n      return wrapper.querySelector('.devtools-link').textContent.split(':')[0];\n    });\n  }, CONSOLE_MESSAGE_WRAPPER_SELECTOR);\n}\n\nfunction getExpectedMessages(unfilteredMessages: string[], filter: MessageCheck) {\n  return unfilteredMessages.filter((msg: string) => {\n    return filter(msg);\n  });\n}\n\nasync function testMessageFilter(filter: string, expectedMessageFilter: MessageCheck) {\n  const {frontend} = getBrowserAndPages();\n  let unfilteredMessages: string[];\n  const showMessagesWithAnchor = true;\n\n  await step('navigate to console-filter.html and get console messages', async () => {\n    unfilteredMessages = await getConsoleMessages('console-filter', showMessagesWithAnchor);\n  });\n\n  await step(`filter to only show messages containing '${filter}'`, async () => {\n    await filterConsoleMessages(frontend, filter);\n  });\n\n  await step('check that messages are correctly filtered', async () => {\n    const filteredMessages = await getCurrentConsoleMessages(showMessagesWithAnchor);\n    const expectedMessages = getExpectedMessages(unfilteredMessages, expectedMessageFilter);\n    assert.isNotEmpty(filteredMessages);\n    assert.deepEqual(filteredMessages, expectedMessages);\n  });\n}\n\ndescribe('The Console Tab', async () => {\n  it('shows logged messages', async () => {\n    let messages: string[];\n    const withAnchor = true;\n    await step('navigate to console-filter.html and get console messages', async () => {\n      messages = await getConsoleMessages('console-filter', withAnchor);\n    });\n\n    await step('check that all console messages appear', async () => {\n      assert.deepEqual(messages, [\n        'console-filter.html:10 1topGroup: log1()',\n        'log-source.js:6 2topGroup: log2()',\n        'console-filter.html:10 3topGroup: log1()',\n        'console-filter.html:17 enter outerGroup',\n        'console-filter.html:10 1outerGroup: log1()',\n        'log-source.js:6 2outerGroup: log2()',\n        'console-filter.html:21 enter innerGroup1',\n        'console-filter.html:10 1innerGroup1: log1()',\n        'log-source.js:6 2innerGroup1: log2()',\n        'console-filter.html:26 enter innerGroup2',\n        'console-filter.html:10 1innerGroup2: log1()',\n        'log-source.js:6 2innerGroup2: log2()',\n        'console-filter.html:10 4topGroup: log1()',\n        'log-source.js:6 5topGroup: log2()',\n        'console-filter.html:38 Hello 1',\n        'console-filter.html:39 Hello 2',\n        'console-filter.html:42 end',\n      ]);\n    });\n  });\n\n  it('shows messages from all levels', async () => {\n    let messages: string[];\n    const withAnchor = true;\n    await step('navigate to console-filter.html and get console messages', async () => {\n      messages = await getConsoleMessages('console-filter', withAnchor, showVerboseMessages);\n    });\n\n    await step('ensure that all levels are logged', async () => {\n      const allLevelsDropdown = await $('[aria-label^=\"Log level: All levels\"]');\n      assert.isNotNull(allLevelsDropdown);\n    });\n\n    await step('check that all console messages appear', async () => {\n      assert.deepEqual(messages, [\n        'console-filter.html:10 1topGroup: log1()',\n        'log-source.js:6 2topGroup: log2()',\n        'console-filter.html:10 3topGroup: log1()',\n        'console-filter.html:17 enter outerGroup',\n        'console-filter.html:10 1outerGroup: log1()',\n        'log-source.js:6 2outerGroup: log2()',\n        'console-filter.html:21 enter innerGroup1',\n        'console-filter.html:10 1innerGroup1: log1()',\n        'log-source.js:6 2innerGroup1: log2()',\n        'console-filter.html:26 enter innerGroup2',\n        'console-filter.html:10 1innerGroup2: log1()',\n        'log-source.js:6 2innerGroup2: log2()',\n        'console-filter.html:10 4topGroup: log1()',\n        'log-source.js:6 5topGroup: log2()',\n        'console-filter.html:38 Hello 1',\n        'console-filter.html:39 Hello 2',\n        'console-filter.html:41 verbose debug message',\n        'console-filter.html:42 end',\n      ]);\n    });\n  });\n\n  it('can exclude messages from a source url', async () => {\n    const {frontend} = getBrowserAndPages();\n    let sourceUrls: string[];\n    let uniqueUrls: Set<string> = new Set();\n\n    await step('navigate to console-filter.html and wait for console messages', async () => {\n      await getConsoleMessages('console-filter');\n    });\n\n    await step('collect source urls from all messages', async () => {\n      sourceUrls = await collectSourceUrlsFromConsoleOutput(frontend);\n    });\n\n    await step('find unique urls', async () => {\n      uniqueUrls = new Set(sourceUrls);\n      assert.isNotEmpty(uniqueUrls);\n    });\n\n    for (const urlToExclude of uniqueUrls) {\n      const filter = createUrlFilter(urlToExclude);\n      const expectedMessageFilter: MessageCheck = msg => {\n        if (msg.includes('enter')) {\n          return true;\n        }\n        // When we exclude \"log-source.js\", all groups match,\n        // as they are created from \"console-filter.html\".\n        // When a group matches, its content is fully shown.\n        if (msg.includes('log-source') && (msg.includes('innerGroup') || msg.includes('outerGroup'))) {\n          return true;\n        }\n        return msg.indexOf(urlToExclude) === -1;\n      };\n      await testMessageFilter(filter, expectedMessageFilter);\n\n      await step(`remove filter '${filter}'`, async () => {\n        await deleteConsoleMessagesFilter(frontend);\n      });\n    }\n  });\n\n  it('can include messages from a given source url', async () => {\n    const {frontend} = getBrowserAndPages();\n    let sourceUrls: string[];\n    let uniqueUrls: Set<string> = new Set();\n\n    await step('navigate to console-filter.html and wait for console messages', async () => {\n      await getConsoleMessages('console-filter');\n    });\n\n    await step('collect source urls from all messages', async () => {\n      sourceUrls = await collectSourceUrlsFromConsoleOutput(frontend);\n    });\n\n    await step('find unique urls', async () => {\n      uniqueUrls = new Set(sourceUrls);\n      assert.isNotEmpty(uniqueUrls);\n    });\n\n    for (const urlToKeep of uniqueUrls) {\n      const filter = urlToKeep;\n      const expectedMessageFilter: MessageCheck = msg => {\n        if (msg.includes('enter')) {\n          return true;\n        }\n        // When we include from any of the two URLs, all groups match.\n        // When a group matches, its content is fully shown.\n        if (msg.includes('log-source') && (msg.includes('innerGroup') || msg.includes('outerGroup'))) {\n          return true;\n        }\n        return msg.indexOf(urlToKeep) !== -1;\n      };\n      await testMessageFilter(filter, expectedMessageFilter);\n\n      await step(`remove filter '${filter}'`, async () => {\n        await deleteConsoleMessagesFilter(frontend);\n      });\n    }\n  });\n\n  it('can apply empty filter', async () => {\n    const filter = '';\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const expectedMessageFilter: MessageCheck = _ => true;\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can apply text filter matching outer group title', async () => {\n    const filter = 'enter outerGroup';\n    const expectedMessageFilter: MessageCheck = msg => {\n      // If the group title matches, all of its content should be shown.\n      if (msg.includes('outerGroup')) {\n        return true;\n      }\n      if (msg.includes('innerGroup')) {\n        return true;\n      }\n      return false;\n    };\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can apply text filter matching inner group title', async () => {\n    const filter = 'enter innerGroup1';\n    const expectedMessageFilter: MessageCheck = msg => {\n      // If the group title matches, all of its content should be shown.\n      // In addition, the group titles of parent groups should be shown.\n      if (msg.includes('enter outerGroup')) {\n        return true;\n      }\n      if (msg.includes('innerGroup1')) {\n        return true;\n      }\n      return false;\n    };\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can apply text filter matching outer group content', async () => {\n    const filter = '1outerGroup';\n    const expectedMessageFilter: MessageCheck = msg => {\n      // If the group title matches, all of its content should be shown.\n      if (msg.includes('enter outerGroup')) {\n        return true;\n      }\n      if (msg.includes('1outerGroup')) {\n        return true;\n      }\n      return false;\n    };\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can apply text filter matching inner group content', async () => {\n    const filter = '1innerGroup1';\n    const expectedMessageFilter: MessageCheck = msg => {\n      // If the group title matches, all of its content should be shown.\n      // In addition, the group titles of parent groups should be shown.\n      if (msg.includes('enter outerGroup')) {\n        return true;\n      }\n      if (msg.includes('enter innerGroup1')) {\n        return true;\n      }\n      if (msg.includes('1innerGroup1')) {\n        return true;\n      }\n      return false;\n    };\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can apply text filter matching non-grouped content', async () => {\n    const filter = 'topGroup';\n    const expectedMessageFilter: MessageCheck = msg => {\n      // No grouped content is shown.\n      if (msg.includes('topGroup')) {\n        return true;\n      }\n      return false;\n    };\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can apply start/end line regex filter', async () => {\n    const filter = '/^Hello\\\\s\\\\d$/';\n    const expectedMessageFilter: MessageCheck = msg => {\n      return /^console-filter\\.html:\\d{2}\\sHello\\s\\d$/.test(msg);\n    };\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can apply context filter', async () => {\n    const expectedMessageFilter: MessageCheck = msg => {\n      return msg.indexOf('Hello') !== -1;\n    };\n    await testMessageFilter('context:context', expectedMessageFilter);\n  });\n\n  it('can apply multi text filter', async () => {\n    const filter = 'Group /[2-3]top/';\n    const expectedMessageFilter: MessageCheck = msg => {\n      return /[2-3]top/.test(msg);\n    };\n    await testMessageFilter(filter, expectedMessageFilter);\n  });\n\n  it('can reset filter', async () => {\n    const {frontend} = getBrowserAndPages();\n    let unfilteredMessages: string[];\n\n    await step('get unfiltered messages', async () => {\n      unfilteredMessages = await getConsoleMessages('console-filter');\n    });\n\n    await step('apply message filter', async () => {\n      await filterConsoleMessages(frontend, 'outer');\n    });\n\n    await step('delete message filter', async () => {\n      void deleteConsoleMessagesFilter(frontend);\n    });\n\n    await step('check if messages are unfiltered', async () => {\n      const messages = await getCurrentConsoleMessages();\n      assert.deepEqual(messages, unfilteredMessages);\n    });\n  });\n\n  it('can exclude CORS error messages', async () => {\n    const CORS_DETAILED_ERROR_PATTERN =\n        /Access to fetch at 'https:.*' from origin 'https:.*' has been blocked by CORS policy: .*/;\n    const NETWORK_ERROR_PATTERN = /GET https:.* net::ERR_FAILED/;\n    const JS_ERROR_PATTERN = /Uncaught \\(in promise\\) TypeError: Failed to fetch.*/;\n    const allMessages = await getConsoleMessages('cors-issue', false, () => waitForConsoleMessagesToBeNonEmpty(6));\n    allMessages.sort();\n    assert.strictEqual(allMessages.length, 6);\n    assert.match(allMessages[0], CORS_DETAILED_ERROR_PATTERN);\n    assert.match(allMessages[1], CORS_DETAILED_ERROR_PATTERN);\n    assert.match(allMessages[2], NETWORK_ERROR_PATTERN);\n    assert.match(allMessages[3], NETWORK_ERROR_PATTERN);\n    assert.match(allMessages[4], JS_ERROR_PATTERN);\n    assert.match(allMessages[5], JS_ERROR_PATTERN);\n\n    await toggleShowCorsErrors();\n    const filteredMessages = await getCurrentConsoleMessages();\n    assert.strictEqual(2, filteredMessages.length);\n    for (const message of filteredMessages) {\n      assert.match(message, JS_ERROR_PATTERN);\n    }\n  });\n\n});\n"]}