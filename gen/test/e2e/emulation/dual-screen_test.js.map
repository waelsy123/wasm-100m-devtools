{"version":3,"file":"dual-screen_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/emulation/dual-screen_test.ts"],"names":[],"mappings":";;AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,+BAA4B;AAC5B,0EAA8D;AAE9D,0EAAmK;AACnK,0EAAmE;AAEnE,MAAM,0BAA0B,GAAG,MAAM,CAAC;AAC1C,MAAM,kBAAkB,GAAG,KAAK,CAAC;AAEjC,IAAA,8BAAQ,EAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;IACtC,UAAU,CAAC,KAAK;QACd,MAAM,IAAA,uDAAgC,GAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;QAC5F,MAAM,IAAA,uCAAgB,GAAE,CAAC;QACzB,MAAM,IAAA,wCAAiB,GAAE,CAAC;QAC1B,MAAM,SAAS,GAAG,MAAM,IAAA,uCAAgB,GAAE,CAAC;QAC3C,IAAA,aAAM,EAAC,SAAS,KAAK,0BAA0B,CAAC,CAAC;QAEjD,MAAM,IAAA,wCAAiB,GAAE,CAAC;QAC1B,MAAM,WAAW,GAAG,MAAM,IAAA,uCAAgB,GAAE,CAAC;QAC7C,IAAA,aAAM,EAAC,WAAW,KAAK,kBAAkB,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;QACzF,MAAM,IAAA,gDAAyB,GAAE,CAAC;QAClC,oCAAoC;QACpC,MAAM,YAAY,GAAG,MAAM,IAAA,yCAAkB,GAAE,CAAC;QAChD,MAAM,OAAO,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC;QACzC,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACvF,IAAA,aAAM,EAAC,MAAM,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport {assert} from 'chai';\nimport {describe, it} from '../../shared/mocha-extensions.js';\n\nimport {clickToggleButton, getWidthOfDevice, selectDualScreen, selectNonDualScreenDevice, startEmulationWithDualScreenFlag} from '../helpers/emulation-helpers.js';\nimport {selectToggleButton} from '../helpers/emulation-helpers.js';\n\nconst DUO_VERTICAL_SPANNED_WIDTH = '1114';\nconst DUO_VERTICAL_WIDTH = '540';\n\ndescribe('Dual screen mode', async () => {\n  beforeEach(async function() {\n    await startEmulationWithDualScreenFlag();\n  });\n\n  it('User can toggle between single and dual screenmodes for a dual screen device', async () => {\n    await selectDualScreen();\n    await clickToggleButton();\n    const widthDual = await getWidthOfDevice();\n    assert(widthDual === DUO_VERTICAL_SPANNED_WIDTH);\n\n    await clickToggleButton();\n    const widthSingle = await getWidthOfDevice();\n    assert(widthSingle === DUO_VERTICAL_WIDTH);\n  });\n\n  it('User may not click toggle dual screen button for a non-dual screen device', async () => {\n    await selectNonDualScreenDevice();\n    // toggle button should not be found\n    const toggleButton = await selectToggleButton();\n    const element = toggleButton.asElement();\n    const hidden = element ? element.evaluate(x => x.classList.contains('hidden')) : false;\n    assert(hidden);\n  });\n});\n"]}