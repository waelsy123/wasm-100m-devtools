{"version":3,"file":"name_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/snippets/name_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAC5B,iCAAmC;AAEnC,4EAAmH;AACnH,sEAAsH;AAEtH,IAAA,gBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,KAAK,UAAU,OAAO,CAAC,IAAY;QACjC,MAAM,IAAA,qCAAgB,GAAE,CAAC;QACzB,MAAM,IAAA,wCAAmB,GAAE,CAAC;QAC5B,MAAM,IAAA,qCAAgB,EAAC,IAAI,CAAC,CAAC;QAE7B,gBAAgB;QAChB,aAAM,CAAC,SAAS,CAAC,MAAM,IAAA,mCAAc,GAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAEjD,MAAM,IAAA,uCAAe,GAAE,CAAC;QACxB,MAAM,IAAA,kDAA0B,GAAE,CAAC;QAEnC,8BAA8B;QAC9B,aAAM,CAAC,SAAS,CAAC,MAAM,IAAA,4CAAoB,GAAE,EAAE;YAC7C,IAAI,GAAG,QAAQ;SAChB,CAAC,CAAC;IACL,CAAC;IAED,IAAA,UAAE,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,IAAA,UAAE,EAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,IAAA,UAAE,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,OAAO,CAAC,qBAAqB,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,IAAA,UAAE,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,OAAO,CAAC,qBAAqB,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\nimport {describe, it} from 'mocha';\n\nimport {getAvailableSnippets, openCommandMenu, showSnippetsAutocompletion} from '../helpers/quick_open-helpers.js';\nimport {createNewSnippet, getOpenSources, openSnippetsSubPane, openSourcesPanel} from '../helpers/sources-helpers.js';\n\ndescribe('Snippets subpane', () => {\n  async function runTest(name: string) {\n    await openSourcesPanel();\n    await openSnippetsSubPane();\n    await createNewSnippet(name);\n\n    // Title matches\n    assert.deepEqual(await getOpenSources(), [name]);\n\n    await openCommandMenu();\n    await showSnippetsAutocompletion();\n\n    // Available in autocompletion\n    assert.deepEqual(await getAvailableSnippets(), [\n      name + '\\u200B',\n    ]);\n  }\n\n  it('can create snippet with simple name', async () => {\n    await runTest('MySnippet');\n  });\n\n  it('can create snippet with name like default name', async () => {\n    await runTest('My Snippet #555');\n  });\n\n  it('can create snippet with name with slash', async () => {\n    await runTest('My Group #1/Snip #1');\n  });\n\n  it('can create snippet with name with backslash', async () => {\n    await runTest('My Group #1\\Snip #1');\n  });\n});\n"]}