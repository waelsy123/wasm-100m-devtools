{"version":3,"file":"breakpoint_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/snippets/breakpoint_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAC5B,iCAAmC;AAEnC,sDAA0E;AAC1E,sEAA4N;AAE5N,IAAA,gBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAA,UAAE,EAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,WAAW,GAAG,mBAAmB,CAAC;QACxC,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QAExC,MAAM,IAAA,qCAAgB,GAAE,CAAC;QACzB,MAAM,IAAA,wCAAmB,GAAE,CAAC;QAC5B,MAAM,IAAA,qCAAgB,EAAC,WAAW,EAAE,qDAAqD,CAAC,CAAC;QAE3F,aAAM,CAAC,SAAS,CAAC,MAAM,IAAA,mCAAc,GAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QAExD,MAAM,IAAA,yCAAoB,EAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,UAAU,GAAG,MAAM,IAAA,4CAAuB,GAAE,CAAC;QACjD,aAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,IAAA,iBAAK,EAAC,4BAA4B,CAAC,CAAC;QAE1C,4BAA4B;QAC5B,MAAM,IAAA,mBAAO,EAAC,kCAAa,CAAC,CAAC;QAE7B,MAAM,IAAA,6CAAwB,GAAE,CAAC;QAEjC,kCAAkC;QAClC,UAAU,GAAG,MAAM,IAAA,4CAAuB,GAAE,CAAC;QAC7C,aAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,aAAM,CAAC,SAAS,CAAC,MAAM,IAAA,mCAAc,GAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QAExD,MAAM,IAAA,iBAAK,EAAC,kCAAa,CAAC,CAAC;QAC3B,MAAM,IAAA,mBAAO,EAAC,iCAAY,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\nimport {describe, it} from 'mocha';\n\nimport {click, getBrowserAndPages, waitFor} from '../../shared/helper.js';\nimport {addBreakpointForLine, createNewSnippet, executionLineHighlighted, getBreakpointDecorators, getOpenSources, openSnippetsSubPane, openSourcesPanel, PAUSE_BUTTON, RESUME_BUTTON} from '../helpers/sources-helpers.js';\n\ndescribe('Snippets subpane', () => {\n  it('can stop on breakpoints', async () => {\n    const snippetName = 'Script snippet #7';\n    const {frontend} = getBrowserAndPages();\n\n    await openSourcesPanel();\n    await openSnippetsSubPane();\n    await createNewSnippet(snippetName, 'console.log(1);\\nconsole.log(2);\\nconsole.log(3);\\n');\n\n    assert.deepEqual(await getOpenSources(), [snippetName]);\n\n    await addBreakpointForLine(frontend, 2);\n    let decorators = await getBreakpointDecorators();\n    assert.deepEqual(decorators, [2]);\n\n    await click('[aria-label=\"Run snippet\"]');\n\n    // We stop on the breakpoint\n    await waitFor(RESUME_BUTTON);\n\n    await executionLineHighlighted();\n\n    // The breakpoint is still visible\n    decorators = await getBreakpointDecorators();\n    assert.deepEqual(decorators, [2]);\n    assert.deepEqual(await getOpenSources(), [snippetName]);\n\n    await click(RESUME_BUTTON);\n    await waitFor(PAUSE_BUTTON);\n  });\n});\n"]}