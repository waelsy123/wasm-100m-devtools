{"version":3,"file":"network_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/network/network_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {$textContent, goTo, reloadDevTools, typeText, waitFor} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {getAllRequestNames, getSelectedRequestName, navigateToNetworkTab, selectRequestByName, setCacheDisabled, setPersistLog, waitForSelectedRequestChange, waitForSomeRequestsToAppear} from '../helpers/network-helpers.js';\n\nconst SIMPLE_PAGE_REQUEST_NUMBER = 10;\nconst SIMPLE_PAGE_URL = `requests.html?num=${SIMPLE_PAGE_REQUEST_NUMBER}`;\n\nasync function getCategoryXHRFilter() {\n  const filters = await waitFor('.filter-bitset-filter');\n  const categoryXHRFilter = await $textContent('Fetch/XHR', filters);\n  if (!categoryXHRFilter) {\n    assert.fail('Could not find category XHR filter to click.');\n  }\n  return categoryXHRFilter;\n}\n\nasync function getThirdPartyFilter() {\n  const filters = await waitFor('.filter-bar');\n  const thirdPartyFilter = await $textContent('3rd-party requests', filters);\n  if (!thirdPartyFilter) {\n    assert.fail('Could not find category third-party filter to click.');\n  }\n  return thirdPartyFilter;\n}\n\ndescribe('The Network Tab', async function() {\n  // The tests here tend to take time because they wait for requests to appear in the request panel.\n  this.timeout(5000);\n\n  beforeEach(async () => {\n    await navigateToNetworkTab('empty.html');\n    await setCacheDisabled(true);\n    await setPersistLog(false);\n  });\n\n  // Flakey test\n  it.skip('[crbug.com/1093287] displays requests', async () => {\n    await navigateToNetworkTab(SIMPLE_PAGE_URL);\n\n    // Wait for all the requests to be displayed + 1 to account for the page itself.\n    await waitForSomeRequestsToAppear(SIMPLE_PAGE_REQUEST_NUMBER + 1);\n\n    const expectedNames = [SIMPLE_PAGE_URL];\n    for (let i = 0; i < SIMPLE_PAGE_REQUEST_NUMBER; i++) {\n      expectedNames.push(`image.svg?id=${i}`);\n    }\n\n    const names = await getAllRequestNames();\n    assert.deepStrictEqual(names, expectedNames, 'The right request names should appear in the list');\n  });\n\n  // Flakey test\n  it.skip('[crbug.com/1093287] can select requests', async () => {\n    await navigateToNetworkTab(SIMPLE_PAGE_URL);\n\n    let selected = await getSelectedRequestName();\n    assert.isUndefined(selected, 'No request should be selected by default');\n\n    await selectRequestByName(SIMPLE_PAGE_URL);\n    await waitForSelectedRequestChange(selected);\n\n    selected = await getSelectedRequestName();\n    assert.strictEqual(selected, SIMPLE_PAGE_URL, 'Selecting the first request should work');\n\n    const lastRequestName = `image.svg?id=${SIMPLE_PAGE_REQUEST_NUMBER - 1}`;\n    await selectRequestByName(lastRequestName);\n    await waitForSelectedRequestChange(selected);\n\n    selected = await getSelectedRequestName();\n    assert.strictEqual(selected, lastRequestName, 'Selecting the last request should work');\n  });\n\n  // Flakey test\n  it.skip('[crbug.com/1093287] can persist requests', async () => {\n    await navigateToNetworkTab(SIMPLE_PAGE_URL);\n\n    // Wait for all the requests to be displayed + 1 to account for the page itself, and get their names.\n    await waitForSomeRequestsToAppear(SIMPLE_PAGE_REQUEST_NUMBER + 1);\n    const firstPageRequestNames = await getAllRequestNames();\n\n    await setPersistLog(true);\n\n    // Navigate to a new page, and wait for the same requests to still be there.\n    await goTo('about:blank');\n    await waitForSomeRequestsToAppear(SIMPLE_PAGE_REQUEST_NUMBER + 1);\n    const secondPageRequestNames = await getAllRequestNames();\n\n    assert.deepStrictEqual(secondPageRequestNames, firstPageRequestNames, 'The requests were persisted');\n  });\n\n  it('persists filters across a reload', async () => {\n    await navigateToNetworkTab(SIMPLE_PAGE_URL);\n    let filterInput = await waitFor('.filter-input-field.text-prompt');\n    filterInput.focus();\n    await typeText('foo');\n    let categoryXHRFilter = await getCategoryXHRFilter();\n    await categoryXHRFilter.click();\n\n    await reloadDevTools({selectedPanel: {name: 'network'}});\n    filterInput = await waitFor('.filter-input-field.text-prompt');\n    const filterText = await filterInput.evaluate(x => (x as HTMLElement).innerText);\n    assert.strictEqual(filterText, 'foo');\n\n    categoryXHRFilter = await getCategoryXHRFilter();\n    const xhrHasSelectedClass = await categoryXHRFilter.evaluate(x => x.classList.contains('selected'));\n    assert.isTrue(xhrHasSelectedClass);\n  });\n\n  it('can show only third-party requests', async () => {\n    await navigateToNetworkTab('third-party-resources.html');\n    await waitForSomeRequestsToAppear(3);\n\n    let names = await getAllRequestNames();\n    /* assert.deepStrictEqual(names, [], 'The right request names should appear in the list'); */\n    const thirdPartyFilter = await getThirdPartyFilter();\n    await thirdPartyFilter.click();\n\n    names = await getAllRequestNames();\n    assert.deepStrictEqual(names, ['external_image.svg'], 'The right request names should appear in the list');\n  });\n});\n"]}