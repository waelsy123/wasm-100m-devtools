{"version":3,"file":"context-menu-helpers.js","sourceRoot":"","sources":["../../../../../../test/e2e/helpers/context-menu-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport {assert} from 'chai';\nimport type {puppeteer} from '../../shared/helper.js';\nimport {$, $$, $textContent, platform, waitForFunction} from '../../shared/helper.js';\n\nexport function platformSpecificTextForSubMenuEntryItem(text: string): string {\n  /**\n   * On Mac the context menu adds the ▶ icon to the sub menu entry points in the\n   * context menu, but on Linux/Windows it uses an image. So if we're running on\n   * Mac, we append the search text with the icon, else we do not.\n   */\n  return platform === 'mac' ? `${text}▶` : text;\n}\n\nexport async function assertTopLevelContextMenuItemsText(expectedOptions: string[]): Promise<void> {\n  const contextMenu = await $('.soft-context-menu');\n  if (!contextMenu) {\n    assert.fail('Could not find context menu.');\n  }\n\n  const allItems = await $$('.soft-context-menu > .soft-context-menu-item');\n  const allItemsText = await Promise.all(allItems.map(item => item.evaluate(div => div.textContent)));\n\n  assert.deepEqual(allItemsText, expectedOptions);\n}\nexport async function findSubMenuEntryItem(text: string): Promise<puppeteer.ElementHandle<Element>> {\n  const textToSearchFor = platformSpecificTextForSubMenuEntryItem(text);\n  const matchingElement = await $textContent(textToSearchFor);\n\n  if (!matchingElement) {\n    const allItems = await $$('.soft-context-menu > .soft-context-menu-item');\n    const allItemsText = await Promise.all(allItems.map(item => item.evaluate(div => div.textContent)));\n    assert.fail(`Could not find \"${text}\" option on context menu. Found items: ${allItemsText.join(' | ')}`);\n  }\n  return matchingElement;\n}\n\nexport async function assertSubMenuItemsText(subMenuText: string, expectedOptions: string[]): Promise<void> {\n  const subMenuEntryItem = await findSubMenuEntryItem(subMenuText);\n  if (!subMenuEntryItem) {\n    const allItems = await $$('.soft-context-menu > .soft-context-menu-item');\n    const allItemsText = await Promise.all(allItems.map(item => item.evaluate(div => div.textContent)));\n    assert.fail(`Could not find \"${subMenuText}\" option on context menu. Found items: ${allItemsText.join(' | ')}`);\n  }\n\n  await subMenuEntryItem.hover();\n  await waitForFunction(async () => {\n    const menus = await $$('.soft-context-menu');\n    // Wait for the main menu + the sub menu to be in the DOM\n    return menus.length === 2;\n  });\n  const allMenus = await $$('.soft-context-menu');\n  // Each submenu is rendered as a separate context menu and is appended to\n  // the DOM after the main context menu, hence the array index.\n  const subMenuElement = allMenus[1];\n  if (!subMenuElement) {\n    assert.fail(`Could not find sub menu for ${subMenuText}`);\n  }\n  const subMenuItems = await $$('.soft-context-menu-item', subMenuElement);\n  const subMenuItemsText = await Promise.all(subMenuItems.map(item => item.evaluate(div => div.textContent)));\n  assert.deepEqual(subMenuItemsText, expectedOptions);\n}\n"]}