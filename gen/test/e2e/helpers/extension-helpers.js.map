{"version":3,"file":"extension-helpers.js","sourceRoot":"","sources":["../../../../../../test/e2e/helpers/extension-helpers.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAI7B,sDAAkH;AAElH,oEAAoE;AACpE,8DAA8D;AAC9D,MAAM,UAAU,GAAQ,MAAM,CAAC;AAE/B,IAAI,oBAAoB,GAAqB,OAAO,CAAC,OAAO,EAAE,CAAC;AAE/D,yGAAyG;AACzG,SAAS,IAAI;IACX,MAAM,MAAM,GAAG,kBAAkB,CAAC;IAClC,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACvD,MAAM,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzD,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzD,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzD,OAAO,GAAG,KAAK,IAAI,IAAI,KAAK,OAAO,KAAK,OAAO,IAAI,MAAM,EAAE,CAAC;AAC9D,CAAC;AAED,SAAgB,oCAAoC;IAClD,OAAO,IAAA,4BAAgB,EAAC,IAAA,uCAA2B,GAAE,CAAC,CAAC;AACzD,CAAC;AAFD,oFAEC;AAEM,KAAK,UAAU,aAAa,CAAC,IAAY,EAAE,SAAkB;IAClE,SAAS,GAAG,SAAS,IAAI,GAAG,oCAAoC,EAAE,kCAAkC,CAAC;IACrG,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;IACxC,MAAM,aAAa,GAAG,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC;IAExC,oHAAoH;IACpH,MAAM,IAAI,GAAG,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC;IAC9E,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IAC5C,OAAO,IAAI,CAAC;IAEZ,KAAK,UAAU,MAAM,CAAC,QAAwB,EAAE,aAAgD;QAC9F,yFAAyF;QACzF,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC;QACvC,wEAAwE;QACxE,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,QAAQ,CACvC,aAAa,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CACvD,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,EAC7F,aAAa,CAAC,CAAC;QAEnB,SAAS,aAAa;YACpB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;gBACjB,MAAM,CAAC,MAAkB,GAAG,EAAE,CAAC;aACjC;QACH,CAAC;QAED,MAAM,iBAAiB,GAAG,IAAI,EAAE,CAAC;QACjC,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,IAAI,CACvC,uCAAuC,EACvC,EAAC,MAAM,EAAE,IAAI,aAAa,OAAO,WAAW,KAAK,iBAAiB,IAAI,EAAC,CAAC,CAAC;QAE7E,IAAI;YACF,MAAM,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACtC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;gBAClE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,6BAA6B,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC;gBAC7G,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC/B,MAAM,IAAI,KAAK,CAAC,uBAAuB,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;iBAC9D;gBACD,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE;oBACjC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;iBACrD;gBACD,OAAO,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;oBAChC,gBAAgB,CAAC,CAAC,CAAuB,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;gBACtE,CAAC,CAAC,CAAC;YACL,CAAC,EAAE,aAAa,CAAC,CAAC;YAElB,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAO,EAAC,6BAA6B,IAAI,IAAI,CAAC,CAAC;YACpE,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;YAC1C,IAAI,CAAC,KAAK,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACrD;YACD,OAAO,KAAK,CAAC;SACd;gBAAS;YACR,MAAM,OAAO,CAAC,IAAI,CAAC,0CAA0C,EAAE,gBAAgB,CAAC,CAAC;SAClF;IACH,CAAC;AACH,CAAC;AAvDD,sCAuDC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Chrome} from '../../../extension-api/ExtensionAPI.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport type * as puppeteer from 'puppeteer';\nimport {getBrowserAndPages, getDevToolsFrontendHostname, getResourcesPath, waitFor} from '../../shared/helper.js';\n\n// TODO: Remove once Chromium updates its version of Node.js to 12+.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst globalThis: any = global;\n\nlet loadExtensionPromise: Promise<unknown> = Promise.resolve();\n\n// FIXME(chromium:1248945): Replace with crypto.randomUUID() once Chromium updates its version of node.js\nfunction guid() {\n  const digits = '0123456789abcdef';\n  const rnd = () => digits[Math.floor(Math.random() * (digits.length - 1))];\n  const eight = new Array(8).fill('0').map(rnd).join('');\n  const four = new Array(4).fill('0').map(rnd).join('');\n  const version = new Array(3).fill('0').map(rnd).join('');\n  const variant = new Array(3).fill('0').map(rnd).join('');\n  const twelve = new Array(12).fill('0').map(rnd).join('');\n  return `${eight}-${four}-4${version}-8${variant}-${twelve}`;\n}\n\nexport function getResourcesPathWithDevToolsHostname() {\n  return getResourcesPath(getDevToolsFrontendHostname());\n}\n\nexport async function loadExtension(name: string, startPage?: string) {\n  startPage = startPage || `${getResourcesPathWithDevToolsHostname()}/extensions/empty_extension.html`;\n  const {frontend} = getBrowserAndPages();\n  const extensionInfo = {startPage, name};\n\n  // Because the injected script is shared across calls for the target, we cannot run multiple instances concurrently.\n  const load = loadExtensionPromise.then(() => doLoad(frontend, extensionInfo));\n  loadExtensionPromise = load.catch(() => {});\n  return load;\n\n  async function doLoad(frontend: puppeteer.Page, extensionInfo: {startPage: string, name: string}) {\n    // @ts-ignore The pptr API doesn't allow us to remove the API injection after we're done.\n    const session = await frontend._client;\n    // TODO(chromium:1246836) remove once real extension tests are available\n    const injectedAPI = await frontend.evaluate(\n        extensionInfo => globalThis.buildExtensionAPIInjectedScript(\n            extensionInfo, undefined, 'default', globalThis.UI.shortcutRegistry.globalShortcutKeys()),\n        extensionInfo);\n\n    function declareChrome() {\n      if (!window.chrome) {\n        (window.chrome as unknown) = {};\n      }\n    }\n\n    const extensionScriptId = guid();\n    const injectedScriptId = await session.send(\n        'Page.addScriptToEvaluateOnNewDocument',\n        {source: `(${declareChrome})();${injectedAPI}('${extensionScriptId}')`});\n\n    try {\n      await frontend.evaluate(extensionInfo => {\n        globalThis.Extensions.extensionServer.addExtension(extensionInfo);\n        const extensionIFrames = document.body.querySelectorAll(`[data-devtools-extension=\"${extensionInfo.name}\"]`);\n        if (extensionIFrames.length > 1) {\n          throw new Error(`Duplicate extension ${extensionInfo.name}`);\n        }\n        if (extensionIFrames.length === 0) {\n          throw new Error('Installing the extension failed.');\n        }\n        return new Promise<void>(resolve => {\n          (extensionIFrames[0] as HTMLIFrameElement).onload = () => resolve();\n        });\n      }, extensionInfo);\n\n      const iframe = await waitFor(`[data-devtools-extension=\"${name}\"]`);\n      const frame = await iframe.contentFrame();\n      if (!frame) {\n        throw new Error('Installing the extension failed.');\n      }\n      return frame;\n    } finally {\n      await session.send('Page.removeScriptToEvaluateOnNewDocument', injectedScriptId);\n    }\n  }\n}\n"]}