{"version":3,"file":"emulation-helpers.js","sourceRoot":"","sources":["../../../../../../test/e2e/helpers/emulation-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as puppeteer from 'puppeteer';\n\nimport {$, click, enableExperiment, getBrowserAndPages, goToResource, reloadDevTools, waitFor} from '../../shared/helper.js';\n\nconst DEVICE_TOOLBAR_TOGGLER_SELECTOR = '[aria-label=\"Toggle device toolbar\"]';\nconst DEVICE_TOOLBAR_SELECTOR = '.device-mode-toolbar';\nconst DEVICE_TOOLBAR_OPTIONS_SELECTOR = '.device-mode-toolbar .device-mode-toolbar-options';\nconst MEDIA_QUERY_INSPECTOR_SELECTOR = '.media-inspector-view';\nconst DEVICE_LIST_DROPDOWN_SELECTOR = '.toolbar-button';\nconst ZOOM_LIST_DROPDOWN_SELECTOR = '[aria-label*=\"Zoom\"]';\nconst SURFACE_DUO_MENU_ITEM_SELECTOR = '[aria-label*=\"Surface Duo\"]';\nconst EDIT_MENU_ITEM_SELECTOR = '[aria-label*=\"Edit\"]';\nconst TEST_DEVICE_MENU_ITEM_SELECTOR = '[aria-label*=\"Test device, unchecked\"]';\nconst DUAL_SCREEN_BUTTON_SELECTOR = '[aria-label=\"Toggle dual-screen mode\"]';\nconst SCREEN_DIM_INPUT_SELECTOR = '[title=\"Width\"]';\n\nexport const reloadDockableFrontEnd = async () => {\n  await reloadDevTools({canDock: true});\n};\n\nexport const openDeviceToolbar = async () => {\n  const deviceToolbarToggler = await waitFor(DEVICE_TOOLBAR_TOGGLER_SELECTOR);\n  const togglerARIAPressed = await deviceToolbarToggler.evaluate(element => element.getAttribute('aria-pressed'));\n  const isOpen = togglerARIAPressed === 'true';\n  if (isOpen) {\n    return;\n  }\n  await click(deviceToolbarToggler);\n  await waitFor(DEVICE_TOOLBAR_SELECTOR);\n};\n\nexport const showMediaQueryInspector = async () => {\n  const inspector = await $(MEDIA_QUERY_INSPECTOR_SELECTOR);\n  if (inspector) {\n    return;\n  }\n  await click(DEVICE_TOOLBAR_OPTIONS_SELECTOR);\n  const {frontend} = getBrowserAndPages();\n  await frontend.keyboard.press('ArrowDown');\n  await frontend.keyboard.press('Enter');\n  await waitFor(MEDIA_QUERY_INSPECTOR_SELECTOR);\n};\n\nexport const startEmulationWithDualScreenFlag = async () => {\n  await enableExperiment('dualScreenSupport', {canDock: true});\n  await goToResource('emulation/dual-screen-inspector.html');\n  await waitFor('.tabbed-pane-left-toolbar');\n  await openDeviceToolbar();\n};\n\nexport const getButtonDisabled = async (spanButton: puppeteer.ElementHandle<HTMLButtonElement>) => {\n  return await spanButton.evaluate((e: HTMLButtonElement) => {\n    return e.disabled;\n  });\n};\n\nexport const clickDevicesDropDown = async () => {\n  const toolbar = await waitFor(DEVICE_TOOLBAR_SELECTOR);\n  const button = await waitFor(DEVICE_LIST_DROPDOWN_SELECTOR, toolbar);\n  await click(button);\n};\n\nexport const clickZoomDropDown = async () => {\n  const toolbar = await waitFor(DEVICE_TOOLBAR_SELECTOR);\n  const button = await waitFor(ZOOM_LIST_DROPDOWN_SELECTOR, toolbar);\n  await click(button);\n};\n\nexport const selectToggleButton = async () => {\n  // button that toggles between single and double screen.\n  const toggleButton = await $(DUAL_SCREEN_BUTTON_SELECTOR) as puppeteer.ElementHandle<HTMLButtonElement>;\n  return toggleButton;\n};\n\nexport const selectEdit = async () => {\n  await clickDevicesDropDown();\n  const edit = await waitFor(EDIT_MENU_ITEM_SELECTOR);\n  await click(edit);\n};\n\nexport const selectDevice = async (name: string) => {\n  await clickDevicesDropDown();\n  const edit = await waitFor(`[aria-label*=\"${name}, unchecked\"]`);\n  await click(edit);\n};\n\nexport const selectTestDevice = async () => {\n  await clickDevicesDropDown();\n  const edit = await waitFor(TEST_DEVICE_MENU_ITEM_SELECTOR);\n  await click(edit);\n};\n\n// Test if span button works when emulating a dual screen device.\nexport const selectDualScreen = async () => {\n  await clickDevicesDropDown();\n  const duo = await waitFor(SURFACE_DUO_MENU_ITEM_SELECTOR);\n  await click(duo);\n};\n\nexport const clickToggleButton = async () => {\n  // make sure the toggle button is clickable.\n  const toggleButton = await selectToggleButton();\n  await click(toggleButton);\n};\n\nexport const getWidthOfDevice = async () => {\n  // Read the width of spanned duo to make sure spanning works.\n  const widthInput = await waitFor(SCREEN_DIM_INPUT_SELECTOR);\n  return widthInput.evaluate(e => (e as HTMLInputElement).value);\n};\n\nconst IPAD_MENU_ITEM_SELECTOR = '[aria-label*=\"iPad\"]';\n\n// Test if span button is clickable when emulating a non-dual-screen device.\nexport const selectNonDualScreenDevice = async () => {\n  await clickDevicesDropDown();\n  const nonDual = await waitFor(IPAD_MENU_ITEM_SELECTOR);\n  await click(nonDual);\n};\n"]}