import type * as puppeteer from 'puppeteer';
export declare const CATEGORY = ".issue-category:not(.hidden-issues)";
export declare const KIND = ".issue-kind";
export declare const CATEGORY_NAME = ".issue-category .title";
export declare const CATEGORY_CHECKBOX = "input[aria-label=\"Group by category\"]";
export declare const KIND_CHECKBOX = "input[aria-label=\"Group by kind\"]";
export declare const ISSUE = ".issue:not(.hidden-issue)";
export declare const ISSUE_TITLE = ".issue .title";
export declare const AFFECTED_ELEMENT_ICON = ".affected-resource-csp-info-node";
export declare const ELEMENT_REVEAL_ICON = ".element-reveal-icon";
export declare const ELEMENTS_PANEL_SELECTOR = ".panel[aria-label=\"elements\"]";
export declare const SOURCES_LINK = ".affected-source-location > span";
export declare const BLOCKED_STATUS = ".affected-resource-blocked-status";
export declare const REPORT_ONLY_STATUS = ".affected-resource-report-only-status";
export declare const RESOURCES_LABEL = ".affected-resource-label";
export declare const HIDE_ISSUES_MENU = "devtools-hide-issues-menu";
export declare const HIDE_THIS_ISSUE = "Hide issues like this";
export declare const UNHIDE_THIS_ISSUE = "Unhide issues like this";
export declare const UNHIDE_ALL_ISSUES = ".unhide-all-issues-button";
export declare function getHideIssuesMenu(): Promise<puppeteer.ElementHandle<Element>>;
export declare function navigateToIssuesTab(): Promise<void>;
export declare function getUnhideAllIssuesBtn(): Promise<puppeteer.ElementHandle<Element>>;
export declare function getHideIssuesMenuItem(): Promise<puppeteer.ElementHandle<HTMLElement> | null>;
export declare function getUnhideIssuesMenuItem(): Promise<puppeteer.ElementHandle<HTMLElement> | null>;
export declare function getHiddenIssuesRow(): Promise<puppeteer.ElementHandle<HTMLElement> | null>;
export declare function getHiddenIssuesRowBody(): Promise<puppeteer.ElementHandle<HTMLElement> | null>;
export declare function assertCategoryName(categoryName: string): Promise<void>;
export declare function assertIssueTitle(issueMessage: string): Promise<void>;
export declare function getIssueByTitle(issueMessage: string): Promise<puppeteer.ElementHandle<HTMLElement> | undefined>;
export declare function getAndExpandSpecificIssueByTitle(issueMessage: string): Promise<puppeteer.ElementHandle<HTMLElement> | undefined>;
export declare function getIssueHeaderByTitle(issueMessage: string): Promise<puppeteer.ElementHandle<HTMLElement> | undefined>;
export declare function assertStatus(status: 'blocked' | 'report-only'): Promise<void>;
export declare function expandCategory(): Promise<void>;
export declare function expandKind(classSelector: string): Promise<void>;
export declare function expandIssue(): Promise<void>;
interface IssueResourceSection {
    label: puppeteer.ElementHandle<Element>;
    content: puppeteer.ElementHandle<Element>;
}
export declare function getResourcesElement(resourceName: string, issueElement?: puppeteer.ElementHandle<Element> | undefined, className?: string): Promise<IssueResourceSection>;
export declare function ensureResourceSectionIsExpanded(section: IssueResourceSection): Promise<void>;
export declare function waitForTableFromResourceSection(resourceContentElement: puppeteer.ElementHandle<Element>, predicate: (table: string[][]) => true | undefined): Promise<string[][]>;
export declare function waitForTableFromResourceSectionContents(resourceContentElement: puppeteer.ElementHandle<Element>, expected: (string | RegExp)[][]): Promise<string[][]>;
export declare function getGroupByCategoryChecked(): Promise<boolean>;
export declare function getGroupByKindChecked(): Promise<boolean>;
export declare function revealNodeInElementsPanel(): Promise<void>;
export declare function revealViolatingSourcesLines(): Promise<void>;
export declare function toggleGroupByCategory(): Promise<void>;
export declare function toggleGroupByKind(): Promise<void>;
export {};
