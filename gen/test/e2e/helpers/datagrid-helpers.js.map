{"version":3,"file":"datagrid-helpers.js","sourceRoot":"","sources":["../../../../../../test/e2e/helpers/datagrid-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {ElementHandle} from 'puppeteer';\nimport {$, $$, getBrowserAndPages, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {assert} from 'chai';\n\nexport async function getDataGridRows(\n    expectedNumberOfRows: number, root?: ElementHandle<Element>,\n    matchExactNumberOfRows: boolean = true): Promise<ElementHandle<Element>[][]> {\n  const dataGrid = await waitFor('devtools-data-grid', root);\n  const rowsSelector = 'tbody > tr:not(.padding-row):not(.hidden)';\n  const rowsHandler = await waitForFunction(async () => {\n    const rows = (await $$(rowsSelector, dataGrid));\n    if (matchExactNumberOfRows) {\n      return (rows.length === expectedNumberOfRows) ? rows : undefined;\n    }\n    return (rows.length >= expectedNumberOfRows) ? rows : undefined;\n  });\n\n  const tableElements = [];\n  for (const rowHandler of rowsHandler) {\n    const cells = await $$('td[data-row-index]:not(.hidden)', rowHandler);\n    tableElements.push(cells);\n  }\n  return tableElements;\n}\n\nexport async function getDataGrid(root?: ElementHandle) {\n  const dataGrid = await waitFor('devtools-data-grid', root);\n  if (!dataGrid) {\n    assert.fail('Could not find data-grid');\n  }\n  return dataGrid;\n}\n\nexport async function getDataGridController() {\n  const dataGrid = await waitFor('devtools-data-grid-controller');\n  if (!dataGrid) {\n    assert.fail('Could not find data-grid-controller');\n  }\n  return dataGrid;\n}\n\nexport async function getInnerTextOfDataGridCells(\n    dataGridElement: ElementHandle<Element>, expectedNumberOfRows: number,\n    matchExactNumberOfRows: boolean = true): Promise<string[][]> {\n  const gridRows = await getDataGridRows(expectedNumberOfRows, dataGridElement, matchExactNumberOfRows);\n  const table: Array<Array<string>> = [];\n  for (const row of gridRows) {\n    const textRow = [];\n    for (const cell of row.values()) {\n      const text = await cell.evaluate(x => {\n        return (x as HTMLElement).innerText || '';\n      });\n      textRow.push(text);\n    }\n    table.push(textRow);\n  }\n  return table;\n}\nexport async function getDataGridCellAtIndex(\n    dataGrid: ElementHandle<Element>, position: {row: number, column: number}) {\n  const cell = await $(`td[data-row-index=\"${position.row}\"][data-col-index=\"${position.column}\"]`, dataGrid);\n  if (!cell) {\n    assert.fail(`Could not load column at position ${JSON.stringify(position)}`);\n  }\n  return cell;\n}\n\nexport async function getDataGridFillerCellAtColumnIndex(dataGrid: ElementHandle<Element>, columnIndex: number) {\n  const cell = await $(`tr.filler-row > td[data-filler-row-column-index=\"${columnIndex}\"]`, dataGrid);\n  if (!cell) {\n    assert.fail(`Could not load filler column at position ${columnIndex}`);\n  }\n  return cell;\n}\nexport async function getDataGridScrollTop(dataGrid: ElementHandle) {\n  const wrappingContainer = await $('.wrapping-container', dataGrid);\n  if (!wrappingContainer) {\n    throw new Error('Could not find wrapping container.');\n  }\n  return await wrappingContainer.evaluate((elem: Element) => {\n    return elem.scrollTop;\n  });\n}\n\nexport async function assertDataGridNotScrolled(dataGrid: ElementHandle) {\n  const scrollTop = await getDataGridScrollTop(dataGrid);\n  assert.strictEqual(scrollTop, 0, 'The data-grid did not have 0 scrollTop');\n}\n\nexport async function waitForScrollTopOfDataGrid(dataGrid: ElementHandle, targetTop: number): Promise<boolean> {\n  return waitForFunction(async () => {\n    const scrollTop = await getDataGridScrollTop(dataGrid);\n    return scrollTop === targetTop;\n  });\n}\n\nexport async function scrollDataGridDown(dataGrid: ElementHandle, targetDown: number): Promise<void> {\n  const scrollWrapper = await $('.wrapping-container', dataGrid);\n  if (!scrollWrapper) {\n    throw new Error('Could not find wrapping container.');\n  }\n  const wrappingBox = await scrollWrapper.boundingBox();\n  if (!wrappingBox) {\n    throw new Error('Wrapping box did not have a bounding box.');\n  }\n  const {frontend} = getBrowserAndPages();\n  // +20 to move from the top left point so we are definitely scrolling\n  // within the container\n  await frontend.mouse.move(wrappingBox.x + 20, wrappingBox.y + 20);\n  await frontend.mouse.wheel({deltaY: targetDown});\n  await waitForScrollTopOfDataGrid(dataGrid, targetDown);\n}\n"]}