{"version":3,"file":"changes-helpers.js","sourceRoot":"","sources":["../../../../../../test/e2e/helpers/changes-helpers.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAE7B,sDAAsG;AAEtG,4EAAiE;AAEjE,MAAM,mBAAmB,GAAG,iCAAiC,CAAC;AAEvD,KAAK,UAAU,6BAA6B,CAAC,QAAgB;IAClE,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;IAExC,MAAM,IAAA,wBAAY,EAAC,WAAW,QAAQ,OAAO,CAAC,CAAC;IAE/C,MAAM,IAAA,uCAAe,GAAE,CAAC;IACxB,MAAM,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,MAAM,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAEvC,MAAM,IAAA,mBAAO,EAAC,mBAAmB,CAAC,CAAC;AACrC,CAAC;AAVD,sEAUC;AAEM,KAAK,UAAU,cAAc;IAClC,MAAM,IAAI,GAAG,MAAM,IAAA,mBAAO,EAAC,mBAAmB,CAAC,CAAC;IAChD,MAAM,KAAK,GAAG,MAAM,IAAA,cAAE,EAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;IAEpD,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAqB,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;AAPD,wCAOC;AAEM,KAAK,UAAU,iBAAiB,CAAC,cAAwB;IAC9D,IAAI,UAAU,GAAG,EAAE,CAAC;IAEpB,OAAO,IAAA,2BAAe,EAAC,KAAK,IAAI,EAAE;QAChC,UAAU,GAAG,MAAM,cAAc,EAAE,CAAC;QACpC,OAAO,UAAU,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC;AAPD,8CAOC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {$$, getBrowserAndPages, goToResource, waitFor, waitForFunction} from '../../shared/helper.js';\n\nimport {openCommandMenu} from '../helpers/quick_open-helpers.js';\n\nconst PANEL_ROOT_SELECTOR = 'div[aria-label=\"Changes panel\"]';\n\nexport async function openChangesPanelAndNavigateTo(testName: string) {\n  const {frontend} = getBrowserAndPages();\n\n  await goToResource(`changes/${testName}.html`);\n\n  await openCommandMenu();\n  await frontend.keyboard.type('changes');\n  await frontend.keyboard.press('Enter');\n\n  await waitFor(PANEL_ROOT_SELECTOR);\n}\n\nexport async function getChangesList() {\n  const root = await waitFor(PANEL_ROOT_SELECTOR);\n  const items = await $$('.tree-element-title', root);\n\n  return Promise.all(items.map(node => {\n    return node.evaluate(node => node.textContent as string);\n  }));\n}\n\nexport async function waitForNewChanges(initialChanges: string[]) {\n  let newChanges = [];\n\n  return waitForFunction(async () => {\n    newChanges = await getChangesList();\n    return newChanges.length !== initialChanges.length;\n  });\n}\n"]}