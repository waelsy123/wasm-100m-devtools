{"version":3,"file":"media-helpers.js","sourceRoot":"","sources":["../../../../../../test/e2e/helpers/media-helpers.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAE7B,sDAA+G;AAExG,KAAK,UAAU,aAAa,CAAC,KAAa;IAC/C,MAAM,EAAC,MAAM,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;IACtC,MAAM,IAAA,wBAAY,EAAC,SAAS,KAAK,EAAE,CAAC,CAAC;IAErC,uEAAuE;IACvE,OAAO,IAAI,OAAO,CAAO,KAAK,EAAC,OAAO,EAAC,EAAE;QACvC,MAAM,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAChD,MAAM,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE;YACzB,MAAM,YAAY,GAAG,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAqB,CAAC;YAChF,YAAY,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE;gBACzC,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YACH,0EAA0E;YAC1E,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,UAAU,GAAG,CAAC,EAAE;gBACvD,OAAO,EAAE,CAAC;aACX;iBAAM;gBACL,KAAK,YAAY,CAAC,IAAI,EAAE,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AApBD,sCAoBC;AAEM,KAAK,UAAU,eAAe;IACnC,OAAO,MAAM,IAAA,mBAAO,EAAC,4BAA4B,CAAC,CAAC;AACrD,CAAC;AAFD,0CAEC;AAEM,KAAK,UAAU,mBAAmB;IACvC,MAAM,WAAW,GAAG,MAAM,eAAe,EAAE,CAAC;IAC5C,OAAO,MAAM,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,WAAqB,CAAC,CAAC;AAC9E,CAAC;AAHD,kDAGC;AAEM,KAAK,UAAU,wBAAwB,CAAC,KAAa;IAC1D,OAAO,IAAA,2BAAe,EAAC,KAAK,IAAI,EAAE;QAChC,OAAO,MAAM,IAAA,uBAAW,EAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,4DAIC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {getBrowserAndPages, goToResource, waitFor, waitForFunction, waitForMany} from '../../shared/helper.js';\n\nexport async function playMediaFile(media: string) {\n  const {target} = getBrowserAndPages();\n  await goToResource(`media/${media}`);\n\n  // Need to click play manually - autoplay policy prevents it otherwise.\n  return new Promise<void>(async resolve => {\n    await target.exposeFunction('resolve', resolve);\n    await target.evaluate(() => {\n      const videoElement = document.getElementsByName('media')[0] as HTMLVideoElement;\n      videoElement.addEventListener('play', () => {\n        resolve();\n      });\n      // Just in case autoplay started before we could attach an event listener.\n      if (!videoElement.paused || videoElement.readyState > 2) {\n        resolve();\n      } else {\n        void videoElement.play();\n      }\n    });\n  });\n}\n\nexport async function getPlayerButton() {\n  return await waitFor('.player-entry-player-title');\n}\n\nexport async function getPlayerButtonText() {\n  const playerEntry = await getPlayerButton();\n  return await playerEntry.evaluate(element => element.textContent as string);\n}\n\nexport async function waitForPlayerButtonTexts(count: number) {\n  return waitForFunction(async () => {\n    return await waitForMany('.player-entry-player-title', count);\n  });\n}\n"]}