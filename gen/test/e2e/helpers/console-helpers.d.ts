import type * as puppeteer from 'puppeteer';
export declare const CONSOLE_TAB_SELECTOR = "#tab-console";
export declare const CONSOLE_MESSAGES_SELECTOR = ".console-group-messages";
export declare const CONSOLE_FIRST_MESSAGES_SELECTOR = ".console-group-messages .source-code .console-message-text";
export declare const CONSOLE_MESSAGE_TEXT_AND_ANCHOR_SELECTOR = ".console-group-messages .source-code";
export declare const LOG_LEVELS_SELECTOR = "[aria-label^=\"Log level: \"]";
export declare const LOG_LEVELS_VERBOSE_OPTION_SELECTOR = "[aria-label^=\"Verbose\"]";
export declare const CONSOLE_PROMPT_SELECTOR = ".console-prompt-editor-container";
export declare const CONSOLE_VIEW_SELECTOR = ".console-view";
export declare const CONSOLE_TOOLTIP_SELECTOR = ".cm-tooltip";
export declare const CONSOLE_COMPLETION_HINT_SELECTOR = ".cm-completionHint";
export declare const STACK_PREVIEW_CONTAINER = ".stack-preview-container";
export declare const CONSOLE_MESSAGE_WRAPPER_SELECTOR = ".console-group-messages .console-message-wrapper";
export declare const CONSOLE_SELECTOR = ".console-user-command-result";
export declare const CONSOLE_SETTINGS_SELECTOR = "[aria-label^=\"Console settings\"]";
export declare const AUTOCOMPLETE_FROM_HISTORY_SELECTOR = "[aria-label^=\"Autocomplete from history\"]";
export declare const SHOW_CORS_ERRORS_SELECTOR = "[aria-label^=\"Show CORS errors in console\"]";
export declare const CONSOLE_CREATE_LIVE_EXPRESSION_SELECTOR = "[aria-label^=\"Create live expression\"]";
export declare function deleteConsoleMessagesFilter(frontend: puppeteer.Page): Promise<void>;
export declare function filterConsoleMessages(frontend: puppeteer.Page, filter: string): Promise<void>;
export declare function waitForConsoleMessagesToBeNonEmpty(numberOfMessages: number): Promise<void>;
export declare function waitForLastConsoleMessageToHaveContent(expectedTextContent: string): Promise<void>;
export declare function getConsoleMessages(testName: string, withAnchor?: boolean, callback?: () => Promise<void>): Promise<any[]>;
export declare function getCurrentConsoleMessages(withAnchor?: boolean, callback?: () => Promise<void>): Promise<any[]>;
export declare function getStructuredConsoleMessages(): Promise<{
    message: any;
    messageClasses: any;
    repeatCount: any;
    source: any;
    stackPreview: any;
    wrapperClasses: any;
}[]>;
export declare function focusConsolePrompt(): Promise<void>;
export declare function showVerboseMessages(): Promise<void>;
export declare function typeIntoConsole(frontend: puppeteer.Page, message: string): Promise<void>;
export declare function typeIntoConsoleAndWaitForResult(frontend: puppeteer.Page, message: string): Promise<void>;
export declare function unifyLogVM(actualLog: string, expectedLog: string): Promise<string>;
export declare function switchToTopExecutionContext(frontend: puppeteer.Page): Promise<void>;
export declare function navigateToConsoleTab(): Promise<void>;
export declare function waitForConsoleMessageAndClickOnLink(): Promise<void>;
export declare function navigateToIssuesPanelViaInfoBar(): Promise<void>;
export declare function turnOffHistoryAutocomplete(): Promise<void>;
export declare function toggleShowCorsErrors(): Promise<void>;
export declare function waitForIssueButtonLabel(expectedLabel: string): Promise<void>;
export declare function clickOnContextMenu(selectorForNode: string, ctxMenuItemName: string): Promise<void>;
