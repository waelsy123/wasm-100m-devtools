{"version":3,"file":"settings-helpers.js","sourceRoot":"","sources":["../../../../../../test/e2e/helpers/settings-helpers.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAE7B,sDAA2G;AAEpG,MAAM,qBAAqB,GAAG,KAAK,EAAE,UAAkB,EAAE,WAAW,GAAG,KAAK,EAAE,EAAE;IACrF,+BAA+B;IAC/B,MAAM,iBAAiB,GAAG,WAAW,CAAC,CAAC,CAAC,2DAA2D,CAAC,CAAC,CAAC,gCAAgC,CAAC;IACvI,MAAM,aAAa,GAAG,MAAM,IAAA,uBAAW,EAAC,iBAAiB,CAAC,CAAC;IAC3D,MAAM,IAAA,iBAAK,EAAC,aAAa,CAAC,CAAC;IAE3B,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,YAAY,CAAC;IACzE,gCAAgC;IAChC,MAAM,SAAS,GAAG,MAAM,IAAA,uBAAW,EAAC,GAAG,aAAa,mBAAmB,CAAC,CAAC;IACzE,MAAM,SAAS,CAAC,KAAK,EAAE,CAAC;IAExB,8BAA8B;IAC9B,MAAM,QAAQ,GAAG,MAAM,IAAA,uBAAW,EAAC,GAAG,UAAU,mBAAmB,CAAC,CAAC;IACrE,MAAM,IAAA,iBAAK,EAAC,QAAQ,CAAC,CAAC;IAEtB,MAAM,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC;IAEvD,8CAA8C;IAC9C,MAAM,IAAA,uBAAW,EAAC,GAAG,UAAU,IAAI,SAAS,mBAAmB,CAAC,CAAC;AACnE,CAAC,CAAC;AAnBW,QAAA,qBAAqB,yBAmBhC;AAEK,MAAM,eAAe,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;IACxD,MAAM,gBAAgB,GAAG,wCAAwC,CAAC;IAClE,MAAM,oBAAoB,GAAG,uCAAuC,QAAQ,IAAI,CAAC;IACjF,MAAM,aAAa,GAAG,+BAA+B,QAAQ,UAAU,CAAC;IAExE,2CAA2C;IAC3C,MAAM,IAAA,iBAAK,EAAC,gBAAgB,CAAC,CAAC;IAE9B,8DAA8D;IAC9D,MAAM,IAAA,mBAAO,EAAC,oBAAoB,CAAC,CAAC;IACpC,MAAM,IAAA,iBAAK,EAAC,oBAAoB,CAAC,CAAC;IAClC,MAAM,IAAA,mBAAO,EAAC,aAAa,CAAC,CAAC;AAC/B,CAAC,CAAC;AAZW,QAAA,eAAe,mBAY1B;AAEK,MAAM,6BAA6B,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IACnE,MAAM,IAAA,uBAAe,EAAC,aAAa,CAAC,CAAC;IAErC,MAAM,QAAQ,GAAG,gBAAgB,KAAK,GAAG,CAAC;IAC1C,MAAM,IAAA,iCAAqB,EAAC,QAAQ,CAAC,CAAC;IACtC,MAAM,UAAU,GAAG,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC,CAAC;IAE3C,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAE,QAA6B,CAAC,OAAO,CAAC,CAAC;IAE5F,MAAM,IAAA,iBAAK,EAAC,UAAU,CAAC,CAAC;IAExB,MAAM,IAAA,2BAAe,EAAC,KAAK,IAAI,EAAE;QAC/B,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAE,QAA6B,CAAC,OAAO,CAAC,CAAC;QAC/F,OAAO,QAAQ,KAAK,KAAK,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,MAAM,IAAA,iBAAK,EAAC,sBAAsB,CAAC,CAAC;AACtC,CAAC,CAAC;AAjBW,QAAA,6BAA6B,iCAiBxC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {click, scrollElementIntoView, waitFor, waitForAria, waitForFunction} from '../../shared/helper.js';\n\nexport const openPanelViaMoreTools = async (panelTitle: string, isLocalized = false) => {\n  // Head to the triple dot menu.\n  const tripleDotMenuText = isLocalized ? 'Ĉúŝt́ôḿîźê án̂d́ ĉón̂t́r̂ól̂ D́êv́T̂óôĺŝ' : 'Customize and control DevTools';\n  const tripleDotMenu = await waitForAria(tripleDotMenuText);\n  await click(tripleDotMenu);\n\n  const moreToolsText = isLocalized ? 'M̂ór̂é t̂óôĺŝ' : 'More tools';\n  // Open the “More Tools” option.\n  const moreTools = await waitForAria(`${moreToolsText}[role=\"menuitem\"]`);\n  await moreTools.hover();\n\n  // Click the desired menu item\n  const menuItem = await waitForAria(`${panelTitle}[role=\"menuitem\"]`);\n  await click(menuItem);\n\n  const panelText = isLocalized ? 'p̂án̂él̂' : 'panel';\n\n  // Wait for the corresponding panel to appear.\n  await waitForAria(`${panelTitle} ${panelText}[role=\"tabpanel\"]`);\n};\n\nexport const openSettingsTab = async (tabTitle: string) => {\n  const gearIconSelector = '.toolbar-button[aria-label=\"Settings\"]';\n  const settingsMenuSelector = `.tabbed-pane-header-tab[aria-label=\"${tabTitle}\"]`;\n  const panelSelector = `.view-container[aria-label=\"${tabTitle} panel\"]`;\n\n  // Click on the Settings Gear toolbar icon.\n  await click(gearIconSelector);\n\n  // Click on the Settings tab and wait for the panel to appear.\n  await waitFor(settingsMenuSelector);\n  await click(settingsMenuSelector);\n  await waitFor(panelSelector);\n};\n\nexport const togglePreferenceInSettingsTab = async (label: string) => {\n  await openSettingsTab('Preferences');\n\n  const selector = `[aria-label=\"${label}\"`;\n  await scrollElementIntoView(selector);\n  const preference = await waitFor(selector);\n\n  const value = await preference.evaluate(checkbox => (checkbox as HTMLInputElement).checked);\n\n  await click(preference);\n\n  await waitForFunction(async () => {\n    const newValue = await preference.evaluate(checkbox => (checkbox as HTMLInputElement).checked);\n    return newValue !== value;\n  });\n\n  await click('.dialog-close-button');\n};\n"]}