{"version":3,"file":"issue-view-reparent_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/issues/issue-view-reparent_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {$$, assertNotNullOrUndefined, goToResource, waitFor} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {CATEGORY, getGroupByCategoryChecked, ISSUE, navigateToIssuesTab, toggleGroupByCategory} from '../helpers/issues-helpers.js';\n\ndescribe('IssueView', async () => {\n  it('should be parented in issueTree when not groupedByCategory', async () => {\n    await goToResource('elements/element-reveal-inline-issue.html');\n    await navigateToIssuesTab();\n\n    if (await getGroupByCategoryChecked()) {\n      await toggleGroupByCategory();\n    }\n\n    const issue = await waitFor(ISSUE);\n    assertNotNullOrUndefined(issue);\n    const parent = await issue.evaluate(node => node.parentElement?.classList.contains('issue-category-body'));\n    assert.isFalse(parent);\n  });\n\n  it('should be parented in IssueCategoryView when groupedByCategory', async () => {\n    await goToResource('elements/element-reveal-inline-issue.html');\n    await navigateToIssuesTab();\n\n    if (!await getGroupByCategoryChecked()) {\n      await toggleGroupByCategory();\n    }\n\n    const issue = await waitFor(ISSUE);\n    assertNotNullOrUndefined(issue);\n    const parent = await issue.evaluate(node => node.parentElement?.classList.contains('issue-category-body'));\n    assert.isTrue(parent);\n  });\n\n  it('should reparent correctly after parent change', async () => {\n    await goToResource('elements/element-reveal-inline-issue.html');\n    await navigateToIssuesTab();\n\n    if (await getGroupByCategoryChecked()) {\n      await toggleGroupByCategory();\n    }\n    let category = await $$(CATEGORY);\n    assert.isEmpty(category);\n    const issue = await waitFor(ISSUE);\n    assertNotNullOrUndefined(issue);\n    const parent = await issue.evaluate(node => node.parentElement?.classList.contains('issue-category-body'));\n    assert.isFalse(parent);\n    await toggleGroupByCategory();\n    category = await $$(CATEGORY);\n    assert.isNotEmpty(category);\n    const reparentedIssue = await waitFor(ISSUE);\n    assertNotNullOrUndefined(issue);\n    const newParent =\n        await reparentedIssue.evaluate(node => node.parentElement?.classList.contains('issue-category-body'));\n    assert.isTrue(newParent);\n  });\n});\n"]}