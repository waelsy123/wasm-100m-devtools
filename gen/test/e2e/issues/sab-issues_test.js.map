{"version":3,"file":"sab-issues_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/issues/sab-issues_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAAoD;AACpD,0EAA8D;AAC9D,oEAAkM;AAElM,IAAA,8BAAQ,EAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;IACrC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,IAAA,wBAAY,EAAC,8BAA8B,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;QAC/F,MAAM,IAAA,uCAAmB,GAAE,CAAC;QAC5B,MAAM,YAAY,GACd,MAAM,IAAA,oDAAgC,EAAC,sEAAsE,CAAC,CAAC;QACnH,aAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC/B,IAAI,YAAY,EAAE;YAChB,MAAM,OAAO,GAAG,MAAM,IAAA,uCAAmB,EAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YACrE,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YAChE,aAAM,CAAC,WAAW,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;YACzC,MAAM,IAAA,mDAA+B,EAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,iBAAiB,GAAG;gBACxB,CAAC,iBAAiB,EAAE,SAAS,EAAE,QAAQ,CAAC;gBACxC,CAAC,0BAA0B,EAAE,eAAe,EAAE,iBAAiB,CAAC;gBAChE,CAAC,0BAA0B,EAAE,UAAU,EAAE,iBAAiB,CAAC;aAC5D,CAAC;YACF,MAAM,IAAA,2DAAuC,EAAC,OAAO,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;SACnF;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {goToResource} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {ensureResourceSectionIsExpanded, getAndExpandSpecificIssueByTitle, getResourcesElement, navigateToIssuesTab, waitForTableFromResourceSectionContents} from '../helpers/issues-helpers.js';\n\ndescribe('SAB issues test', async () => {\n  beforeEach(async () => {\n    await goToResource('issues/sab-issue.rawresponse');\n  });\n\n  it('should display SharedArrayBuffer violations with the correct affected resources', async () => {\n    await navigateToIssuesTab();\n    const issueElement =\n        await getAndExpandSpecificIssueByTitle('SharedArrayBuffer usage is restricted to cross-origin isolated sites');\n    assert.isNotNull(issueElement);\n    if (issueElement) {\n      const section = await getResourcesElement('violation', issueElement);\n      const text = await section.label.evaluate(el => el.textContent);\n      assert.strictEqual(text, '2 violations');\n      await ensureResourceSectionIsExpanded(section);\n      const expectedTableRows = [\n        ['Source Location', 'Trigger', 'Status'],\n        ['corp-frame.rawresponse:1', 'Instantiation', /warning|blocked/],\n        ['corp-frame.rawresponse:1', 'Transfer', /warning|blocked/],\n      ];\n      await waitForTableFromResourceSectionContents(section.content, expectedTableRows);\n    }\n  });\n});\n"]}