{"version":3,"file":"csp-violations-tab_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/issues/csp-violations-tab_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\nimport type {ElementHandle} from 'puppeteer';\n\nimport {click, enableExperiment, goToResource, matchStringArray, typeText, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {getDataGridRows} from '../helpers/datagrid-helpers.js';\nimport {openPanelViaMoreTools} from '../helpers/settings-helpers.js';\n\nasync function getDataGridText(datagrid: ElementHandle<Element>[][]): Promise<string[][]> {\n  const table: Array<Array<string>> = [];\n  for (const row of datagrid) {\n    const textRow = [];\n    for (const [i, cell] of row.entries()) {\n      let node = cell;\n      // First column is a Linkifier\n      if (i === 0) {\n        const link = await waitFor('devtools-linkifier', cell);\n        const linkText = await waitFor('a.link', link);\n        node = linkText;\n      }\n      const text = await node.evaluate(x => {\n        if (x instanceof HTMLElement) {\n          return x.innerText;\n        }\n        return '';\n      });\n      textRow.push(text);\n    }\n    table.push(textRow);\n  }\n  return table;\n}\n\nasync function waitForDataGridText(selector: string, expectedRows: string[][]) {\n  await waitForFunction(async () => {\n    const cspViolationsPane = await waitFor('.csp-violations-pane');\n    const actualRows = await getDataGridText(await getDataGridRows(expectedRows.length, cspViolationsPane));\n    for (let i = 0; i < actualRows.length; ++i) {\n      const result = matchStringArray(actualRows[i], expectedRows[i]);\n      if (result !== true) {\n        return undefined;\n      }\n    }\n    return true;\n  });\n}\n\ndescribe('CSP Violations Tab', async () => {\n  beforeEach(async () => {\n    await enableExperiment('cspViolationsView');\n    await openPanelViaMoreTools('CSP Violations');\n    await goToResource('network/trusted-type-violations-report-only.rawresponse');\n  });\n\n  it('should display all csp violations', async () => {\n    const cspViolationsPane = await waitFor('.csp-violations-pane');\n    const rows = await getDataGridText(await getDataGridRows(2, cspViolationsPane));\n    const expectedRows = [\n      ['trusted-type-violations-report-only.rawresponse:1', 'trusted-types', 'Policy Violation', 'report-only'],\n      [\n        'trusted-type-violations-report-only.rawresponse:1',\n        'require-trusted-types-for',\n        'Sink Violation',\n        'report-only',\n      ],\n    ];\n    assert.deepEqual(rows, expectedRows);\n  });\n\n  it('should update violations when changing page', async () => {\n    const cspViolationsPane = await waitFor('.csp-violations-pane');\n    const rows = await getDataGridText(await getDataGridRows(2, cspViolationsPane));\n    const expectedRows = [\n      ['trusted-type-violations-report-only.rawresponse:1', 'trusted-types', 'Policy Violation', 'report-only'],\n      [\n        'trusted-type-violations-report-only.rawresponse:1',\n        'require-trusted-types-for',\n        'Sink Violation',\n        'report-only',\n      ],\n    ];\n    assert.deepEqual(rows, expectedRows);\n\n    await goToResource('network/trusted-type-violations-enforced.rawresponse');\n    const expectedRows2 = [\n      ['trusted-type-violations-enforced.rawresponse:1', 'trusted-types', 'Policy Violation', 'blocked'],\n    ];\n    await waitForDataGridText('.csp-violations-pane', expectedRows2);\n  });\n\n  it('should not display sink violations', async () => {\n    await click('[aria-label=\"Categories\"]');\n    await click('[aria-label=\"Trusted Type Sink, checked\"]');\n\n    const cspViolationsPane = await waitFor('.csp-violations-pane');\n    const rows = await getDataGridText(await getDataGridRows(1, cspViolationsPane));\n    const expectedRows = [\n      ['trusted-type-violations-report-only.rawresponse:1', 'trusted-types', 'Policy Violation', 'report-only'],\n    ];\n\n    assert.deepEqual(rows, expectedRows);\n  });\n\n  it('should not display matching violations', async () => {\n    await click('.toolbar-input-prompt');\n    await typeText('Sink');\n    const cspViolationsPane = await waitFor('.csp-violations-pane');\n    const rows = await getDataGridText(await getDataGridRows(1, cspViolationsPane));\n    const expectedRows = [\n      [\n        'trusted-type-violations-report-only.rawresponse:1',\n        'require-trusted-types-for',\n        'Sink Violation',\n        'report-only',\n      ],\n    ];\n    assert.deepEqual(rows, expectedRows);\n  });\n});\n"]}