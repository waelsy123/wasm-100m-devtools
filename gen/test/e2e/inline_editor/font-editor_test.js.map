{"version":3,"file":"font-editor_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/inline_editor/font-editor_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {enableExperiment, getBrowserAndPages, goToResource, waitFor} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {clickNthChildOfSelectedElementNode, getElementStyleFontEditorButton, getFontEditorButtons, getHiddenFontEditorButtons, waitForContentOfSelectedElementsNode, waitForCSSPropertyValue} from '../helpers/elements-helpers.js';\n\nasync function goToTestPageAndSelectTestElement(path: string = 'inline_editor/fontEditor.html') {\n  await goToResource(path);\n  await waitForContentOfSelectedElementsNode('<body>\\u200B');\n  await clickNthChildOfSelectedElementNode(1);\n}\n\nasync function openFontEditorForInlineStyle() {\n  const fontEditorButton = await getElementStyleFontEditorButton();\n  if (!fontEditorButton) {\n    throw new Error('Missing font editor button in the element style section');\n  }\n  await fontEditorButton.click();\n  await waitFor('.font-selector-section');\n}\n\ndescribe('The font editor', async function() {\n  beforeEach(async function() {\n    await enableExperiment('fontEditor');\n    await goToTestPageAndSelectTestElement();\n    await waitForCSSPropertyValue('#inspected', 'color', 'red');\n  });\n\n  it('icon is displayed for sections containing font properties', async () => {\n    const fontEditorButtons = await getFontEditorButtons();\n    const hiddenFontEditorButtons = await getHiddenFontEditorButtons();\n    assert.deepEqual(fontEditorButtons.length, 5);\n    assert.deepEqual(hiddenFontEditorButtons.length, 2);\n  });\n\n  it('opens when button is clicked', async () => {\n    await openFontEditorForInlineStyle();\n  });\n\n  it('is properly applying font family changes to the style section', async () => {\n    const {frontend} = getBrowserAndPages();\n    await openFontEditorForInlineStyle();\n    const fontFamilySelector = await waitFor('[aria-label=\"Font Family\"]');\n    await fontFamilySelector.focus();\n    await frontend.keyboard.press('a');\n    await waitForCSSPropertyValue('element.style', 'font-family', 'Arial');\n  });\n\n  it('is properly applying slider input changes to the style section', async () => {\n    const {frontend} = getBrowserAndPages();\n    await openFontEditorForInlineStyle();\n    const fontSizeSliderInput = await waitFor('[aria-label=\"font-size Slider Input\"]');\n    await fontSizeSliderInput.focus();\n    await frontend.keyboard.press('ArrowRight');\n    await waitForCSSPropertyValue('element.style', 'font-size', '11px');\n  });\n\n  it('is properly applying text input changes to the style section', async () => {\n    const {frontend} = getBrowserAndPages();\n    await openFontEditorForInlineStyle();\n    const fontSizeTextInput = await waitFor('[aria-label=\"font-size Text Input\"]');\n    await fontSizeTextInput.focus();\n    await frontend.keyboard.press('ArrowUp');\n    await waitForCSSPropertyValue('element.style', 'font-size', '11px');\n  });\n\n  it('is properly applying selector key values to the style section', async () => {\n    const {frontend} = getBrowserAndPages();\n    await openFontEditorForInlineStyle();\n    const fontWeightSelectorInput = await waitFor('[aria-label=\"font-weight Key Value Selector\"]');\n    await fontWeightSelectorInput.focus();\n    await frontend.keyboard.press('i');\n    await waitForCSSPropertyValue('element.style', 'font-weight', 'inherit');\n  });\n\n  it('is properly converting units and applying changes to the styles section', async () => {\n    const {frontend} = getBrowserAndPages();\n    await openFontEditorForInlineStyle();\n    const fontSizeUnitInput = await waitFor('[aria-label=\"font-size Unit Input\"]');\n    await fontSizeUnitInput.focus();\n    await frontend.keyboard.press('e');\n    await waitForCSSPropertyValue('element.style', 'font-size', '0.6em');\n  });\n\n  it('computed font list is being generated correctly', async () => {\n    await openFontEditorForInlineStyle();\n    await waitFor('[value=\"testFont\"]');\n  });\n});\n"]}