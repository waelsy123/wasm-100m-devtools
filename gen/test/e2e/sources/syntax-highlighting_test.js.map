{"version":3,"file":"syntax-highlighting_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/sources/syntax-highlighting_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {$$, step, waitFor} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {openSourceCodeEditorForFile} from '../helpers/sources-helpers.js';\n\ndescribe('Sources Tab', async function() {\n  it('is highlighting the syntax correctly', async () => {\n    const componentsFormats = new Set();\n\n    await step('navigate to a page and open the Sources tab', async () => {\n      await openSourceCodeEditorForFile('syntax-highlighting.wasm', 'wasm/syntax-highlighting.html');\n      // Wait for at least 1 keyword to show up, at which we know the highlighting has been applied.\n      await waitFor('.token-keyword');\n    });\n\n    await step('check that variables have the correct class and has a different format', async () => {\n      const expectedVariables = ['$add', '$p0', '$p1', '$p0', '$p1'];\n\n      const variableNames = await Promise.all((await $$('.token-variable')).map(elements => {\n        return elements.evaluate(el => (el as HTMLElement).innerText);\n      }));\n      const variableColors = await Promise.all((await $$('.token-variable')).map(elements => {\n        return elements.evaluate(el => getComputedStyle(el).color);\n      }));\n      variableColors.forEach(element => {\n        componentsFormats.add(element);\n      });\n\n      assert.deepEqual(variableNames, expectedVariables, 'highlighed variables are incorrect');\n      assert.strictEqual(componentsFormats.size, 1, 'variables did not yield exactly one format');\n    });\n\n    await step('check that keywords have the correct class and has a different format', async () => {\n      const expectedKeywords =\n          ['module', 'func', 'export', 'param', 'param', 'result', 'local.get', 'local.get', 'i32.add'];\n\n      const keywordNames = await Promise.all((await $$('.token-keyword')).map(elements => {\n        return elements.evaluate(el => (el as HTMLElement).innerText);\n      }));\n      const keywordColors = await Promise.all((await $$('.token-keyword')).map(elements => {\n        return elements.evaluate(el => getComputedStyle(el).color);\n      }));\n      keywordColors.forEach(element => {\n        componentsFormats.add(element);\n      });\n\n      assert.deepEqual(keywordNames, expectedKeywords, 'highlighed keywords are incorrect');\n      assert.strictEqual(\n          componentsFormats.size, 2, 'variables and keywords did not yield exactly two different formats');\n    });\n\n    await step('check that comments have the correct class and has a different format', async () => {\n      const expectedComments = ['(;0;)', '(;0;)', '(;1;)'];\n\n      const commentNames = await Promise.all((await $$('.token-comment')).map(elements => {\n        return elements.evaluate(el => (el as HTMLElement).innerText);\n      }));\n      const commentColors = await Promise.all((await $$('.token-comment')).map(elements => {\n        return elements.evaluate(el => getComputedStyle(el).color);\n      }));\n      commentColors.forEach(element => {\n        componentsFormats.add(element);\n      });\n\n      assert.deepEqual(commentNames, expectedComments, 'highlighed comments are incorrect');\n      assert.strictEqual(\n          componentsFormats.size, 3, 'variables, keywords and comments did not yield exactly three different formats');\n    });\n\n    await step('check that strings have the correct class and has a different format', async () => {\n      const expectedStrings = ['\\\"add\\\"'];\n\n      const stringNames = await Promise.all((await $$('.token-string')).map(elements => {\n        return elements.evaluate(el => (el as HTMLElement).innerText);\n      }));\n      const stringColors = await Promise.all((await $$('.token-string')).map(elements => {\n        return elements.evaluate(el => getComputedStyle(el).color);\n      }));\n      stringColors.forEach(element => {\n        componentsFormats.add(element);\n      });\n\n      assert.deepEqual(stringNames, expectedStrings, 'highlighed strings are incorrect');\n      assert.strictEqual(\n          componentsFormats.size, 4,\n          'variables, keywords, comments and strings did not yield exactly four different formats');\n    });\n  });\n});\n"]}