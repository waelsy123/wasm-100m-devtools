{"version":3,"file":"can-show-wasm-scopes_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/sources/can-show-wasm-scopes_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {click, getBrowserAndPages, step, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {addBreakpointForLine, getScopeNames, getValuesForScope, openSourceCodeEditorForFile, PAUSE_INDICATOR_SELECTOR, reloadPageAndWaitForSourceFile, RESUME_BUTTON} from '../helpers/sources-helpers.js';\n\ndescribe('Source Tab', async () => {\n  it('shows and updates the module, local, and stack scope while pausing', async () => {\n    const {frontend, target} = getBrowserAndPages();\n    const breakpointLine = '0x05f';\n    const fileName = 'scopes.wasm';\n    let moduleScopeValues: string[];\n    let localScopeValues: string[];\n\n    await step('navigate to a page and open the Sources tab', async () => {\n      await openSourceCodeEditorForFile('scopes.wasm', 'wasm/scopes.html');\n    });\n\n    await step(`add a breakpoint to line No.${breakpointLine}`, async () => {\n      await addBreakpointForLine(frontend, breakpointLine);\n    });\n\n    await step('reload the page', async () => {\n      await reloadPageAndWaitForSourceFile(frontend, target, fileName);\n    });\n\n    await step('check that the module, local, and stack scope appear', async () => {\n      const scopeNames = await waitForFunction(async () => {\n        const names = await getScopeNames();\n        return names.length === 3 ? names : undefined;\n      });\n      assert.deepEqual(scopeNames, ['Expression', 'Local', 'Module']);\n    });\n\n    await step('expand the module scope', async () => {\n      await click('[aria-label=\"Module\"]');\n    });\n\n    await step('check that the stack scope content is as expected', async () => {\n      const stackScopeValues = await getValuesForScope('Expression', 0, 0);\n      assert.deepEqual(stackScopeValues, [\n        'stack: Stack\\xA0{}',\n      ]);\n    });\n\n    await step('check that the local scope content is as expected', async () => {\n      localScopeValues = await getValuesForScope('Local', 0, 4);\n      assert.deepEqual(localScopeValues, [\n        '$f32_var: f32 {value: 5.5}',\n        '$f64_var: f64 {value: 2.23e-11}',\n        '$i32: i32 {value: 42}',\n        '$i64_var: i64 {value: 9221120237041090n}',\n      ]);\n    });\n\n    await step('check that the module scope content is as expected', async () => {\n      moduleScopeValues = await getValuesForScope('Module', 0, 4);\n      // Remove occurrences of arrays.\n      const formattedValues = moduleScopeValues.map((line: string) => {\n        return line.replace(/\\[[^\\]]*\\]/, '').trim();\n      });\n      assert.deepEqual(formattedValues, [\n        'functions: Functions\\xA0{$foo: ƒ}',\n        'globals: Globals\\xA0{$imports.global: i32}',\n        'instance: Instance\\xA0{exports: {…}}',\n        'memories: Memories',\n        '$memory0: Memory(1)',\n        'module: Module\\xA0{}',\n      ]);\n    });\n\n    await step('step one time', async () => {\n      await frontend.keyboard.press('F9');\n      await waitFor(PAUSE_INDICATOR_SELECTOR);\n    });\n\n    await step('check that the module scope content is as before', async () => {\n      const currentModuleScopeValues = await getValuesForScope('Module', 0, moduleScopeValues.length);\n      assert.deepEqual(currentModuleScopeValues, moduleScopeValues);\n    });\n\n    await step('check that the local scope content is as before', async () => {\n      const updatedLocalScopeValues = await getValuesForScope('Local', 0, localScopeValues.length);\n      assert.deepEqual(updatedLocalScopeValues, localScopeValues);\n    });\n\n    await step('check that the stack scope content is updated to reflect the change', async () => {\n      const stackScopeValues = await getValuesForScope('Expression', 0, 1);\n      assert.deepEqual(stackScopeValues, [\n        'stack: Stack\\xA0{0: i32}',\n      ]);\n    });\n\n    await step('resume execution', async () => {\n      await click(RESUME_BUTTON);\n    });\n  });\n});\n"]}