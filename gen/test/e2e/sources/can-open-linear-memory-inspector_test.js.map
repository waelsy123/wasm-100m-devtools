{"version":3,"file":"can-open-linear-memory-inspector_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/sources/can-open-linear-memory-inspector_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {$, $$, click, getBrowserAndPages, goToResource, step, waitFor} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {checkIfTabExistsInDrawer, DRAWER_PANEL_SELECTOR} from '../helpers/cross-tool-helper.js';\nimport {addBreakpointForLine, inspectMemory, openSourceCodeEditorForFile, PAUSE_BUTTON, reloadPageAndWaitForSourceFile, RESUME_BUTTON} from '../helpers/sources-helpers.js';\n\nconst LINEAR_MEMORY_INSPECTOR_TAB_SELECTOR = '#tab-linear-memory-inspector';\nconst LINEAR_MEMORY_INSPECTOR_TABBED_PANE_SELECTOR = DRAWER_PANEL_SELECTOR + ' .tabbed-pane';\nconst LINEAR_MEMORY_INSPECTOR_TABBED_PANE_TAB_SELECTOR = '.tabbed-pane-header-tab';\nconst LINEAR_MEMORY_INSPECTOR_TAB_TITLE_SELECTOR = '.tabbed-pane-header-tab-title';\n\ndescribe('Scope View', async () => {\n  it('opens linear memory inspector', async () => {\n    const {frontend, target} = getBrowserAndPages();\n    const breakpointLine = '0x039';\n    const fileName = 'memory.wasm';\n\n    await step('navigate to a page and open the Sources tab', async () => {\n      await openSourceCodeEditorForFile('memory.wasm', 'wasm/memory.html');\n    });\n\n    await step(`add a breakpoint to line No.${breakpointLine}`, async () => {\n      await addBreakpointForLine(frontend, breakpointLine);\n    });\n\n    await step('reload the page', async () => {\n      await reloadPageAndWaitForSourceFile(frontend, target, fileName);\n    });\n\n    await step('expand the module scope', async () => {\n      await click('[aria-label=\"Module\"]');\n      await waitFor('[aria-label=\"Module\"][aria-expanded=\"true\"]');\n    });\n\n    await step('open linear memory inspector from context menu', async () => {\n      await waitFor('[data-object-property-name-for-test=\"memories\"][aria-expanded=\"true\"]');\n      await inspectMemory('$imports.memory');\n    });\n\n    await step('check that linear memory inspector drawer is open', async () => {\n      const drawerIsOpen = await checkIfTabExistsInDrawer(LINEAR_MEMORY_INSPECTOR_TAB_SELECTOR);\n      assert.isTrue(drawerIsOpen);\n    });\n\n    await step('check that opened linear memory inspector has correct title', async () => {\n      const lmiTabbedPane = await waitFor(LINEAR_MEMORY_INSPECTOR_TABBED_PANE_SELECTOR);\n      const titleElement = await waitFor(LINEAR_MEMORY_INSPECTOR_TAB_TITLE_SELECTOR, lmiTabbedPane);\n      assert.isNotNull(titleElement);\n      const title = await frontend.evaluate(x => x.innerText, titleElement);\n\n      assert.strictEqual(title, 'Memory(100)');\n    });\n  });\n\n  // Times out on Windows\n  it.skip('[crbug.com/1169143] opens one linear memory inspector per ArrayBuffer', async () => {\n    const {frontend} = getBrowserAndPages();\n\n    await step('navigate to a page', async () => {\n      await goToResource('sources/memory-workers.html');\n    });\n\n    await step('wait for debugging to start', async () => {\n      await waitFor(RESUME_BUTTON);\n    });\n\n    await step('open linear memory inspector from context menu', async () => {\n      await inspectMemory('sharedMem');\n    });\n\n    await step('check that linear memory inspector drawer is open', async () => {\n      const drawerIsOpen = await checkIfTabExistsInDrawer(LINEAR_MEMORY_INSPECTOR_TAB_SELECTOR);\n      assert.isTrue(drawerIsOpen);\n    });\n\n    const lmiTabbedPane = await waitFor(LINEAR_MEMORY_INSPECTOR_TABBED_PANE_SELECTOR);\n    await step('check that opened linear memory inspector has correct title', async () => {\n      const titleElement = await waitFor(LINEAR_MEMORY_INSPECTOR_TAB_TITLE_SELECTOR, lmiTabbedPane);\n      assert.isNotNull(titleElement);\n      const title = await frontend.evaluate(x => x.innerText, titleElement);\n\n      assert.strictEqual(title, 'memory-worker2.js');\n    });\n\n    // Save this as we will select it multiple times\n    const sharedBufferTab = await $(LINEAR_MEMORY_INSPECTOR_TABBED_PANE_TAB_SELECTOR, lmiTabbedPane);\n    if (!sharedBufferTab) {\n      // Throw here to satisfy TypeScript\n      throw new Error('Failed to get tab');\n    }\n\n    await step('open other buffer', async () => {\n      await inspectMemory('memory2');\n      // Wait until two tabs are open\n      await waitFor(\n          LINEAR_MEMORY_INSPECTOR_TABBED_PANE_TAB_SELECTOR + ' + ' + LINEAR_MEMORY_INSPECTOR_TABBED_PANE_TAB_SELECTOR,\n          lmiTabbedPane);\n      // Shared buffer tab no longer active\n      await waitFor('[aria-selected=\"false\"]', sharedBufferTab);\n    });\n\n    await step('open first buffer again by way of its typed array', async () => {\n      await inspectMemory('sharedArray');\n      // Shared buffer should be selected again\n      await waitFor('[aria-selected=\"true\"]', sharedBufferTab);\n      // There should only be two tabs\n      const tabs = await $$(LINEAR_MEMORY_INSPECTOR_TABBED_PANE_TAB_SELECTOR, lmiTabbedPane);\n      assert.strictEqual(tabs.length, 2);\n    });\n\n    await step('switch to other worker', async () => {\n      const elements = await $$('.thread-item-title');\n      const workerNames = await Promise.all(elements.map(x => x.evaluate(y => y.textContent)));\n      const workerIndex = 1 + workerNames.indexOf('memory-worker1.js');\n      // Click on worker\n      await click(`.thread-item[aria-posinset=\"${workerIndex}\"]`);\n      // Pause the worker\n      await click(PAUSE_BUTTON);\n      // Wait for it to be paused\n      await waitFor(RESUME_BUTTON);\n    });\n\n    await step('open other buffer in other worker', async () => {\n      await inspectMemory('memory1');\n      // Shared buffer tab no longer active\n      await waitFor('[aria-selected=\"false\"]', sharedBufferTab);\n      // Now there are three tabs\n      const tabs = await $$(LINEAR_MEMORY_INSPECTOR_TABBED_PANE_TAB_SELECTOR, lmiTabbedPane);\n      assert.strictEqual(tabs.length, 3);\n    });\n\n    await step('open shared buffer in other worker', async () => {\n      await inspectMemory('sharedArr');\n      // Shared buffer tab active again\n      await waitFor('[aria-selected=\"true\"]', sharedBufferTab);\n      // Still three tabs\n      const tabs = await $$(LINEAR_MEMORY_INSPECTOR_TABBED_PANE_TAB_SELECTOR, lmiTabbedPane);\n      assert.strictEqual(tabs.length, 3);\n    });\n  });\n});\n"]}