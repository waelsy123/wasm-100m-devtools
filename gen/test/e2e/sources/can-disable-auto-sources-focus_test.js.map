{"version":3,"file":"can-disable-auto-sources-focus_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/sources/can-disable-auto-sources-focus_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,sDAAkI;AAClI,wEAAqE;AACrE,wEAA6E;AAC7E,sEAAuH;AAEvH,KAAK,UAAU,yBAAyB,CAAC,aAAqB;IAC5D,MAAM,EAAC,QAAQ,EAAE,MAAM,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;IAEhD,MAAM,IAAA,gBAAI,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,IAAA,gDAA2B,EAAC,qBAAqB,EAAE,uBAAuB,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;IAEH,MAAM,IAAA,gBAAI,EAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,IAAA,yCAAoB,EAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,MAAM,IAAA,gBAAI,EAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAA,2CAAqB,GAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,MAAM,IAAA,gBAAI,EAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,MAAM,IAAA,gBAAI,EAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,IAAA,2BAAe,EAAC,GAAG,EAAE,CAAC,IAAA,4BAAgB,EAAC,QAAQ,EAAE,0CAAqB,CAAC,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,MAAM,IAAA,gBAAI,EAAC,4BAA4B,aAAa,MAAM,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,IAAA,mBAAO,EAAC,sBAAsB,aAAa,IAAI,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,QAAQ,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;IACnC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,IAAA,gCAAoB,EAAC,QAAQ,EAAE,0CAAqB,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,KAAK,IAAI,EAAE;QAC7F,MAAM,IAAA,gBAAI,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,IAAA,mDAA6B,EAAC,kDAAkD,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,sEAAsE;QACtE,4EAA4E;QAC5E,yFAAyF;QACzF,mDAAmD;QACnD,MAAM,yBAAyB,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mFAAmF,EAAE,KAAK,IAAI,EAAE;QACjG,MAAM,yBAAyB,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {getBrowserAndPages, getPendingEvents, installEventListener, step, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {navigateToElementsTab} from '../helpers/elements-helpers.js';\nimport {togglePreferenceInSettingsTab} from '../helpers/settings-helpers.js';\nimport {addBreakpointForLine, DEBUGGER_PAUSED_EVENT, openSourceCodeEditorForFile} from '../helpers/sources-helpers.js';\n\nasync function breakAndCheckFocusedPanel(expectedPanel: string) {\n  const {frontend, target} = getBrowserAndPages();\n\n  await step('navigate to a page and open the Sources tab', async () => {\n    await openSourceCodeEditorForFile('click-breakpoint.js', 'click-breakpoint.html');\n  });\n\n  await step('add a breakpoint to line No.4', async () => {\n    await addBreakpointForLine(frontend, 4);\n  });\n\n  await step('navigate to the elements tab', async () => {\n    await navigateToElementsTab();\n  });\n\n  await step('trigger a Debugger.paused event', async () => {\n    target.evaluate('f2();');\n  });\n\n  await step('wait for Debugger.paused event', async () => {\n    await waitForFunction(() => getPendingEvents(frontend, DEBUGGER_PAUSED_EVENT));\n  });\n\n  await step(`check that we are in the ${expectedPanel} tab`, async () => {\n    await waitFor(`.panel[aria-label=\"${expectedPanel}\"]`);\n  });\n}\n\ndescribe('Sources Panel', async () => {\n  beforeEach(async () => {\n    const {frontend} = getBrowserAndPages();\n    installEventListener(frontend, DEBUGGER_PAUSED_EVENT);\n  });\n\n  it('is not opened on Debugger.paused if autoFocusOnDebuggerPausedEnabled is false', async () => {\n    await step('toggle preference in settings tab', async () => {\n      await togglePreferenceInSettingsTab('Focus Sources panel when triggering a breakpoint');\n    });\n\n    // Note: This test checks if we *do not* switch panels after receiving\n    // a Debugger.paused event. If this functionality that we are testing is not\n    // working anymore, then this test may become flaky (sometimes we check before switching,\n    // sometimes after switching to the sources panel).\n    await breakAndCheckFocusedPanel('elements');\n  });\n\n  it('is opened on Debugger.pause if autoFocusOnDebuggerPausedEnabled is true (default)', async () => {\n    await breakAndCheckFocusedPanel('sources');\n  });\n});\n"]}