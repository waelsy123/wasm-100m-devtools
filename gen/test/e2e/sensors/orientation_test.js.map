{"version":3,"file":"orientation_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/sensors/orientation_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAA+D;AAC/D,0EAA8D;AAC9D,sEAA+G;AAC/G,wEAAqE;AAErE,IAAA,8BAAQ,EAAC,wCAAwC,EAAE,GAAG,EAAE;IACtD,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,IAAA,2CAAqB,EAAC,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;QAC7E,MAAM,IAAA,yCAAoB,GAAE,CAAC;QAE7B,MAAM,kBAAkB,GAAG,MAAM,IAAA,yCAAoB,GAAE,CAAC;QAExD,MAAM,oBAAoB,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAExC,aAAM,CAAC,SAAS,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,IAAA,yCAAoB,GAAE,CAAC;QAE7B,MAAM,KAAK,GAAG,CAAC,MAAM,IAAA,yCAAoB,GAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvB,MAAM,WAAW,GAAG,CAAC,MAAM,IAAA,yCAAoB,GAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC;QACzB,aAAM,CAAC,SAAS,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAE7C,MAAM,IAAA,sBAAU,GAAE,CAAC;QACnB,MAAM,IAAA,uBAAW,EAAC,cAAc,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {tabForward, waitForNone} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {getOrientationInputs, getOrientationValues, setCustomOrientation} from '../helpers/sensors-helpers.js';\nimport {openPanelViaMoreTools} from '../helpers/settings-helpers.js';\n\ndescribe('Orientation emulation on Sensors panel', () => {\n  beforeEach(async () => {\n    await openPanelViaMoreTools('Sensors');\n  });\n\n  it('presets correct default values on Custom orientation selected', async () => {\n    await setCustomOrientation();\n\n    const actualOrientations = await getOrientationValues();\n\n    const expectedOrientations = [0, 90, 0];\n\n    assert.deepEqual(actualOrientations, expectedOrientations);\n  });\n\n  it('allows negative alpha values', async () => {\n    await setCustomOrientation();\n\n    const alpha = (await getOrientationInputs())[0];\n    await alpha.type('-1');\n\n    const actualValue = (await getOrientationValues())[0];\n    const expectedValue = -1;\n    assert.deepEqual(actualValue, expectedValue);\n\n    await tabForward();\n    await waitForNone('.error-input');\n  });\n});\n"]}