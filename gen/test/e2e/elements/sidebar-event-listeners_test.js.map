{"version":3,"file":"sidebar-event-listeners_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/elements/sidebar-event-listeners_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAAmD;AACnD,0EAA8D;AAC9D,sFAAiO;AAEjO,IAAA,8BAAQ,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;IAC7D,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,IAAA,kEAAqC,GAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,IAAA,sEAAyC,GAAE,CAAC;QAElD,MAAM,kBAAkB,GAAG,MAAM,IAAA,2DAA8B,GAAE,CAAC;QAClE,aAAM,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,IAAA,sEAAyC,GAAE,CAAC;QAClD,MAAM,EACJ,iBAAiB,EACjB,gBAAgB,GACjB,GAAG,MAAM,IAAA,yDAA4B,EAAC,sCAAsC,CAAC,CAAC;QAE/E,2DAA2D;QAC3D,kFAAkF;QAClF,aAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;QAExD,oDAAoD;QACpD,kDAAkD;QAClD,MAAM,IAAA,uBAAW,EAAC,gBAAgB,CAAC,CAAC;QAEpC,MAAM,4BAA4B,GAAG,GAAG,gBAAgB,uBAAuB,CAAC;QAChF,MAAM,gBAAgB,GAAG,MAAM,IAAA,uDAA0B,EAAC,4BAA4B,CAAC,CAAC;QAExF,aAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACjC,CAAC,YAAY,EAAE,OAAO,CAAC;YACvB,CAAC,SAAS,EAAE,OAAO,CAAC;YACpB,CAAC,MAAM,EAAE,OAAO,CAAC;YACjB,CAAC,SAAS,EAAE,UAAU,CAAC;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,MAAM,IAAA,sEAAyC,GAAE,CAAC;QAClD,MAAM,EACJ,iBAAiB,EACjB,gBAAgB,GACjB,GAAG,MAAM,IAAA,yDAA4B,EAAC,6CAA6C,CAAC,CAAC;QAEtF,2DAA2D;QAC3D,kFAAkF;QAClF,aAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;QAE1C,oDAAoD;QACpD,kDAAkD;QAClD,MAAM,IAAA,uBAAW,EAAC,gBAAgB,CAAC,CAAC;QAEpC,MAAM,qBAAqB,GAAG,GAAG,gBAAgB,uBAAuB,CAAC;QACzE,MAAM,gBAAgB,GAAG,MAAM,IAAA,uDAA0B,EAAC,qBAAqB,CAAC,CAAC;QAEjF,aAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACjC,CAAC,YAAY,EAAE,MAAM,CAAC;YACtB,CAAC,SAAS,EAAE,OAAO,CAAC;YACpB,CAAC,MAAM,EAAE,MAAM,CAAC;YAChB,CAAC,SAAS,EAAE,6BAA6B,CAAC;SAC3C,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {doubleClick} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {getDisplayedEventListenerNames, getEventListenerProperties, getFirstNodeForEventListener, loadEventListenersAndSelectButtonNode, openEventListenersPaneAndWaitForListeners} from '../helpers/event-listeners-helpers.js';\n\ndescribe('Event listeners in the elements sidebar', async () => {\n  beforeEach(async () => {\n    await loadEventListenersAndSelectButtonNode();\n  });\n\n  it('lists the active event listeners on the page', async () => {\n    await openEventListenersPaneAndWaitForListeners();\n\n    const eventListenerNames = await getDisplayedEventListenerNames();\n    assert.deepEqual(eventListenerNames, ['click', 'custom event', 'hover']);\n  });\n\n  it('shows the event listener properties when expanding it', async () => {\n    await openEventListenersPaneAndWaitForListeners();\n    const {\n      firstListenerText,\n      listenerSelector,\n    } = await getFirstNodeForEventListener('[aria-label=\"click, event listener\"]');\n\n    // check that we have the right event for the right element\n    // we can't use assert.strictEqual() as the text also includes the \"Remove\" button\n    assert.include(firstListenerText, 'button#test-button');\n\n    // we have to double click on the event to expand it\n    // as single click reveals it in the elements tree\n    await doubleClick(listenerSelector);\n\n    const clickEventPropertiesSelector = `${listenerSelector} + ol .name-and-value`;\n    const propertiesOutput = await getEventListenerProperties(clickEventPropertiesSelector);\n\n    assert.deepEqual(propertiesOutput, [\n      ['useCapture', 'false'],\n      ['passive', 'false'],\n      ['once', 'false'],\n      ['handler', '() => {}'],\n    ]);\n  });\n\n  it('shows custom event listeners and their properties correctly', async () => {\n    await openEventListenersPaneAndWaitForListeners();\n    const {\n      firstListenerText,\n      listenerSelector,\n    } = await getFirstNodeForEventListener('[aria-label=\"custom event, event listener\"]');\n\n    // check that we have the right event for the right element\n    // we can't use assert.strictEqual() as the text also includes the \"Remove\" button\n    assert.include(firstListenerText, 'body');\n\n    // we have to double click on the event to expand it\n    // as single click reveals it in the elements tree\n    await doubleClick(listenerSelector);\n\n    const customEventProperties = `${listenerSelector} + ol .name-and-value`;\n    const propertiesOutput = await getEventListenerProperties(customEventProperties);\n\n    assert.deepEqual(propertiesOutput, [\n      ['useCapture', 'true'],\n      ['passive', 'false'],\n      ['once', 'true'],\n      ['handler', '() => console.log(\\'test\\')'],\n    ]);\n  });\n});\n"]}