{"version":3,"file":"element-breadcrumbs_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/elements/element-breadcrumbs_test.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,+BAA4B;AAE5B,sDAA0F;AAC1F,0EAA8D;AAC9D,wEAAwS;AAExS,MAAM,qBAAqB,GAAG,8DAA8D,CAAC;AAE7F,IAAA,8BAAQ,EAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;IACzC,UAAU,CAAC,KAAK;QACd,MAAM,IAAA,wBAAY,EAAC,mCAAmC,CAAC,CAAC;QACxD,MAAM,IAAA,iDAA2B,GAAE,CAAC;QAEpC,4EAA4E;QAC5E,MAAM,IAAA,0DAAoC,EAAC,cAAc,CAAC,CAAC;QAE3D,4DAA4D;QAC5D,MAAM,IAAA,mDAA6B,GAAE,CAAC;QACtC,MAAM,eAAe,GAAG,MAAM,IAAA,yCAA6B,EAAC,qBAAqB,CAAC,CAAC;QACnF,MAAM,IAAA,iBAAK,EAAC,eAAe,CAAC,CAAC;QAE7B,4CAA4C;QAC5C,MAAM,IAAA,uEAAiD,EAAC,qBAAqB,CAAC,CAAC;QAC/E,MAAM,IAAA,4DAAsC,EAAC,YAAY,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,kBAAkB,GAAG;YACzB,MAAM;YACN,MAAM;YACN,UAAU;YACV,YAAY;YACZ,UAAU;SACX,CAAC;QACF,MAAM,gBAAgB,GAAG,MAAM,IAAA,+CAAyB,EAAC,EAAC,iBAAiB,EAAE,kBAAkB,CAAC,MAAM,EAAC,CAAC,CAAC;QACzG,aAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,IAAA,wBAAE,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,iEAAiE;QACjE,MAAM,IAAA,+CAAyB,EAAC,EAAC,iBAAiB,EAAE,CAAC,EAAC,CAAC,CAAC;QACxD,MAAM,iBAAiB,GAAG,MAAM,IAAA,sDAAgC,GAAE,CAAC;QACnE,aAAM,CAAC,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {click, goToResource, waitForElementWithTextContent} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {assertSelectedElementsNodeTextIncludes, expandSelectedNodeRecursively, getBreadcrumbsTextContent, getSelectedBreadcrumbTextContent, waitForContentOfSelectedElementsNode, waitForElementsStyleSection, waitForSelectedTreeElementSelectorWithTextcontent} from '../helpers/elements-helpers.js';\n\nconst EXPECTED_TEXT_CONTENT = '<div class=\\u200B\"div2\">\\u200B last child \\u200B</div>\\u200B';\n\ndescribe('Element breadcrumbs', async () => {\n  beforeEach(async function() {\n    await goToResource('elements/element-breadcrumbs.html');\n    await waitForElementsStyleSection();\n\n    // Check to make sure we have the correct node selected after opening a file\n    await waitForContentOfSelectedElementsNode('<body>\\u200B');\n\n    // expand the tree and then navigate down to the target node\n    await expandSelectedNodeRecursively();\n    const targetChildNode = await waitForElementWithTextContent(EXPECTED_TEXT_CONTENT);\n    await click(targetChildNode);\n\n    // double check we got to the node we expect\n    await waitForSelectedTreeElementSelectorWithTextcontent(EXPECTED_TEXT_CONTENT);\n    await assertSelectedElementsNodeTextIncludes('last child');\n  });\n\n  it('lists all the elements in the tree', async () => {\n    const expectedCrumbsText = [\n      'html',\n      'body',\n      'div#div1',\n      'span#span1',\n      'div.div2',\n    ];\n    const actualCrumbsText = await getBreadcrumbsTextContent({expectedNodeCount: expectedCrumbsText.length});\n    assert.deepEqual(actualCrumbsText, expectedCrumbsText);\n  });\n\n  it('correctly highlights the active node', async () => {\n    // Wait for the crumbs to render with all the elements we expect.\n    await getBreadcrumbsTextContent({expectedNodeCount: 5});\n    const selectedCrumbText = await getSelectedBreadcrumbTextContent();\n    assert.strictEqual(selectedCrumbText, 'div.div2');\n  });\n});\n"]}