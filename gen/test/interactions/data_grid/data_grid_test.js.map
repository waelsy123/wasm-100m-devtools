{"version":3,"file":"data_grid_test.js","sourceRoot":"","sources":["../../../../../../test/interactions/data_grid/data_grid_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {assertDataGridNotScrolled, getDataGrid, getDataGridCellAtIndex, getDataGridFillerCellAtColumnIndex, getDataGridRows, getInnerTextOfDataGridCells, scrollDataGridDown, waitForScrollTopOfDataGrid} from '../../e2e/helpers/datagrid-helpers.js';\nimport {$, $$, click, getBrowserAndPages, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {it} from '../../shared/mocha-extensions.js';\nimport {loadComponentDocExample, preloadForCodeCoverage} from '../helpers/shared.js';\n\nimport type {ElementHandle} from 'puppeteer';\n\nfunction assertNumberBetween(number: number, min: number, max: number) {\n  assert.isAbove(number, min);\n  assert.isBelow(number, max);\n}\n\nasync function clickAndDragCellToResizeHorizontally(cell: ElementHandle<HTMLTableElement>, mouseXChange: number) {\n  const cellBoundingBoxData = await cell.evaluate(cellElement => {\n    const box = cellElement.getBoundingClientRect();\n    return {\n      right: box.right,\n      top: box.top,\n    };\n  });\n  const {frontend} = getBrowserAndPages();\n  const startX = cellBoundingBoxData.right - 5;\n  const startY = cellBoundingBoxData.top + 5;\n\n  await frontend.mouse.move(startX, startY);\n  await frontend.mouse.down();\n  await frontend.mouse.move(startX + mouseXChange, startY);\n  await frontend.mouse.up();\n}\n\nasync function getColumnPixelWidths(columns: ElementHandle<Element>[]) {\n  return Promise.all(columns.map(col => {\n    return col.evaluate(cell => cell.clientWidth);\n  }));\n}\n\nasync function getColumnPercentageWidthsRounded(dataGrid: ElementHandle<Element>) {\n  const cols = await $$<HTMLTableColElement>('col', dataGrid);\n  return Promise.all(cols.map(col => {\n    return col.evaluate(cell => Math.round(window.parseFloat(cell.style.width)));\n  }));\n}\n\ndescribe('data grid', async () => {\n  preloadForCodeCoverage('data_grid/basic.html');\n\n  it('lists the data grid contents', async () => {\n    await loadComponentDocExample('data_grid/basic.html');\n    const dataGrid = await getDataGrid();\n    const renderedText = await getInnerTextOfDataGridCells(dataGrid, 3);\n    assert.deepEqual(\n        [\n          ['Bravo', 'Letter B'],\n          ['Alpha', 'Letter A'],\n          ['Charlie', 'Letter C'],\n        ],\n        renderedText);\n  });\n\n  it('can resize two columns', async () => {\n    await loadComponentDocExample('data_grid/basic.html');\n    const dataGrid = await getDataGrid();\n\n    const columns = [\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 0}),\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 1}),\n    ];\n\n    let columnWidths = await getColumnPixelWidths(columns);\n    assertNumberBetween(columnWidths[0], 500, 515);\n    assertNumberBetween(columnWidths[1], 500, 515);\n    const firstRowFirstCell = await waitFor<HTMLTableElement>('td[data-row-index=\"1\"][data-col-index=\"0\"]', dataGrid);\n    await clickAndDragCellToResizeHorizontally(firstRowFirstCell, -50);\n\n    columnWidths = await getColumnPixelWidths(columns);\n    assertNumberBetween(columnWidths[0], 450, 465);\n    assertNumberBetween(columnWidths[1], 545, 565);\n  });\n\n  it('can resize empty columns', async () => {\n    await loadComponentDocExample('data_grid/empty.html');\n    const dataGrid = await getDataGrid();\n    await waitFor('.cell-resize-handle', dataGrid);\n    const emptyTableFillerFirstColumn =\n        await waitFor<HTMLTableElement>('td[data-filler-row-column-index=\"0\"]', dataGrid);\n    const columns = [\n      await getDataGridFillerCellAtColumnIndex(dataGrid, 0),\n      await getDataGridFillerCellAtColumnIndex(dataGrid, 1),\n    ];\n\n    let columnWidths = await getColumnPixelWidths(columns);\n    assertNumberBetween(columnWidths[0], 485, 500);\n    assertNumberBetween(columnWidths[1], 485, 500);\n\n    await clickAndDragCellToResizeHorizontally(emptyTableFillerFirstColumn, -50);\n    columnWidths = await getColumnPixelWidths(columns);\n    assertNumberBetween(columnWidths[0], 435, 450);\n    assertNumberBetween(columnWidths[1], 530, 550);\n  });\n\n  it('can resize two columns in a grid of 3 and leave the other column untouched', async () => {\n    await loadComponentDocExample('data_grid/three_columns.html');\n    const dataGrid = await getDataGrid();\n    await waitFor('.cell-resize-handle', dataGrid);\n    await getDataGridRows(3, dataGrid);\n    const firstRowFirstCell = await waitFor<HTMLTableElement>('td[data-row-index=\"1\"][data-col-index=\"0\"]', dataGrid);\n\n    const columns = [\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 0}),\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 1}),\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 2}),\n    ];\n\n    let columnWidths = await getColumnPixelWidths(columns);\n\n    // The container is 900px wide so we expect each column to be ~300\n    assertNumberBetween(columnWidths[0], 295, 305);\n    assertNumberBetween(columnWidths[1], 295, 305);\n    assertNumberBetween(columnWidths[2], 295, 305);\n\n    await clickAndDragCellToResizeHorizontally(firstRowFirstCell, -100);\n    /* The resize calculation is roughly as follows\n     * mouse delta = 100px (-100, but we Math.abs it)\n     * delta as a % = (100 / (leftCellWidth + rightCellWidth)) * 100\n     * % delta = (100 / 300 + 300) * 100\n     * % delta = 16.6%\n     * therefore left column % = -16.6%\n     * and right column % = + 16.6%\n     */\n    const newColumnPercentageWidths = await getColumnPercentageWidthsRounded(dataGrid);\n    assert.deepEqual(\n        [\n          16, 50,\n          33,  // left alone\n        ],\n        newColumnPercentageWidths);\n    columnWidths = await getColumnPixelWidths(columns);\n    assertNumberBetween(columnWidths[0], 145, 150);  // 16.31% of 900 = 146.79\n    assertNumberBetween(columnWidths[1], 447, 454);  // 50% of 900 = 450\n    assertNumberBetween(columnWidths[2], 297, 304);  // 33% of 900 = 300\n  });\n\n  it('lets the user resize columns when there is a middle hidden column inbetween', async () => {\n    /** Imagine we have a data grid with 3 columns:\n     * A | B | C And then we hide B, so the user sees:\n     * A | C\n     * If the user clicks and drags between A and C,\n     * it should resize them accordingly, and leave B alone, even though\n     * there is technically the B column inbetween them, but it's hidden.\n     */\n    await loadComponentDocExample('data_grid/hide-cols.html');\n\n    /**\n     * The value column is visible by default, so clicking this will hide it.\n     */\n    const toggleValueColumnButton = await $('.value-visibility-toggle');\n    if (!toggleValueColumnButton) {\n      assert.fail('Could not find value column toggle button.');\n    }\n    await click(toggleValueColumnButton);\n\n    await waitForFunction(async () => {\n      const dataGrid = await getDataGrid();\n      const hiddenCells = await $$('tbody td.hidden', dataGrid);\n      const resizerHandlers = await $$('.cell-resize-handle', dataGrid);\n      // Now there are only 2 columns visible, there should be 1 resize handler.\n      return hiddenCells.length === 3 && resizerHandlers.length === 1;\n    });\n\n    const dataGrid = await getDataGrid();\n    await getDataGridRows(3, dataGrid);\n    const renderedText = await getInnerTextOfDataGridCells(dataGrid, 3);\n    // Make sure that the middle column (\"value\") is hidden now.\n    assert.deepEqual(renderedText, [\n      ['Bravo', '1'],\n      ['Alpha', '2'],\n      ['Charlie', '3'],\n    ]);\n\n    const firstRowFirstCell = await waitFor<HTMLTableElement>('td[data-row-index=\"1\"][data-col-index=\"0\"]', dataGrid);\n\n    const columns = [\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 0}),\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 2}),\n    ];\n\n    let columnWidths = await getColumnPixelWidths(columns);\n\n    // The container is 900px wide and the first column has a weighting of 2 and\n    // the last column has a waiting of 1, so we expect one column to be ~600\n    // and the other ~300\n    assertNumberBetween(columnWidths[0], 602, 607);\n    assertNumberBetween(columnWidths[1], 294, 300);\n\n    await clickAndDragCellToResizeHorizontally(firstRowFirstCell, -100);\n    /* The resize calculation is roughly as follows\n     * mouse delta = 100px (-100, but we Math.abs it)\n     * delta as a % = (100 / (leftCellWidth + rightCellWidth)) * 100\n     * % delta = (100 / 666 + 333) * 100\n     * % delta = 11.1%\n     * therefore left column % = -11.1%\n     * and right column % = + 11.1%\n     */\n    const newColumnPercentageWidths = await getColumnPercentageWidthsRounded(dataGrid);\n    assert.deepEqual(\n        newColumnPercentageWidths,\n        [\n          56,  // 66.66 - 11.1 rounded\n          44,  // 33.33 + 11.1 rounded\n        ]);\n    columnWidths = await getColumnPixelWidths(columns);\n    assertNumberBetween(columnWidths[0], 500, 504);  // 55.8% of 900 = 502\n    assertNumberBetween(columnWidths[1], 395, 400);  // 44.12% of 900 = 397\n  });\n\n  it('persists the column resizes when new data is added', async () => {\n    await loadComponentDocExample('data_grid/adding-data.html');\n\n    const dataGrid = await getDataGrid();\n    await getDataGridRows(10, dataGrid);\n    await waitFor('.cell-resize-handle', dataGrid);\n    const firstRowFirstCell = await waitFor<HTMLTableElement>('td[data-row-index=\"1\"][data-col-index=\"0\"]', dataGrid);\n\n    const columns = [\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 0}),\n      await getDataGridCellAtIndex(dataGrid, {row: 1, column: 1}),\n    ];\n\n    let columnPixelWidths = await getColumnPixelWidths(columns);\n    // The container is 600px and both columns have weighting of 1, so they\n    // should both be ~300.\n    assertNumberBetween(columnPixelWidths[0], 297, 303);\n    assertNumberBetween(columnPixelWidths[1], 297, 303);\n\n    await clickAndDragCellToResizeHorizontally(firstRowFirstCell, 50);\n    const newColumnPercentageWidths = await getColumnPercentageWidthsRounded(dataGrid);\n    assert.deepEqual(\n        newColumnPercentageWidths,\n        [\n          58,  // 50 + 8.3 rounded\n          42,  // 50 - 8.3 rounded\n        ]);\n    columnPixelWidths = await getColumnPixelWidths(columns);\n    assertNumberBetween(columnPixelWidths[0], 348, 352);  // 58.35% of 600 = ~350\n    assertNumberBetween(columnPixelWidths[1], 247, 252);  // 42% of 600 = ~249\n\n    const addButton = await waitFor('#add');\n    await click(addButton);\n    await getDataGridRows(11, dataGrid);\n\n    const newColumnPixelWidths = await getColumnPixelWidths(columns);\n    // Ensure that after resizing and then adding a row that the widths are not changed\n    assert.deepEqual(newColumnPixelWidths, columnPixelWidths);\n  });\n\n  describe('auto-scrolling on new data', () => {\n    async function clickAddButton() {\n      const addButton = await $('#add');\n      if (!addButton) {\n        throw new Error('Could not find add button');\n      }\n      await addButton.click();\n    }\n\n    beforeEach(async function() {\n      await loadComponentDocExample('data_grid/adding-data.html');\n      const dataGrid = await getDataGrid();\n      await getDataGridRows(10, dataGrid);\n    });\n\n    it('.auto-scrolls by default if a new row is added', async () => {\n      const dataGrid = await getDataGrid();\n      await assertDataGridNotScrolled(dataGrid);\n      await clickAddButton();\n      await getDataGridRows(11, dataGrid);\n      await waitForScrollTopOfDataGrid(dataGrid, 89);\n    });\n\n    it('does not auto-scroll if the user has clicked on a cell', async () => {\n      const dataGrid = await getDataGrid();\n      await assertDataGridNotScrolled(dataGrid);\n\n      const firstBodyCell = await $('tr[aria-rowindex=\"1\"] > td[aria-colindex=\"1\"]', dataGrid);\n      if (!firstBodyCell) {\n        throw new Error('Could not find first body cell to click.');\n      }\n      await click(firstBodyCell);\n      await waitFor('tr.selected', dataGrid);\n      const {frontend} = getBrowserAndPages();\n      await frontend.evaluate('window.addNewRow()');\n      await getDataGridRows(11, dataGrid);\n      await waitForScrollTopOfDataGrid(dataGrid, 0);\n    });\n\n    it('does not auto-scroll if the user has scrolled in the data-grid', async () => {\n      const dataGrid = await getDataGrid();\n      await assertDataGridNotScrolled(dataGrid);\n      await scrollDataGridDown(dataGrid, 20);\n      const {frontend} = getBrowserAndPages();\n      await frontend.evaluate('window.addNewRow()');\n      await getDataGridRows(11, dataGrid);\n      // Ensure the scrollTop hasn't changed.\n      await waitForScrollTopOfDataGrid(dataGrid, 20);\n    });\n\n    it('will autoscroll if the user has a cell selected, but then clicks elsewhere in the UI, causing a new row to be added',\n       async () => {\n         const dataGrid = await getDataGrid();\n         await assertDataGridNotScrolled(dataGrid);\n\n         const firstBodyCell = await $('tr[aria-rowindex=\"1\"] > td[aria-colindex=\"1\"]', dataGrid);\n         if (!firstBodyCell) {\n           throw new Error('Could not find first body cell to click.');\n         }\n         await click(firstBodyCell);\n         await waitFor('tr.selected', dataGrid);\n         await clickAddButton();\n         await getDataGridRows(11, dataGrid);\n         await waitForScrollTopOfDataGrid(dataGrid, 89);\n       });\n\n    it('will resume autoscroll if the user clicks a cell but then scrolls to the bottom', async () => {\n      const {frontend} = getBrowserAndPages();\n      const dataGrid = await getDataGrid();\n      await assertDataGridNotScrolled(dataGrid);\n\n      const firstBodyCell = await $('tr[aria-rowindex=\"1\"] > td[aria-colindex=\"1\"]', dataGrid);\n      if (!firstBodyCell) {\n        throw new Error('Could not find first body cell to click.');\n      }\n      await click(firstBodyCell);\n      await waitFor('tr.selected', dataGrid);\n      // And new row and ensure we have not auto scrolled as we have a cell selected.\n      await frontend.evaluate('window.addNewRow()');\n      await getDataGridRows(11, dataGrid);\n      await waitForScrollTopOfDataGrid(dataGrid, 0);\n\n      // Now scroll down to the very bottom of the grid\n      await scrollDataGridDown(dataGrid, 89);\n      await frontend.evaluate('window.addNewRow()');\n      await getDataGridRows(12, dataGrid);\n      // Ensure the scrollTop has changed: we are auto-scrolling again as the\n      // user scrolled to the bottom\n      await waitForScrollTopOfDataGrid(dataGrid, 109);\n    });\n  });\n});\n"]}