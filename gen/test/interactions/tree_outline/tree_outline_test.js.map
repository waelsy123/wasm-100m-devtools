{"version":3,"file":"tree_outline_test.js","sourceRoot":"","sources":["../../../../../../test/interactions/tree_outline/tree_outline_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport type {ElementHandle} from 'puppeteer';\nimport {$, $$, click, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {it} from '../../shared/mocha-extensions.js';\nimport {loadComponentDocExample, preloadForCodeCoverage} from '../helpers/shared.js';\n\nasync function getTreeOutline(root?: ElementHandle) {\n  const treeOutline = await waitFor('devtools-tree-outline', root);\n  if (!treeOutline) {\n    assert.fail('Could not find tree-outline.');\n  }\n  return treeOutline;\n}\n\ninterface VisibleTreeNodeFromDOM {\n  key: string;\n  children?: VisibleTreeNodeFromDOM[];\n}\n\nasync function buildTreeNode(handler: ElementHandle<HTMLLIElement>): Promise<VisibleTreeNodeFromDOM> {\n  const keyNode = await $('[data-node-key]', handler);\n  const keyText = keyNode ? await keyNode.evaluate(k => (k.textContent || '').trim()) : '';\n  const item: VisibleTreeNodeFromDOM = {\n    key: keyText,\n  };\n\n  const ariaExpandedAttribute = await handler.evaluate(elem => elem.getAttribute('aria-expanded'));\n  if (ariaExpandedAttribute && ariaExpandedAttribute === 'true') {\n    // Figure out the aria-level of the parent, so we only select its immediate children that are one level down.\n    const parentNodeLevel = await handler.evaluate(elem => window.parseInt(elem.getAttribute('aria-level') || ''));\n    item.children = [];\n    const childNodes = await $$(`ul[role=\"group\"] > li[role=\"treeitem\"][aria-level=\"${parentNodeLevel + 1}\"]`, handler);\n    for (const child of childNodes) {\n      const newNode = await buildTreeNode(child);\n      item.children.push(newNode);\n    }\n  }\n\n  return item;\n}\n\nasync function getRenderedNodesTextAsTree(treeOutline: ElementHandle<HTMLElement>): Promise<VisibleTreeNodeFromDOM[]> {\n  const tree: VisibleTreeNodeFromDOM[] = [];\n\n  const rootNodes = await $$('ul[role=\"tree\"]>li[role=\"treeitem\"]', treeOutline);\n  for (const root of rootNodes) {\n    const newNode = await buildTreeNode(root);\n    tree.push(newNode);\n  }\n\n  return tree;\n}\n\ndescribe('TreeOutline', () => {\n  preloadForCodeCoverage('tree_outline/basic.html');\n\n  it('renders the top level nodes by default', async () => {\n    await loadComponentDocExample('tree_outline/basic.html');\n    const treeOutline = await getTreeOutline();\n    const renderedNodeTree = await getRenderedNodesTextAsTree(treeOutline);\n    assert.deepEqual(renderedNodeTree, [\n      {key: 'Offices'},\n      {key: 'Products'},\n    ]);\n  });\n\n  it('lets the user click to expand a node', async () => {\n    await loadComponentDocExample('tree_outline/basic.html');\n    const treeOutline = await getTreeOutline();\n    const firstArrow = await $('.arrow-icon', treeOutline);\n    if (!firstArrow) {\n      assert.fail('Could not find arrow icon to click');\n    }\n    await click(firstArrow);\n    await waitForFunction(async () => {\n      const visibleNodes = await $$('li[role=\"treeitem\"]', treeOutline);\n      // 3: 2 original root nodes, and the 1 child of the first root node.\n      return visibleNodes.length === 3;\n    });\n    const renderedNodeTree = await getRenderedNodesTextAsTree(treeOutline);\n    assert.deepEqual(renderedNodeTree, [\n      {key: 'Offices', children: [{key: 'Europe'}]},\n      {key: 'Products'},\n    ]);\n  });\n});\n"]}