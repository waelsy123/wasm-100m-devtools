{"version":3,"file":"shared.js","sourceRoot":"","sources":["../../../../../../test/interactions/helpers/shared.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAE7B,sDAAuF;AAEvF,MAAM,eAAe,GAAG;IACtB,KAAK,EAAE,gBAAgB;IACvB,OAAO,EAAE,QAAQ;IACjB,OAAO,EAAE,mBAAmB;CAC7B,CAAC;AAEK,MAAM,uBAAuB,GAAG,KAAK,EAAE,YAAoB,EAAE,EAAE;IACpE,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;IACxC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,oBAAoB,IAAA,6BAAiB,GAAE,iCAAiC,YAAY,EAAE,CAAC,CAAC;IAC5G,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,EAAE,eAAe,CAAC,oBAAQ,CAAC,CAAC,CAAC;IAC9D,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE;QAClC,SAAS,EAAE,cAAc;KAC1B,CAAC,CAAC;AACL,CAAC,CAAC;AAPW,QAAA,uBAAuB,2BAOlC;AAEF,MAAM,kCAAkC,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC;AAEjE,MAAM,sBAAsB,GAAG,CAAC,IAAY,EAAE,EAAE;IACrD,IAAI,CAAC,kCAAkC,EAAE;QACvC,OAAO;KACR;IAED,MAAM,CAAC,KAAK;QACV,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,8BAAkB,GAAE,CAAC;QACxC,MAAM,QAAQ,CAAC,mBAAmB,CAAC;YACjC,2BAA2B,EAAE,GAAG;SACjC,CAAC,CAAC;QACH,MAAM,IAAA,+BAAuB,EAAC,IAAI,CAAC,CAAC;QACpC,MAAM,QAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAdW,QAAA,sBAAsB,0BAcjC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {getBrowserAndPages, getTestServerPort, platform} from '../../shared/helper.js';\n\nconst fontsByPlatform = {\n  'mac': 'Helvetica Neue',\n  'win32': 'Tahoma',\n  'linux': '\"Liberation Sans\"',\n};\n\nexport const loadComponentDocExample = async (urlComponent: string) => {\n  const {frontend} = getBrowserAndPages();\n  const url = new URL(`http://localhost:${getTestServerPort()}/front_end/ui/components/docs/${urlComponent}`);\n  url.searchParams.set('fontFamily', fontsByPlatform[platform]);\n  await frontend.goto(url.toString(), {\n    waitUntil: 'networkidle0',\n  });\n};\n\nconst SHOULD_GATHER_COVERAGE_INFORMATION = process.env.COVERAGE === '1';\n\nexport const preloadForCodeCoverage = (name: string) => {\n  if (!SHOULD_GATHER_COVERAGE_INFORMATION) {\n    return;\n  }\n\n  before(async function() {\n    this.timeout(0);\n    const {frontend} = getBrowserAndPages();\n    await frontend.setExtraHTTPHeaders({\n      'devtools-compute-coverage': '1',\n    });\n    await loadComponentDocExample(name);\n    await frontend.setExtraHTTPHeaders({});\n  });\n};\n"]}