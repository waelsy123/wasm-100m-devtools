{"version":3,"file":"SCSSFormatter_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/entrypoints/formatter_worker/SCSSFormatter_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as FormatterWorker from '../../../../../front_end/entrypoints/formatter_worker/formatter_worker.js';\n\nfunction formatSCSS(text: string): string {\n  return FormatterWorker.FormatterWorker.format('text/x-scss', text, '  ').content;\n}\n\ndescribe('SCSSFormatter', () => {\n  it('formats selector with quotes', () => {\n    const formattedCode = formatSCSS('a[href=\\'/\\']');\n    assert.strictEqual(formattedCode, 'a[href=\\'/\\']');\n  });\n\n  it('formats compound selector', () => {\n    const formattedCode = formatSCSS('#content > a:hover');\n    assert.strictEqual(formattedCode, '#content > a:hover');\n  });\n\n  it('formats import selector', () => {\n    const formattedCode = formatSCSS('@import url(style.css);');\n    assert.strictEqual(formattedCode, '@import url(style.css);');\n  });\n\n  it('formats import and compound selector', () => {\n    const formattedCode = formatSCSS('@import url(\"style.css\") projection, tv;');\n    assert.strictEqual(formattedCode, '@import url(\"style.css\") projection, tv;');\n  });\n\n  it('formats separate import and selector', () => {\n    const formattedCode = formatSCSS('@import \"/css/fireball_unicode.css\"; html {}');\n    assert.strictEqual(formattedCode, `@import \"/css/fireball_unicode.css\"; html {\n}\n`);\n  });\n\n  it('formats nested selectors in media query', () => {\n    const formattedCode = formatSCSS('@media screen { body { color: red; } }');\n    assert.strictEqual(formattedCode, `@media screen {\n  body {\n    color: red;\n  }\n}\n`);\n  });\n\n  it('formats font-face selector', () => {\n    const formattedCode = formatSCSS('@font-face { font-family: \"MyHelvetica\"; }');\n    assert.strictEqual(formattedCode, `@font-face {\n  font-family: \"MyHelvetica\";\n}\n`);\n  });\n\n  it('formats color values', () => {\n    const formattedCode = formatSCSS(\n        'p { color: color; red: red; color: #000; color: #FFF; color: #123AbC; color: #faebfe; color:papayawhip; }');\n    assert.strictEqual(formattedCode, `p {\n  color: color;\n  red: red;\n  color: #000;\n  color: #FFF;\n  color: #123AbC;\n  color: #faebfe;\n  color: papayawhip;\n}\n`);\n  });\n\n  it('formats important declaration', () => {\n    const formattedCode = formatSCSS('p { margin: -10px !important; }');\n    assert.strictEqual(formattedCode, `p {\n  margin: -10px !important;\n}\n`);\n  });\n\n  it('formats variable declaration and usage', () => {\n    const formattedCode = formatSCSS('$margin-left: $offsetBefore + 12px + $offsetAfter;');\n    assert.strictEqual(formattedCode, '$margin-left: $offsetBefore + 12px + $offsetAfter;');\n  });\n\n  it('formats nested selectors with correct indentation', () => {\n    const formattedCode = formatSCSS(`$type: monster;\np {\n@if $type == ocean {\ncolor: blue;\n} @else if $type == matador {\ncolor: red;\n} @else if $type == monster {\ncolor: green;\n} @else {\ncolor: black;\n}\n}`);\n    assert.strictEqual(formattedCode, `$type: monster; p {\n  @if $type == ocean {\n    color: blue;\n  }\n\n  @else if $type == matador {\n    color: red;\n  }\n\n  @else if $type == monster {\n    color: green;\n  }\n\n  @else {\n    color: black;\n  }\n}\n`);\n  });\n\n  it('formats for loop with variables', () => {\n    const formattedCode = formatSCSS('@for $i from 1 through 3 { .item-#{$i} { width: 2em * $i; } }');\n    assert.strictEqual(formattedCode, `@for $i from 1 through 3 {\n  .item-# {\n    $i}\n\n  {\n    width: 2em * $i;\n  }\n}\n`);\n  });\n\n  it('formats nested mixin', () => {\n    const formattedCode = formatSCSS(`@mixin adjust-location($x, $y) {\n@if unitless($x) {\n@warn \"Assuming #{$x} to be in pixels\";\n$x: 1px * $x;\n}\nposition: relative; left: $x; top: $y;\n}`);\n    assert.strictEqual(formattedCode, `@mixin adjust-location($x, $y) {\n  @if unitless($x) {\n    @warn \"Assuming #{$x} to be in pixels\"; $x: 1px * $x;\n  }\n\n  position: relative;\n  left: $x;\n  top: $y;\n}\n`);\n  });\n\n  it('formats for loop with variables', () => {\n    const formattedCode = formatSCSS(`#navbar {\n$navbar-width: 800px;\n$items: 5;\n$navbar-color: #ce4dd6;\nwidth: $navbar-width;\nborder-bottom: 2px solid $navbar-color;\nli {\n@extend .notice !optional;\nfloat: left;\nwidth: $navbar-width/$items - 10px;\nbackground-color: lighten($navbar-color, 20%);\n&:hover {\nbackground-color: lighten($navbar-color, 10%);\n}\n}\n}`);\n    assert.strictEqual(formattedCode, `#navbar {\n  $navbar-width: 800px;\n  $items: 5;\n  $navbar-color: #ce4dd6;\n  width: $navbar-width;\n  border-bottom: 2px solid $navbar-color;\n  li {\n    @extend .notice !optional; float: left;\n    width: $navbar-width/$items - 10px;\n    background-color: lighten($navbar-color, 20%);\n    &:hover {\n      background-color: lighten($navbar-color, 10%);\n    }\n  }\n}\n`);\n  });\n});\n"]}