{"version":3,"file":"action_registration_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/entrypoints/meta/action_registration_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../../../front_end/core/platform/platform.js';\nimport * as Root from '../../../../../front_end/core/root/root.js';\nimport * as QuickOpen from '../../../../../front_end/ui/legacy/components/quick_open/quick_open.js';\nimport * as UI from '../../../../../front_end/ui/legacy/legacy.js';\nimport {deinitializeGlobalVars, describeWithEnvironment, initializeGlobalVars} from '../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\nlet actionExecuted = false;\nconst actionTitle = 'Mock action';\nconst actionId = 'mockAction';\nclass MockActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    actionExecuted = true;\n    return actionExecuted;\n  }\n}\n\nclass MockContextType {}\n\ndescribeWithEnvironment('Action registration', () => {\n  before(async () => {\n    UI.ActionRegistration.registerActionExtension({\n      actionId,\n      category: UI.ActionRegistration.ActionCategory.ELEMENTS,\n      title: (): Platform.UIString.LocalizedString => actionTitle as Platform.UIString.LocalizedString,\n      async loadActionDelegate() {\n        return new MockActionDelegate();\n      },\n      contextTypes() {\n        return [MockContextType];\n      },\n    });\n    Root.Runtime.experiments.clearForTest();\n    await initializeGlobalVars();\n    // A ShortcutRegistry instance is needed to add a command to execute an action to the\n    // command menu and an instance of ActionRegistry is needed to instatiate the ShorcutRegistry.\n    const actionRegistryInstance = UI.ActionRegistry.ActionRegistry.instance({forceNew: true});\n    UI.ShortcutRegistry.ShortcutRegistry.instance({forceNew: true, actionRegistry: actionRegistryInstance});\n    UI.Context.Context.instance().setFlavor(MockContextType, new MockContextType());\n  });\n\n  after(async () => {\n    await deinitializeGlobalVars();\n    UI.ActionRegistry.ActionRegistry.removeInstance();\n    UI.ShortcutRegistry.ShortcutRegistry.removeInstance();\n    UI.Context.Context.instance().setFlavor(MockContextType, null);\n  });\n\n  it('retrieves a registered action', () => {\n    const preRegisteredAction = UI.ActionRegistry.ActionRegistry.instance().action(actionId);\n    assert.isNotNull(preRegisteredAction, 'Failed to find action registration');\n    if (preRegisteredAction) {\n      assert.strictEqual(preRegisteredAction.title(), actionTitle, 'Action title is not returned correctly');\n    }\n  });\n\n  it('finds a pre registered action as available when its context types are in the current context flavors', () => {\n    const availableActions = UI.ActionRegistry.ActionRegistry.instance().availableActions().map(action => action.id());\n    assert.notStrictEqual(availableActions.indexOf(actionId), -1);\n  });\n\n  it('executes a pre registered action', async () => {\n    actionExecuted = false;\n    const preRegisteredAction =\n        UI.ActionRegistry.ActionRegistry.instance().action(actionId) as UI.ActionRegistration.Action;\n    if (preRegisteredAction) {\n      await preRegisteredAction.execute();\n      assert.isTrue(actionExecuted, 'Action was not executed');\n    }\n  });\n\n  it('executes a pre registered from the command menu', async () => {\n    actionExecuted = false;\n    const commandMenuProvider = QuickOpen.CommandMenu.CommandMenuProvider.instance({forceNew: true});\n    commandMenuProvider.attach();\n    await commandMenuProvider.selectItem(0, '');\n    assert.isTrue(actionExecuted, 'Action was not executed from CommandMenu');\n  });\n\n  it('throws an error trying to register a duplicated view id', () => {\n    assert.throws(() => {\n      UI.ActionRegistration.registerActionExtension({\n        actionId,\n        category: UI.ActionRegistration.ActionCategory.ELEMENTS,\n      });\n    });\n  });\n\n  it('does not find a pre registered action as available when its context types are not in the current context flavors',\n     () => {\n       UI.Context.Context.instance().setFlavor(MockContextType, undefined);\n       const availableActions =\n           UI.ActionRegistry.ActionRegistry.instance().availableActions().map(action => action.id());\n       assert.strictEqual(availableActions.indexOf(actionId), -1);\n     });\n\n  it('deletes a registered action using its id', () => {\n    const removalResult = UI.ActionRegistration.maybeRemoveActionExtension(actionId);\n    assert.isTrue(removalResult);\n    assert.doesNotThrow(() => {\n      UI.ActionRegistration.registerActionExtension({\n        actionId,\n        category: UI.ActionRegistration.ActionCategory.ELEMENTS,\n      });\n    });\n  });\n});\n"]}