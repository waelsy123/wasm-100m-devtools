{"version":3,"file":"ServiceWorkerUpdateCycleView_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/panels/application/ServiceWorkerUpdateCycleView_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport type * as SDKModule from '../../../../../front_end/core/sdk/sdk.js';\nimport * as Resources from '../../../../../front_end/panels/application/application.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport {describeWithLocale} from '../../helpers/EnvironmentHelpers.js';\n\nimport View = Resources.ServiceWorkerUpdateCycleView;\n\ndescribeWithLocale('ServiceWorkerUpdateCycleView', () => {\n  let versionId = 0;\n  let SDK: typeof SDKModule;\n  before(async () => {\n    SDK = await import('../../../../../front_end/core/sdk/sdk.js');\n  });\n  const registrationId = 'fake-sw-id' as Protocol.ServiceWorker.RegistrationID;\n\n  it('calculates update cycle ranges', () => {\n    const payload: Protocol.ServiceWorker.ServiceWorkerRegistration = {registrationId, scopeURL: '', isDeleted: false};\n    const registration: SDKModule.ServiceWorkerManager.ServiceWorkerRegistration =\n        new SDK.ServiceWorkerManager.ServiceWorkerRegistration(payload);\n\n    let view = new View.ServiceWorkerUpdateCycleView(registration);\n    let ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 0, 'A nascent registration has no ranges to display.');\n\n    versionId++;\n    let versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.New,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 0, 'A new registration has no ranges to display.');\n\n    versionId++;\n    versionPayload = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 1, 'An installing registration has a range to display.');\n\n    versionId++;\n    versionPayload = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(\n        ranges.length, 1, 'An installing registration (reported multiple times) has a range to display.');\n\n    versionId++;\n    versionPayload = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 1, 'An installed registration has a range to display. ');\n\n    versionId++;\n    versionPayload = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 3, 'An activating registration has ranges to display.');\n\n    versionId++;\n    versionPayload = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 3, 'An activating registration has ranges to display.');\n\n    versionId++;\n    versionPayload = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 3, 'An activated registration has ranges to display.');\n\n    versionId++;\n    versionPayload = {\n      registrationId,\n      versionId: versionId.toString(),\n      scriptURL: '',\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant,\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped,\n    };\n    registration.updateVersion(versionPayload);\n    view = new View.ServiceWorkerUpdateCycleView(registration);\n    ranges = view.calculateServiceWorkerUpdateRanges();\n    assert.strictEqual(ranges.length, 3, 'A redundent registration has ranges to display.');\n  });\n});\n"]}