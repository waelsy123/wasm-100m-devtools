{"version":3,"file":"TrustTokensView_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/panels/application/components/TrustTokensView_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,qBAAqB,MAAM,yEAAyE,CAAC;AACjH,OAAO,KAAK,QAAQ,MAAM,kEAAkE,CAAC;AAC7F,OAAO,KAAK,WAAW,MAAM,oFAAoF,CAAC;AAElH,OAAO,EAAC,aAAa,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,yBAAyB,EAAE,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AACpJ,OAAO,EAAC,gBAAgB,EAAE,sBAAsB,EAAC,MAAM,2CAA2C,CAAC;AACnG,OAAO,EAAC,kBAAkB,EAAC,MAAM,wCAAwC,CAAC;AAE1E,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAE/E,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,KAAK,UAAU,qBAAqB,CAChC,MAAsC,EAAE,qBAA+C,GAAG,EAAE,GAAE,CAAC;IAEjG,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;IAC9E,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAChC,SAAS,CAAC,IAAI,GAAG,EAAC,MAAM,EAAE,kBAAkB,EAAC,CAAC;IAE9C,kFAAkF;IAClF,yCAAyC;IACzC,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;IAEzB,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,6BAA6B,CAAC,SAAgE;IACrG,MAAM,kBAAkB,GAAG,yBAAyB,CAChD,SAAS,EAAE,+BAA+B,EAAE,QAAQ,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;IAChG,MAAM,QAAQ,GAAG,yBAAyB,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACjH,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACtC,OAAO,QAAQ,CAAC,UAAU,CAAC;AAC7B,CAAC;AAED,kBAAkB,CAAC,iBAAiB,EAAE,GAAG,EAAE;IACzC,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,SAAS,GAAG,MAAM,qBAAqB,CAAC;YAC5C,EAAC,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAC;YACpC,EAAC,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAC;SACpC,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAG,6BAA6B,CAAC,SAAS,CAAC,CAAC;QACpE,MAAM,SAAS,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;QAC7D,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE;YAC1B,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC;YACpB,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC;SACtB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,SAAS,GAAG,MAAM,qBAAqB,CAAC;YAC5C,EAAC,YAAY,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,EAAC;YACzC,EAAC,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAC;SACrC,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAG,6BAA6B,CAAC,SAAS,CAAC,CAAC;QACpE,MAAM,SAAS,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;QAC7D,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,SAAS,GAAG,MAAM,qBAAqB,CAAC;YAC5C,EAAC,YAAY,EAAE,cAAc,EAAE,KAAK,EAAE,EAAE,EAAC;YACzC,EAAC,YAAY,EAAE,iBAAiB,EAAE,KAAK,EAAE,EAAE,EAAC;SAC7C,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAG,6BAA6B,CAAC,SAAS,CAAC,CAAC;QACpE,MAAM,SAAS,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;QAC7D,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE;YAC1B,CAAC,aAAa,EAAE,IAAI,EAAE,EAAE,CAAC;YACzB,CAAC,gBAAgB,EAAE,IAAI,EAAE,EAAE,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,SAAS,GAAG,MAAM,qBAAqB,CAAC,EAAE,CAAC,CAAC;QAClD,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEvC,MAAM,eAAe,GAAG,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;QAC5F,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAE/B,MAAM,oBAAoB,GAAG,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACrF,aAAa,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2FAA2F,EAAE,KAAK,IAAI,EAAE;QACzG,0FAA0F;QAC1F,IAAI,0BAAoD,CAAC;QACzD,MAAM,mBAAmB,GAAoB,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACjE,0BAA0B,GAAG,OAAO,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,MAAM,qBAAqB,CACzC;YACE,EAAC,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAC;YACpC,EAAC,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAC;SACpC,EACD,CAAC,MAAc,EAAE,EAAE;YACjB,0BAA0B,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEP,MAAM,kBAAkB,GAAG,6BAA6B,CAAC,SAAS,CAAC,CAAC;QACpE,MAAM,UAAU,GAAG,gBAAgB,CAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAC,CAAC,CAAC;QAC7E,MAAM,qBAAqB,GAAG,UAAU,CAAC,aAAa,CAAC,qCAAqC,CAAC,CAAC;QAC9F,aAAa,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC;QAClD,gBAAgB,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,YAAY,GAAG,qBAAqB,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9E,aAAa,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;QAC/C,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAEjC,MAAM,YAAY,GAAG,MAAM,mBAAmB,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ApplicationComponents from '../../../../../../front_end/panels/application/components/components.js';\nimport * as DataGrid from '../../../../../../front_end/ui/components/data_grid/data_grid.js';\nimport * as Coordinator from '../../../../../../front_end/ui/components/render_coordinator/render_coordinator.js';\nimport type * as Protocol from '../../../../../../front_end/generated/protocol.js';\nimport {assertElement, assertShadowRoot, dispatchClickEvent, getElementWithinComponent, renderElementIntoDOM} from '../../../helpers/DOMHelpers.js';\nimport {getCellByIndexes, getValuesOfAllBodyRows} from '../../../ui/components/DataGridHelpers.js';\nimport {describeWithLocale} from '../../../helpers/EnvironmentHelpers.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst {assert} = chai;\n\nasync function renderTrustTokensView(\n    tokens: Protocol.Storage.TrustTokens[], deleteClickHandler: (issuer: string) => void = () => {}):\n    Promise<ApplicationComponents.TrustTokensView.TrustTokensView> {\n  const component = new ApplicationComponents.TrustTokensView.TrustTokensView();\n  renderElementIntoDOM(component);\n  component.data = {tokens, deleteClickHandler};\n\n  // The data-grid's renderer is scheduled, so we need to wait until the coordinator\n  // is done before we can test against it.\n  await coordinator.done();\n\n  return component;\n}\n\nfunction getInternalDataGridShadowRoot(component: ApplicationComponents.TrustTokensView.TrustTokensView): ShadowRoot {\n  const dataGridController = getElementWithinComponent(\n      component, 'devtools-data-grid-controller', DataGrid.DataGridController.DataGridController);\n  const dataGrid = getElementWithinComponent(dataGridController, 'devtools-data-grid', DataGrid.DataGrid.DataGrid);\n  assertShadowRoot(dataGrid.shadowRoot);\n  return dataGrid.shadowRoot;\n}\n\ndescribeWithLocale('TrustTokensView', () => {\n  it('renders trust token data', async () => {\n    const component = await renderTrustTokensView([\n      {issuerOrigin: 'foo.com', count: 42},\n      {issuerOrigin: 'bar.org', count: 7},\n    ]);\n\n    const dataGridShadowRoot = getInternalDataGridShadowRoot(component);\n    const rowValues = getValuesOfAllBodyRows(dataGridShadowRoot);\n    assert.deepEqual(rowValues, [\n      ['bar.org', '7', ''],\n      ['foo.com', '42', ''],\n    ]);\n  });\n\n  it('does not display issuers with zero stored tokens', async () => {\n    const component = await renderTrustTokensView([\n      {issuerOrigin: 'no-issuer.org', count: 0},\n      {issuerOrigin: 'foo.com', count: 42},\n    ]);\n\n    const dataGridShadowRoot = getInternalDataGridShadowRoot(component);\n    const rowValues = getValuesOfAllBodyRows(dataGridShadowRoot);\n    assert.deepEqual(rowValues, [['foo.com', '42', '']]);\n  });\n\n  it('removes trailing slashes from issuer origins', async () => {\n    const component = await renderTrustTokensView([\n      {issuerOrigin: 'example.com/', count: 20},\n      {issuerOrigin: 'sub.domain.org/', count: 14},\n    ]);\n\n    const dataGridShadowRoot = getInternalDataGridShadowRoot(component);\n    const rowValues = getValuesOfAllBodyRows(dataGridShadowRoot);\n    assert.deepEqual(rowValues, [\n      ['example.com', '20', ''],\n      ['sub.domain.org', '14', ''],\n    ]);\n  });\n\n  it('hides trust token table when there are no trust tokens', async () => {\n    const component = await renderTrustTokensView([]);\n    assertShadowRoot(component.shadowRoot);\n\n    const nullGridElement = component.shadowRoot.querySelector('devtools-data-grid-controller');\n    assert.isNull(nullGridElement);\n\n    const noTrustTokensElement = component.shadowRoot.querySelector('div.no-tt-message');\n    assertElement(noTrustTokensElement, HTMLDivElement);\n  });\n\n  it('calls the delete handler with the right issuer when the delete button is clicked in a row', async () => {\n    // Create a Promise that resolves with the issuer for which the delete button was clicked.\n    let resolveDeleteButtonPromise: (issuer: string) => void;\n    const deleteButtonClicked: Promise<string> = new Promise(resolve => {\n      resolveDeleteButtonPromise = resolve;\n    });\n\n    const component = await renderTrustTokensView(\n        [\n          {issuerOrigin: 'bar.org', count: 42},\n          {issuerOrigin: 'foo.com', count: 7},\n        ],\n        (issuer: string) => {\n          resolveDeleteButtonPromise(issuer);\n        });\n\n    const dataGridShadowRoot = getInternalDataGridShadowRoot(component);\n    const deleteCell = getCellByIndexes(dataGridShadowRoot, {column: 2, row: 1});\n    const deleteButtonComponent = deleteCell.querySelector('devtools-trust-tokens-delete-button');\n    assertElement(deleteButtonComponent, HTMLElement);\n    assertShadowRoot(deleteButtonComponent.shadowRoot);\n    const deleteButton = deleteButtonComponent.shadowRoot.querySelector('button');\n    assertElement(deleteButton, HTMLButtonElement);\n    dispatchClickEvent(deleteButton);\n\n    const actualIssuer = await deleteButtonClicked;\n    assert.strictEqual(actualIssuer, 'bar.org');\n  });\n});\n"]}