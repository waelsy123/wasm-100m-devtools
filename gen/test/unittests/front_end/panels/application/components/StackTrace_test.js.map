{"version":3,"file":"StackTrace_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/panels/application/components/StackTrace_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../../../../../front_end/core/sdk/sdk.js';\nimport * as ApplicationComponents from '../../../../../../front_end/panels/application/components/components.js';\nimport * as ExpandableList from '../../../../../../front_end/ui/components/expandable_list/expandable_list.js';\nimport * as Components from '../../../../../../front_end/ui/legacy/components/utils/utils.js';\nimport type * as Protocol from '../../../../../../front_end/generated/protocol.js';\nimport {assertElement, assertShadowRoot, dispatchClickEvent, getCleanTextContentFromElements, getElementWithinComponent, getElementsWithinComponent, renderElementIntoDOM} from '../../../helpers/DOMHelpers.js';\nimport {describeWithLocale} from '../../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\n\nconst makeFrame =\n    (overrides: Partial<SDK.ResourceTreeModel.ResourceTreeFrame> = {}): SDK.ResourceTreeModel.ResourceTreeFrame => {\n      const newFrame: SDK.ResourceTreeModel.ResourceTreeFrame = {\n        resourceTreeModel: () => ({\n          target: () => ({}),\n        }),\n        ...overrides,\n      } as unknown as SDK.ResourceTreeModel.ResourceTreeFrame;\n      return newFrame;\n    };\n\nfunction mockBuildStackTraceRows(\n    stackTrace: Protocol.Runtime.StackTrace,\n    _target: SDK.Target.Target|null,\n    _linkifier: Components.Linkifier.Linkifier,\n    _tabStops: boolean|undefined,\n    _updateCallback?: (arg0: (Components.JSPresentationUtils.StackTraceRegularRow|\n                              Components.JSPresentationUtils.StackTraceAsyncRow)[]) => void,\n    ): (Components.JSPresentationUtils.StackTraceRegularRow|Components.JSPresentationUtils.StackTraceAsyncRow)[] {\n  return stackTrace.callFrames.map(callFrame => ({\n                                     functionName: callFrame.functionName,\n                                     ignoreListHide: callFrame.url.includes('hidden'),\n                                     link: Components.Linkifier.Linkifier.linkifyURL(callFrame.url),\n                                     rowCountHide: false,\n                                   }));\n}\n\nconst fakeScriptId = '1' as Protocol.Runtime.ScriptId;\n\ndescribeWithLocale('StackTrace', () => {\n  it('does not generate rows when there is no data', () => {\n    const component = new ApplicationComponents.StackTrace.StackTrace();\n    const rows = component.createRowTemplates();\n    assert.deepEqual(rows, []);\n  });\n\n  it('generates rows from stack trace data', () => {\n    const frame = makeFrame({\n      getCreationStackTraceData: () => ({\n        creationStackTrace: {\n          callFrames: [\n            {\n              functionName: 'function1',\n              url: 'http://www.example.com/script1.js',\n              lineNumber: 15,\n              columnNumber: 10,\n              scriptId: fakeScriptId,\n            },\n            {\n              functionName: 'function2',\n              url: 'http://www.example.com/script2.js',\n              lineNumber: 20,\n              columnNumber: 5,\n              scriptId: fakeScriptId,\n            },\n          ],\n        },\n        creationStackTraceTarget: {} as SDK.Target.Target,\n      }),\n    });\n    const component = new ApplicationComponents.StackTrace.StackTrace();\n    renderElementIntoDOM(component);\n    component.data = {\n      frame: frame,\n      buildStackTraceRows: mockBuildStackTraceRows,\n    };\n\n    assertShadowRoot(component.shadowRoot);\n    const expandableList =\n        getElementWithinComponent(component, 'devtools-expandable-list', ExpandableList.ExpandableList.ExpandableList);\n    assertShadowRoot(expandableList.shadowRoot);\n    const expandButton = expandableList.shadowRoot.querySelector('button.arrow-icon-button');\n    assertElement(expandButton, HTMLButtonElement);\n    dispatchClickEvent(expandButton);\n\n    const stackTraceRows = getElementsWithinComponent(\n        expandableList, 'devtools-stack-trace-row', ApplicationComponents.StackTrace.StackTraceRow);\n    let stackTraceText: string[] = [];\n\n    stackTraceRows.forEach(row => {\n      assertShadowRoot(row.shadowRoot);\n      stackTraceText = stackTraceText.concat(getCleanTextContentFromElements(row.shadowRoot, '.stack-trace-row'));\n    });\n\n    assert.deepEqual(stackTraceText, [\n      'function1\\xA0@\\xA0www.example.com/script1.js',\n      'function2\\xA0@\\xA0www.example.com/script2.js',\n    ]);\n  });\n\n  it('hides hidden rows behind \"show all\" button', async () => {\n    const frame = makeFrame({\n      getCreationStackTraceData: () => ({\n        creationStackTrace: {\n          callFrames: [\n            {\n              functionName: 'function1',\n              url: 'http://www.example.com/script.js',\n              lineNumber: 15,\n              columnNumber: 10,\n              scriptId: fakeScriptId,\n            },\n            {\n              functionName: 'function2',\n              url: 'http://www.example.com/hidden.js',\n              lineNumber: 20,\n              columnNumber: 5,\n              scriptId: fakeScriptId,\n            },\n          ],\n        },\n        creationStackTraceTarget: {} as SDK.Target.Target,\n      }),\n    });\n    const component = new ApplicationComponents.StackTrace.StackTrace();\n    renderElementIntoDOM(component);\n    component.data = {\n      frame: frame,\n      buildStackTraceRows: mockBuildStackTraceRows,\n    };\n\n    assertShadowRoot(component.shadowRoot);\n    const expandableList =\n        getElementWithinComponent(component, 'devtools-expandable-list', ExpandableList.ExpandableList.ExpandableList);\n    assertShadowRoot(expandableList.shadowRoot);\n    const expandButton = expandableList.shadowRoot.querySelector('button.arrow-icon-button');\n    assertElement(expandButton, HTMLButtonElement);\n    dispatchClickEvent(expandButton);\n    await new Promise<void>(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, 1500);\n    });\n\n    const stackTraceRows = Array.from(expandableList.shadowRoot.querySelectorAll('[data-stack-trace-row]'));\n    let stackTraceText: string[] = [];\n\n    stackTraceRows.forEach(row => {\n      assertShadowRoot(row.shadowRoot);\n      stackTraceText = stackTraceText.concat(getCleanTextContentFromElements(row.shadowRoot, '.stack-trace-row'));\n    });\n\n    assert.deepEqual(stackTraceText, [\n      'function1\\xA0@\\xA0www.example.com/script.js',\n      'Show 1 more frame',\n    ]);\n\n    const stackTraceLinkButton = getElementWithinComponent(\n        expandableList, 'devtools-stack-trace-link-button', ApplicationComponents.StackTrace.StackTraceLinkButton);\n    assertShadowRoot(stackTraceLinkButton.shadowRoot);\n    const showAllButton = stackTraceLinkButton.shadowRoot.querySelector('.stack-trace-row button.link');\n    assertElement(showAllButton, HTMLButtonElement);\n    dispatchClickEvent(showAllButton);\n\n    const openedStackTraceRows = Array.from(expandableList.shadowRoot.querySelectorAll('[data-stack-trace-row]'));\n    let openedStackTraceText: string[] = [];\n\n    openedStackTraceRows.forEach(row => {\n      assertShadowRoot(row.shadowRoot);\n      openedStackTraceText =\n          openedStackTraceText.concat(getCleanTextContentFromElements(row.shadowRoot, '.stack-trace-row'));\n    });\n\n    assert.deepEqual(openedStackTraceText, [\n      'function1\\xA0@\\xA0www.example.com/script.js',\n      'function2\\xA0@\\xA0www.example.com/hidden.js',\n    ]);\n  });\n});\n"]}