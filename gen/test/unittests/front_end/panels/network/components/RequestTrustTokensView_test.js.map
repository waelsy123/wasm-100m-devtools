{"version":3,"file":"RequestTrustTokensView_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/panels/network/components/RequestTrustTokensView_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../../../../../front_end/core/platform/platform.js';\nimport * as Protocol from '../../../../../../front_end/generated/protocol.js';\nimport * as NetworkComponents from '../../../../../../front_end/panels/network/components/components.js';\nimport {getElementsWithinComponent, getElementWithinComponent, renderElementIntoDOM} from '../../../helpers/DOMHelpers.js';\nimport {describeWithLocale} from '../../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\n\ndescribeWithLocale('RequestTrustTokensView', () => {\n  const mockId = 'mockId' as Protocol.Network.RequestId;\n\n  const renderRequestTrustTokensView = () => {\n    const component = new NetworkComponents.RequestTrustTokensView.RequestTrustTokensReport();\n    renderElementIntoDOM(component);\n    return component;\n  };\n\n  it('renders the RefreshPolicy for redemptions', () => {\n    const component = renderRequestTrustTokensView();\n    component.data = {\n      params: {\n        type: Protocol.Network.TrustTokenOperationType.Redemption,\n        refreshPolicy: Protocol.Network.TrustTokenParamsRefreshPolicy.UseCached,\n      },\n    } as NetworkComponents.RequestTrustTokensView.RequestTrustTokensReportData;\n\n    const [typeSpan, refreshPolicySpan] =\n        getElementsWithinComponent(component, 'devtools-report-value.code', HTMLElement);\n    assert.strictEqual(typeSpan.textContent, 'Redemption');\n    assert.strictEqual(refreshPolicySpan.textContent, 'UseCached');\n  });\n\n  it('renders all issuers as a list', () => {\n    const component = renderRequestTrustTokensView();\n    const expectedIssuers = ['example.org', 'foo.dev', 'bar.com'];\n    component.data = {\n      params: {\n        type: Protocol.Network.TrustTokenOperationType.Signing,\n        issuers: expectedIssuers,\n      },\n    } as NetworkComponents.RequestTrustTokensView.RequestTrustTokensReportData;\n\n    const issuerElements = getElementsWithinComponent(component, 'ul.issuers-list > li', HTMLElement);\n    const actualIssuers = [...issuerElements].map(e => e.textContent);\n\n    assert.deepStrictEqual(actualIssuers.sort(), expectedIssuers.sort());\n  });\n\n  it('renders a result section with success status for successful requests', () => {\n    const component = renderRequestTrustTokensView();\n    component.data = {\n      result: {\n        status: Protocol.Network.TrustTokenOperationDoneEventStatus.Ok,\n        type: Protocol.Network.TrustTokenOperationType.Issuance,\n        requestId: mockId,\n      },\n    };\n\n    const simpleText = getElementWithinComponent(component, 'span > strong', HTMLElement);\n    assertNotNullOrUndefined(simpleText);\n    assert.strictEqual(simpleText.textContent, 'Success');\n  });\n\n  it('renders a result section with failure status for failed requests', () => {\n    const component = renderRequestTrustTokensView();\n    component.data = {\n      result: {\n        status: Protocol.Network.TrustTokenOperationDoneEventStatus.BadResponse,\n        type: Protocol.Network.TrustTokenOperationType.Issuance,\n        requestId: mockId,\n      },\n    };\n\n    const simpleText = getElementWithinComponent(component, 'span > strong', HTMLElement);\n    assertNotNullOrUndefined(simpleText);\n    assert.strictEqual(simpleText.textContent, 'Failure');\n  });\n});\n"]}