{"version":3,"file":"CoverageInfo_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/panels/coverage/CoverageInfo_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAGtB,OAAO,KAAK,QAAQ,MAAM,sDAAsD,CAAC;AAEjF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,QAAQ,GACV,CAAC,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;YACxG,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,aAAa,CAAC,YAAY,CAChD,IAA4D,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,qBAC1B,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,QAAQ,GACV,CAAC,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;YACxG,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,aAAa,CAAC,YAAY,CAChD,IAA4D,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,qBAC1B,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;YACzE,MAAM,QAAQ,GAAG,CAAC,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;YACpF,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,aAAa,CAAC,YAAY,CAChD,IAA4D,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,qBAC1B,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport type * as TextUtils from '../../../../../front_end/models/text_utils/text_utils.js';\nimport * as Coverage from '../../../../../front_end/panels/coverage/coverage.js';\n\ndescribe('CoverageInfo', () => {\n  describe('#rangesForExport', () => {\n    it('omits ranges with count of zero', () => {\n      const segments =\n          [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 100}, {end: 30, count: 0, stamp: 100}];\n      const info = new Coverage.CoverageModel.CoverageInfo(\n          null as unknown as TextUtils.ContentProvider.ContentProvider, 100, 10, 20,\n          Coverage.CoverageModel.CoverageType.JavaScript);\n      info.mergeCoverage(segments);\n      const ranges = info.rangesForExport();\n      assert.deepEqual(ranges, [{start: 10, end: 20}]);\n    });\n\n    it('merges consecutive ranges with different non-zero counts', () => {\n      const segments =\n          [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 100}, {end: 30, count: 1, stamp: 100}];\n      const info = new Coverage.CoverageModel.CoverageInfo(\n          null as unknown as TextUtils.ContentProvider.ContentProvider, 100, 10, 20,\n          Coverage.CoverageModel.CoverageType.JavaScript);\n      info.mergeCoverage(segments);\n      const ranges = info.rangesForExport();\n      assert.deepEqual(ranges, [{start: 10, end: 30}]);\n    });\n\n    it('does not merge a range with a consecutive range with count zero', () => {\n      const segments = [{end: 10, count: 1, stamp: 100}, {end: 30, count: 0, stamp: 100}];\n      const info = new Coverage.CoverageModel.CoverageInfo(\n          null as unknown as TextUtils.ContentProvider.ContentProvider, 100, 10, 20,\n          Coverage.CoverageModel.CoverageType.JavaScript);\n      info.mergeCoverage(segments);\n      const ranges = info.rangesForExport();\n      assert.deepEqual(ranges, [{start: 0, end: 10}]);\n    });\n  });\n});\n"]}