{"version":3,"file":"SourcesView_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/panels/sources/SourcesView_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Bindings from '../../../../../front_end/models/bindings/bindings.js';\nimport * as Common from '../../../../../front_end/core/common/common.js';\nimport * as Persistence from '../../../../../front_end/models/persistence/persistence.js';\nimport * as Root from '../../../../../front_end/core/root/root.js';\nimport type * as Platform from '../../../../../front_end/core/platform/platform.js';\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as SourceFrame from '../../../../../front_end/ui/legacy/components/source_frame/source_frame.js';\nimport * as Sources from '../../../../../front_end/panels/sources/sources.js';\nimport * as SourcesComponents from '../../../../../front_end/panels/sources/components/components.js';\nimport * as UI from '../../../../../front_end/ui/legacy/legacy.js';\nimport * as Workspace from '../../../../../front_end/models/workspace/workspace.js';\nimport {initializeGlobalVars, deinitializeGlobalVars} from '../../helpers/EnvironmentHelpers.js';\nimport {createUISourceCode} from '../../helpers/UISourceCodeHelpers.js';\n\ndescribe('SourcesView', () => {\n  beforeEach(async () => {\n    await initializeGlobalVars();\n    Root.Runtime.experiments.register(Root.Runtime.ExperimentName.HEADER_OVERRIDES, '');\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.HEADER_OVERRIDES);\n    const actionRegistryInstance = UI.ActionRegistry.ActionRegistry.instance({forceNew: true});\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const debuggerWorkspaceBinding =\n        Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({forceNew: true, targetManager, workspace});\n    const breakpointManager = Bindings.BreakpointManager.BreakpointManager.instance(\n        {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n    Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n    UI.ShortcutRegistry.ShortcutRegistry.instance({forceNew: true, actionRegistry: actionRegistryInstance});\n  });\n\n  afterEach(async () => {\n    await deinitializeGlobalVars();\n  });\n\n  it('creates new source view of updated type when renamed file requires a different viewer', async () => {\n    const sourcesView = new Sources.SourcesView.SourcesView();\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const {uiSourceCode, project} = createUISourceCode({\n      url: 'file:///path/to/overrides/example.html' as Platform.DevToolsPath.UrlString,\n      mimeType: 'text/html',\n    });\n    project.canSetFileContent = () => true;\n    project.rename =\n        (uiSourceCode: Workspace.UISourceCode.UISourceCode, newName: string,\n         callback: (\n             arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n             arg3?: Common.ResourceType.ResourceType) => void) => {\n          const newURL = ('file:///path/to/overrides/' + newName) as Platform.DevToolsPath.UrlString;\n          let newContentType = Common.ResourceType.resourceTypes.Document;\n          if (newName.endsWith('.jpg')) {\n            newContentType = Common.ResourceType.resourceTypes.Image;\n          } else if (newName.endsWith('.woff')) {\n            newContentType = Common.ResourceType.resourceTypes.Font;\n          }\n          callback(true, newName, newURL, newContentType);\n        };\n\n    sourcesView.viewForFile(uiSourceCode);\n\n    assert.isTrue(sourcesView.getSourceView(uiSourceCode) instanceof Sources.UISourceCodeFrame.UISourceCodeFrame);\n\n    // Rename, but contentType stays the same\n    await uiSourceCode.rename('newName.html' as Platform.DevToolsPath.RawPathString);\n    assert.isTrue(sourcesView.getSourceView(uiSourceCode) instanceof Sources.UISourceCodeFrame.UISourceCodeFrame);\n\n    // Rename which changes contentType\n    await uiSourceCode.rename('image.jpg' as Platform.DevToolsPath.RawPathString);\n    assert.isTrue(sourcesView.getSourceView(uiSourceCode) instanceof SourceFrame.ImageView.ImageView);\n\n    // Rename which changes contentType\n    await uiSourceCode.rename('font.woff' as Platform.DevToolsPath.RawPathString);\n    assert.isTrue(sourcesView.getSourceView(uiSourceCode) instanceof SourceFrame.FontView.FontView);\n    workspace.removeProject(project);\n  });\n\n  it('creates a HeadersView when the filename is \\'.headers\\'', async () => {\n    const sourcesView = new Sources.SourcesView.SourcesView();\n    const uiSourceCode = new Workspace.UISourceCode.UISourceCode(\n        {} as Persistence.FileSystemWorkspaceBinding.FileSystem,\n        'file:///path/to/overrides/www.example.com/.headers' as Platform.DevToolsPath.UrlString,\n        Common.ResourceType.resourceTypes.Document);\n    sourcesView.viewForFile(uiSourceCode);\n    assert.isTrue(sourcesView.getSourceView(uiSourceCode) instanceof SourcesComponents.HeadersView.HeadersView);\n  });\n});\n"]}