{"version":3,"file":"DeprecationIssue_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/panels/issues/DeprecationIssue_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,KAAK,aAAa,MAAM,kEAAkE,CAAC;AAElG,OAAO,EAAC,eAAe,EAAC,MAAM,gDAAgD,CAAC;AAE/E,OAAO,EAAC,kBAAkB,EAAC,MAAM,qCAAqC,CAAC;AAEvE,kBAAkB,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;IAChD,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,EAAE,CAA2C,CAAC;IAEpF,SAAS,6BAA6B,CAClC,OAAe,EAAE,eAAuB,EACxC,IAA0C;QAC5C,OAAO;YACL,IAAI,2CAAqD;YACzD,OAAO,EAAE;gBACP,uBAAuB,EAAE;oBACvB,kBAAkB,EAAE;wBAClB,GAAG,EAAE,YAAY;wBACjB,UAAU,EAAE,CAAC;wBACb,YAAY,EAAE,CAAC;qBAChB;oBACD,OAAO;oBACP,eAAe;oBACf,IAAI;iBACL;aACF;SACF,CAAC;IACJ,CAAC;IAED,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,OAAO,GAAG,6BAA6B,CAAC,EAAE,EAAE,EAAE,gDAA0D,CAAC;QAC/G,MAAM,KAAK,GAAG,aAAa,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,OAAO,GACT,6BAA6B,CAAC,MAAM,EAAE,MAAM,gDAA0D,CAAC;QAC3G,MAAM,KAAK,GAAG,aAAa,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,OAAO,GAAG,6BAA6B,CAAC,MAAM,EAAE,MAAM,oCAAoD,CAAC;QACjH,MAAM,KAAK,GAAG,aAAa,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,OAAO,GAAG,6BAA6B,CAAC,EAAE,EAAE,EAAE,oCAAoD,CAAC;QACzG,MAAM,KAAK,GAAG,aAAa,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as IssuesManager from '../../../../../front_end/models/issues_manager/issues_manager.js';\nimport type * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport {MockIssuesModel} from '../../models/issues_manager/MockIssuesModel.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport {describeWithLocale} from '../../helpers/EnvironmentHelpers.js';\n\ndescribeWithLocale('DeprecationIssue', async () => {\n  const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n\n  function createDeprecationIssueDetails(\n      message: string, deprecationType: string,\n      type: Protocol.Audits.DeprecationIssueType): Protocol.Audits.InspectorIssue {\n    return {\n      code: Protocol.Audits.InspectorIssueCode.DeprecationIssue,\n      details: {\n        deprecationIssueDetails: {\n          sourceCodeLocation: {\n            url: 'empty.html',\n            lineNumber: 1,\n            columnNumber: 1,\n          },\n          message,\n          deprecationType,\n          type,\n        },\n      },\n    };\n  }\n\n  it('deprecation issue with good translated details works', () => {\n    const details = createDeprecationIssueDetails('', '', Protocol.Audits.DeprecationIssueType.DeprecationExample);\n    const issue = IssuesManager.DeprecationIssue.DeprecationIssue.fromInspectorIssue(mockModel, details);\n    assert.isNotEmpty(issue);\n  });\n\n  it('deprecation issue with bad translated details fails', () => {\n    const details =\n        createDeprecationIssueDetails('Test', 'Test', Protocol.Audits.DeprecationIssueType.DeprecationExample);\n    const issue = IssuesManager.DeprecationIssue.DeprecationIssue.fromInspectorIssue(mockModel, details);\n    assert.isEmpty(issue);\n  });\n\n  it('deprecation issue with good untranslated details works', () => {\n    const details = createDeprecationIssueDetails('Test', 'Test', Protocol.Audits.DeprecationIssueType.Untranslated);\n    const issue = IssuesManager.DeprecationIssue.DeprecationIssue.fromInspectorIssue(mockModel, details);\n    assert.isNotEmpty(issue);\n  });\n\n  it('deprecation issue with bad untranslated details fails', () => {\n    const details = createDeprecationIssueDetails('', '', Protocol.Audits.DeprecationIssueType.Untranslated);\n    const issue = IssuesManager.DeprecationIssue.DeprecationIssue.fromInspectorIssue(mockModel, details);\n    assert.isEmpty(issue);\n  });\n});\n"]}