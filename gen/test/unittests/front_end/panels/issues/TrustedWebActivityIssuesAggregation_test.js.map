{"version":3,"file":"TrustedWebActivityIssuesAggregation_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/panels/issues/TrustedWebActivityIssuesAggregation_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Issues from '../../../../../front_end/panels/issues/issues.js';\nimport * as IssuesManager from '../../../../../front_end/models/issues_manager/issues_manager.js';\nimport type * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport {MockIssuesModel} from '../../models/issues_manager/MockIssuesModel.js';\nimport {MockIssuesManager} from '../../models/issues_manager/MockIssuesManager.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\n\ndescribe('AggregatedIssue', async () => {\n  it('aggregates two TWA issues with same violationType correctly', () => {\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const details1 = {\n      violationType: Protocol.Audits.TwaQualityEnforcementViolationType.KHttpError,\n      url: 'test.url1.com',\n      httpStatusCode: 500,\n    };\n    const issue1 = new IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue(details1);\n    const details2 = {\n      violationType: Protocol.Audits.TwaQualityEnforcementViolationType.KHttpError,\n      url: 'test.url2.com',\n      httpStatusCode: 400,\n    };\n    const issue2 = new IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue(details2);\n\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue2});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.strictEqual(issues.length, 1);\n    const violationType = [...issues[0].getTrustedWebActivityIssues()].map(r => r.details().violationType).sort();\n    assert.deepStrictEqual(violationType, [\n      Protocol.Audits.TwaQualityEnforcementViolationType.KHttpError,\n      Protocol.Audits.TwaQualityEnforcementViolationType.KHttpError,\n    ]);\n    const httpStatusCode = [...issues[0].getTrustedWebActivityIssues()].map(r => r.details().httpStatusCode).sort();\n    assert.deepStrictEqual(httpStatusCode, [400, 500]);\n    const url = [...issues[0].getTrustedWebActivityIssues()].map(r => r.details().url).sort();\n    assert.deepStrictEqual(url, ['test.url1.com', 'test.url2.com']);\n  });\n\n  it('TWA issues with different violationType do not aggregate', () => {\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const details1 = {\n      violationType: Protocol.Audits.TwaQualityEnforcementViolationType.KHttpError,\n      url: 'test.url1.com',\n      httpStatusCode: 500,\n    };\n    const issue1 = new IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue(details1);\n    const details2 = {\n      violationType: Protocol.Audits.TwaQualityEnforcementViolationType.KUnavailableOffline,\n      url: 'test.url2.com',\n    };\n    const issue2 = new IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue(details2);\n    const details3 = {\n      violationType: Protocol.Audits.TwaQualityEnforcementViolationType.KDigitalAssetLinks,\n      url: 'test.url3.com',\n    };\n    const issue3 = new IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue(details3);\n\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue2});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue3});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.strictEqual(issues.length, 3);\n    const violationType =\n        [...issues].map(r => Array.from(r.getTrustedWebActivityIssues())[0].details().violationType).sort();\n    assert.deepStrictEqual(violationType, [\n      Protocol.Audits.TwaQualityEnforcementViolationType.KDigitalAssetLinks,\n      Protocol.Audits.TwaQualityEnforcementViolationType.KHttpError,\n      Protocol.Audits.TwaQualityEnforcementViolationType.KUnavailableOffline,\n    ]);\n  });\n});\n"]}