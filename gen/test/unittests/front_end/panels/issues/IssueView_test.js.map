{"version":3,"file":"IssueView_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/panels/issues/IssueView_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4CAA4C,CAAC;AACnE,OAAO,KAAK,MAAM,MAAM,kDAAkD,CAAC;AAC3E,OAAO,KAAK,EAAE,MAAM,8CAA8C,CAAC;AACnE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,sBAAsB,EAAC,MAAM,qCAAqC,CAAC;AAC3E,OAAO,EAAC,SAAS,EAAC,MAAM,0CAA0C,CAAC;AAEnE,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,0BAA0B,CAAC,WAAW,EAAE,GAAG,EAAE;IAC3C,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,cAAc,GAAG,KAAyD,CAAC;QACjF,MAAM,KAAK,GAAG,SAAS,CAAC,oBAAoB,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAC7D,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;QAC3F,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,EAAE,EAAC,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC,CAAC;QAC7G,MAAM,WAAW,GACb,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAE,kEAAkE;QACzG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAE9B,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAChC,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,wBAAwB,EAC1E,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../../../front_end/core/host/host.js';\nimport * as Issues from '../../../../../front_end/panels/issues/issues.js';\nimport * as UI from '../../../../../front_end/ui/legacy/legacy.js';\nimport {describeWithRealConnection} from '../../helpers/RealConnection.js';\nimport {recordedMetricsContain} from '../../helpers/UserMetricsHelpers.js';\nimport {StubIssue} from '../../models/issues_manager/StubIssue.js';\n\nconst {assert} = chai;\n\ndescribeWithRealConnection('IssueView', () => {\n  it('records metrics when an issue is expanded', () => {\n    const aggregationKey = 'key' as unknown as Issues.IssueAggregator.AggregationKey;\n    const issue = StubIssue.createFromRequestIds(['id1', 'id2']);\n    const aggregatedIssue = new Issues.IssueAggregator.AggregatedIssue('code', aggregationKey);\n    aggregatedIssue.addInstance(issue);\n    const view = new Issues.IssueView.IssueView(aggregatedIssue, {title: 'Mock issue', links: [], markdown: []});\n    const treeOutline =\n        new UI.TreeOutline.TreeOutline();  // TreeElements need to be part of a TreeOutline to be expandable.\n    treeOutline.appendChild(view);\n\n    view.expand();\n\n    assert.isTrue(recordedMetricsContain(\n        Host.InspectorFrontendHostAPI.EnumeratedHistogram.IssuesPanelIssueExpanded,\n        Host.UserMetrics.IssueExpanded.Other));\n  });\n});\n"]}