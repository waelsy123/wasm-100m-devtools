{"version":3,"file":"IssueAggregator_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/panels/issues/IssueAggregator_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Issues from '../../../../../front_end/panels/issues/issues.js';\nimport type * as Common from '../../../../../front_end/core/common/common.js';\nimport * as IssuesManager from '../../../../../front_end/models/issues_manager/issues_manager.js';\nimport type * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport {StubIssue} from '../../models/issues_manager/StubIssue.js';\nimport {MockIssuesModel} from '../../models/issues_manager/MockIssuesModel.js';\nimport {MockIssuesManager} from '../../models/issues_manager/MockIssuesManager.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport {createFakeSetting, describeWithEnvironment, enableFeatureForTest} from '../../helpers/EnvironmentHelpers.js';\n\ndescribeWithEnvironment('AggregatedIssue', async () => {\n  const aggregationKey = 'key' as unknown as Issues.IssueAggregator.AggregationKey;\n  it('deduplicates network requests across issues', () => {\n    const issue1 = StubIssue.createFromRequestIds(['id1', 'id2']);\n    const issue2 = StubIssue.createFromRequestIds(['id1']);\n\n    const aggregatedIssue = new Issues.IssueAggregator.AggregatedIssue('code', aggregationKey);\n    aggregatedIssue.addInstance(issue1);\n    aggregatedIssue.addInstance(issue2);\n\n    const actualRequestIds = [...aggregatedIssue.requests()].map(r => r.requestId).sort();\n    assert.deepStrictEqual(actualRequestIds, ['id1', 'id2']);\n  });\n\n  it('deduplicates affected cookies across issues', () => {\n    const issue1 = StubIssue.createFromCookieNames(['cookie1']);\n    const issue2 = StubIssue.createFromCookieNames(['cookie2']);\n    const issue3 = StubIssue.createFromCookieNames(['cookie1', 'cookie2']);\n\n    const aggregatedIssue = new Issues.IssueAggregator.AggregatedIssue('code', aggregationKey);\n    aggregatedIssue.addInstance(issue1);\n    aggregatedIssue.addInstance(issue2);\n    aggregatedIssue.addInstance(issue3);\n\n    const actualCookieNames = [...aggregatedIssue.cookies()].map(c => c.name).sort();\n    assert.deepStrictEqual(actualCookieNames, ['cookie1', 'cookie2']);\n  });\n});\n\ndescribeWithEnvironment('IssueAggregator', async () => {\n  it('deduplicates issues with the same code', () => {\n    const issue1 = StubIssue.createFromRequestIds(['id1']);\n    const issue2 = StubIssue.createFromRequestIds(['id2']);\n\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue2});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.strictEqual(issues.length, 1);\n    const requestIds = [...issues[0].requests()].map(r => r.requestId).sort();\n    assert.deepStrictEqual(requestIds, ['id1', 'id2']);\n  });\n\n  it('deduplicates issues with the same code added before its creation', () => {\n    const issue1 = StubIssue.createFromRequestIds(['id1']);\n    const issue2 = StubIssue.createFromRequestIds(['id2']);\n    const issue1b = StubIssue.createFromRequestIds(['id1']);  // Duplicate id.\n    const issue3 = StubIssue.createFromRequestIds(['id3']);\n\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    const mockManager =\n        new MockIssuesManager([issue1b, issue3]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue2});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.strictEqual(issues.length, 1);\n    const requestIds = [...issues[0].requests()].map(r => r.requestId).sort();\n    assert.deepStrictEqual(requestIds, ['id1', 'id2', 'id3']);\n  });\n\n  it('keeps issues with different codes separate', () => {\n    const issue1 = new StubIssue('codeA', ['id1'], []);\n    const issue2 = new StubIssue('codeB', ['id1'], []);\n    const issue1b = new StubIssue('codeC', ['id1'], []);\n    const issue3 = new StubIssue('codeA', ['id1'], []);\n\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    const mockManager =\n        new MockIssuesManager([issue1b, issue3]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue2});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.strictEqual(issues.length, 3);\n    const issueCodes = issues.map(r => r.aggregationKey().toString()).sort((a, b) => a.localeCompare(b));\n    assert.deepStrictEqual(issueCodes, ['codeA', 'codeB', 'codeC']);\n  });\n\n  describe('aggregates issue kind', () => {\n    it('for a single issue', () => {\n      const issues = StubIssue.createFromIssueKinds([IssuesManager.Issue.IssueKind.Improvement]);\n\n      const mockManager = new MockIssuesManager(issues) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n\n      const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n      assert.strictEqual(aggregatedIssues.length, 1);\n      const aggregatedIssue = aggregatedIssues[0];\n      assert.strictEqual(aggregatedIssue.getKind(), IssuesManager.Issue.IssueKind.Improvement);\n    });\n\n    it('for issues of two different kinds', () => {\n      const issues = StubIssue.createFromIssueKinds([\n        IssuesManager.Issue.IssueKind.Improvement,\n        IssuesManager.Issue.IssueKind.BreakingChange,\n        IssuesManager.Issue.IssueKind.Improvement,\n      ]);\n\n      const mockManager = new MockIssuesManager(issues) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n\n      const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n      assert.strictEqual(aggregatedIssues.length, 1);\n      const aggregatedIssue = aggregatedIssues[0];\n      assert.strictEqual(aggregatedIssue.getKind(), IssuesManager.Issue.IssueKind.BreakingChange);\n    });\n\n    it('for issues of three different kinds', () => {\n      const issues = StubIssue.createFromIssueKinds([\n        IssuesManager.Issue.IssueKind.BreakingChange,\n        IssuesManager.Issue.IssueKind.PageError,\n        IssuesManager.Issue.IssueKind.Improvement,\n      ]);\n\n      const mockManager = new MockIssuesManager(issues) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n\n      const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n      assert.strictEqual(aggregatedIssues.length, 1);\n      const aggregatedIssue = aggregatedIssues[0];\n      assert.strictEqual(aggregatedIssue.getKind(), IssuesManager.Issue.IssueKind.PageError);\n    });\n  });\n});\n\ndescribeWithEnvironment('IssueAggregator', async () => {\n  it('aggregates heavy ad issues correctly', () => {\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    const details1 = {\n      resolution: Protocol.Audits.HeavyAdResolutionStatus.HeavyAdBlocked,\n      reason: Protocol.Audits.HeavyAdReason.CpuPeakLimit,\n      frame: {frameId: 'main' as Protocol.Page.FrameId},\n    };\n    const issue1 = new IssuesManager.HeavyAdIssue.HeavyAdIssue(details1, mockModel);\n    const details2 = {\n      resolution: Protocol.Audits.HeavyAdResolutionStatus.HeavyAdWarning,\n      reason: Protocol.Audits.HeavyAdReason.NetworkTotalLimit,\n      frame: {frameId: 'main' as Protocol.Page.FrameId},\n    };\n    const issue2 = new IssuesManager.HeavyAdIssue.HeavyAdIssue(details2, mockModel);\n\n    const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue2});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.strictEqual(issues.length, 1);\n    const resolutions = [...issues[0].getHeavyAdIssues()].map(r => r.details().resolution).sort();\n    assert.deepStrictEqual(resolutions, [\n      Protocol.Audits.HeavyAdResolutionStatus.HeavyAdBlocked,\n      Protocol.Audits.HeavyAdResolutionStatus.HeavyAdWarning,\n    ]);\n  });\n\n  const scriptId1 = '1' as Protocol.Runtime.ScriptId;\n\n  describe('IssueAggregator', async () => {\n    it('aggregates affected locations correctly', () => {\n      const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n      const issue1 = StubIssue.createFromAffectedLocations([{url: 'foo', lineNumber: 1, columnNumber: 1}]);\n      const issue2 = StubIssue.createFromAffectedLocations([\n        {url: 'foo', lineNumber: 1, columnNumber: 1},\n        {url: 'foo', lineNumber: 1, columnNumber: 12},\n      ]);\n      const issue3 = StubIssue.createFromAffectedLocations([\n        {url: 'bar', lineNumber: 1, columnNumber: 1},\n        {url: 'baz', lineNumber: 1, columnNumber: 1},\n      ]);\n      const issue4 = StubIssue.createFromAffectedLocations([\n        {url: 'bar', lineNumber: 1, columnNumber: 1, scriptId: scriptId1},\n        {url: 'foo', lineNumber: 2, columnNumber: 1},\n      ]);\n\n      const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n      for (const issue of [issue1, issue2, issue3, issue4]) {\n        mockManager.dispatchEventToListeners(\n            IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue: issue});\n      }\n\n      const issues = Array.from(aggregator.aggregatedIssues());\n      assert.strictEqual(issues.length, 1);\n      const locations = [...issues[0].sources()].sort((x, y) => JSON.stringify(x).localeCompare(JSON.stringify(y)));\n      assert.deepStrictEqual(locations, [\n        {url: 'bar', lineNumber: 1, columnNumber: 1, scriptId: scriptId1},\n        {url: 'bar', lineNumber: 1, columnNumber: 1},\n        {url: 'baz', lineNumber: 1, columnNumber: 1},\n        {url: 'foo', lineNumber: 1, columnNumber: 1},\n        {url: 'foo', lineNumber: 1, columnNumber: 12},\n        {url: 'foo', lineNumber: 2, columnNumber: 1},\n      ]);\n    });\n  });\n});\n\ndescribeWithEnvironment('IssueAggregator', () => {\n  let hideIssueByCodeSetting: Common.Settings.Setting<IssuesManager.IssuesManager.HideIssueMenuSetting>;\n  let showThirdPartyIssuesSetting: Common.Settings.Setting<boolean>;\n  let issuesManager: IssuesManager.IssuesManager.IssuesManager;\n  let mockModel: SDK.IssuesModel.IssuesModel;\n  let aggregator: Issues.IssueAggregator.IssueAggregator;\n\n  beforeEach(() => {\n    enableFeatureForTest('hideIssuesFeature');\n    hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    showThirdPartyIssuesSetting = createFakeSetting('third party flag', false);\n    issuesManager = new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    issuesManager.modelAdded(mockModel);\n    aggregator = new Issues.IssueAggregator.IssueAggregator(issuesManager);\n  });\n\n  it('aggregates hidden issues correctly', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 2);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 2);\n  });\n\n  it('aggregates hidden issues correctly on updating settings', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 3);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 1);\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 2);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 2);\n  });\n\n  it('aggregates hidden issues correctly when issues get unhidden', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 4);\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 0);\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Unhidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 1);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 3);\n  });\n\n  it('aggregates hidden issues correctly when all issues get unhidden', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 4);\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 0);\n\n    issuesManager.unhideAllIssues();\n\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 4);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 0);\n  });\n});\n"]}