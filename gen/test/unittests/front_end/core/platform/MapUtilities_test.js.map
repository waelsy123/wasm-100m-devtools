{"version":3,"file":"MapUtilities_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/platform/MapUtilities_test.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,oDAAoD,CAAC;AAE/E,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,mGAAmG,EAAE,GAAG,EAAE;YAC3G,MAAM,KAAK,GAAyC;gBAClD,CAAC,GAAG,EAAE,CAAC,CAAC;gBACR,CAAC,GAAG,EAAE,CAAC,CAAC;gBACR,CAAC,GAAG,EAAE,CAAC,CAAC;gBACR,CAAC,GAAG,EAAE,CAAC,CAAC;aACT,CAAC;YACF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;YAE3B,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACnD,KAAK,MAAM,CAAC,EAAE,KAAK,CAAC,IAAI,KAAK,EAAE;gBAC7B,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAClE;YAED,SAAS,OAAO,CAAC,WAAmB;gBAClC,MAAM,IAAI,GAAG,IAAI,GAAG,EAAU,CAAC;gBAC/B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,KAAK,EAAE;oBAChC,IAAI,KAAK,KAAK,WAAW,EAAE;wBACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBACf;iBACF;gBACD,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../../front_end/core/platform/platform.js';\n\nconst {assert} = chai;\n\ndescribe('MapUtilities', () => {\n  describe('inverse', () => {\n    it('inverts the map returning a multimap with the map\\'s values as keys and the map\\'s keys as values', () => {\n      const pairs: readonly(readonly[string, number])[] = [\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n        ['d', 1],\n      ];\n      const map = new Map(pairs);\n\n      const inverse = Platform.MapUtilities.inverse(map);\n      for (const [, value] of pairs) {\n        assert.sameMembers([...inverse.get(value)], [...getKeys(value)]);\n      }\n\n      function getKeys(lookupValue: number): Set<string> {\n        const keys = new Set<string>();\n        for (const [key, value] of pairs) {\n          if (value === lookupValue) {\n            keys.add(key);\n          }\n        }\n        return keys;\n      }\n    });\n  });\n});\n"]}