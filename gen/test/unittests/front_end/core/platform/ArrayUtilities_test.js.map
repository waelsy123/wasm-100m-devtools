{"version":3,"file":"ArrayUtilities_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/platform/ArrayUtilities_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../../front_end/core/platform/platform.js';\n\nconst {assert} = chai;\n\nfunction comparator(a: number, b: number): number {\n  return a < b ? -1 : (a > b ? 1 : 0);\n}\n\ndescribe('ArrayUtilities', () => {\n  describe('removeElement', () => {\n    it('removes elements', () => {\n      const testCases = [\n        {input: [], expectedFirstOnlyTrue: [], expectedFirstOnlyFalse: []},\n        {input: [1], expectedFirstOnlyTrue: [1], expectedFirstOnlyFalse: [1]},\n        {\n          input: [1, 2, 3, 4, 5, 4, 3, 2, 1],\n          expectedFirstOnlyTrue: [1, 3, 4, 5, 4, 3, 2, 1],\n          expectedFirstOnlyFalse: [1, 3, 4, 5, 4, 3, 1],\n        },\n        {input: [2, 2, 2, 2, 2], expectedFirstOnlyTrue: [2, 2, 2, 2], expectedFirstOnlyFalse: []},\n        {input: [2, 2, 2, 1, 2, 2, 3, 2], expectedFirstOnlyTrue: [2, 2, 1, 2, 2, 3, 2], expectedFirstOnlyFalse: [1, 3]},\n      ];\n\n      for (const testCase of testCases) {\n        const actualFirstOnlyTrue = [...testCase.input];\n\n        Platform.ArrayUtilities.removeElement(actualFirstOnlyTrue, 2, true);\n        assert.deepStrictEqual(actualFirstOnlyTrue, testCase.expectedFirstOnlyTrue, 'Removing firstOnly (true) failed');\n\n        const actualFirstOnlyFalse = [...testCase.input];\n        Platform.ArrayUtilities.removeElement(actualFirstOnlyFalse, 2, false);\n        assert.deepStrictEqual(\n            actualFirstOnlyFalse, testCase.expectedFirstOnlyFalse, 'Removing firstOnly (false) failed');\n      }\n    });\n  });\n\n  const fixtures = [\n    [],\n    [1],\n    [2, 1],\n    [6, 4, 2, 7, 10, 15, 1],\n    [10, 44, 3, 6, 56, 66, 10, 55, 32, 56, 2, 5],\n  ];\n  for (let i = 0; i < fixtures.length; i++) {\n    const fixture = fixtures[i];\n\n    it(`sorts ranges, fixture ${i}`, () => {\n      for (let left = 0, l = fixture.length - 1; left < l; ++left) {\n        for (let right = left, r = fixture.length; right < r; ++right) {\n          for (let first = left; first <= right; ++first) {\n            for (let count = 1, k = right - first + 1; count <= k; ++count) {\n              const actual = fixture.slice(0);\n              Platform.ArrayUtilities.sortRange(actual, comparator, left, right, first, first + count - 1);\n              assert.deepStrictEqual(\n                  fixture.slice(0, left), actual.slice(0, left), 'left ' + left + ' ' + right + ' ' + count);\n              assert.deepStrictEqual(\n                  fixture.slice(right + 1), actual.slice(right + 1), 'right ' + left + ' ' + right + ' ' + count);\n\n              const middle = fixture.slice(left, right + 1);\n              middle.sort(comparator);\n              assert.deepStrictEqual(\n                  middle.slice(first - left, first - left + count), actual.slice(first, first + count),\n                  'sorted ' + left + ' ' + right + ' ' + first + ' ' + count);\n\n              const actualRest = actual.slice(first + count, right + 1);\n              actualRest.sort(comparator);\n              assert.deepStrictEqual(\n                  middle.slice(first - left + count), actualRest,\n                  'unsorted ' + left + ' ' + right + ' ' + first + ' ' + count);\n            }\n          }\n        }\n      }\n    });\n  }\n  describe('binaryIndexOf', () => {\n    it('calculates the correct binary index', () => {\n      const fixtures = [\n        [],\n        [1],\n        [1, 10],\n        [1, 10, 11, 12, 13, 14, 100],\n        [-100, -50, 0, 50, 100],\n        [-100, -14, -13, -12, -11, -10, -1],\n      ];\n\n      function testArray(array: number[]) {\n        function comparator(a: number, b: number) {\n          return a < b ? -1 : (a > b ? 1 : 0);\n        }\n\n        for (let i = -100; i <= 100; ++i) {\n          const reference = array.indexOf(i);\n          const actual = Platform.ArrayUtilities.binaryIndexOf(array, i, comparator);\n          assert.strictEqual(reference, actual);\n        }\n      }\n\n      for (const fixture of fixtures) {\n        testArray(fixture);\n      }\n    });\n  });\n  describe('merge and intersect', () => {\n    it('orders merge intersect', () => {\n      function comparator(a: number, b: number) {\n        return a - b;\n      }\n\n      function count(a: number[], x: number) {\n        return Platform.ArrayUtilities.upperBound(a, x, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n            Platform.ArrayUtilities.lowerBound(a, x, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n      }\n\n      function testAll(a: number[], b: number[]) {\n        testOperation(a, b, Platform.ArrayUtilities.mergeOrdered(a, b, comparator), Math.max, 'U');\n        testOperation(a, b, Platform.ArrayUtilities.intersectOrdered(a, b, comparator), Math.min, 'x');\n      }\n\n      function testOperation(\n          a: number[], b: number[], actual: number[], checkOperation: (...values: number[]) => number, opName: string) {\n        const allValues = a.concat(b).concat(actual);\n        let expectedCount: number;\n        let actualCount: number;\n\n        for (let i = 0; i < allValues.length; ++i) {\n          const value = allValues[i];\n          expectedCount = checkOperation(count(a, value), count(b, value));\n          actualCount = count(actual, value);\n          assert.strictEqual(\n              expectedCount, actualCount,\n              'Incorrect result for value: ' + value + ' at [' + a + '] ' + opName + ' [' + b + '] -> [' + actual +\n                  ']');\n        }\n\n        const shallowCopy = [...actual];\n        assert.deepStrictEqual(actual.sort(), shallowCopy, 'Result array is ordered');\n      }\n\n      const fixtures = new Map([\n        [[], []],\n        [[1], []],\n        [[1, 2, 2, 2, 3], []],\n        [[4, 5, 5, 8, 8], [1, 1, 1, 2, 6]],\n        [[1, 2, 2, 2, 2, 3, 3, 4], [2, 2, 2, 3, 3, 3, 3]],\n        [[1, 2, 3, 4, 5], [1, 2, 3]],\n      ]);\n\n      for (const [a, b] of fixtures) {\n        testAll(a, b);\n        testAll(b, a);\n      }\n    });\n  });\n\n  describe('calculates bounds', () => {\n    it('calculates the lower bound', () => {\n      const fixtures = [\n        [],\n        [1],\n        [-1, -1, 0, 0, 0, 0, 2, 3, 4, 4, 4, 7, 9, 9, 9],\n      ];\n\n      function testArray(array: number[], useComparator: boolean) {\n        function comparator(a: number, b: number) {\n          return a < b ? -1 : (a > b ? 1 : 0);\n        }\n\n        for (let value = -2; value <= 12; ++value) {\n          const index = useComparator ?\n              Platform.ArrayUtilities.lowerBound(array, value, comparator) :\n              Platform.ArrayUtilities.lowerBound(array, value, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n          assert.isTrue(0 <= index && index <= array.length, 'index is not within bounds');\n          assert.isTrue(index === 0 || array[index - 1] < value, 'array[index - 1] >= value');\n          assert.isTrue(index === array.length || array[index] >= value, 'array[index] < value');\n        }\n      }\n\n      for (const fixture of fixtures) {\n        testArray(fixture, false);\n        testArray(fixture, true);\n      }\n    });\n\n    it('calculates the upper bound', () => {\n      const fixtures = [\n        [],\n        [1],\n        [-1, -1, 0, 0, 0, 0, 2, 3, 4, 4, 4, 7, 9, 9, 9],\n      ];\n\n      function testArray(array: number[], useComparator: boolean) {\n        function comparator(a: number, b: number) {\n          return a < b ? -1 : (a > b ? 1 : 0);\n        }\n\n        for (let value = -2; value <= 12; ++value) {\n          const index = useComparator ?\n              Platform.ArrayUtilities.upperBound(array, value, comparator) :\n              Platform.ArrayUtilities.upperBound(array, value, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n          assert.isTrue(0 <= index && index <= array.length, 'index is out of bounds');\n          assert.isTrue(index === 0 || array[index - 1] <= value, 'array[index - 1] > value');\n          assert.isTrue(index === array.length || array[index] > value, 'array[index] <= value');\n        }\n      }\n\n      for (const fixture of fixtures) {\n        testArray(fixture, false);\n        testArray(fixture, true);\n      }\n    });\n  });\n});\n"]}