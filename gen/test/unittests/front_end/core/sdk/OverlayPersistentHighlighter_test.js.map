{"version":3,"file":"OverlayPersistentHighlighter_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/sdk/OverlayPersistentHighlighter_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\nimport type * as SDKModule from '../../../../../front_end/core/sdk/sdk.js';\nimport type * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport {describeWithEnvironment} from '../../helpers/EnvironmentHelpers.js';\n\ndescribeWithEnvironment('OverlayColorGenerator', () => {\n  let SDK: typeof SDKModule;\n  before(async () => {\n    SDK = await import('../../../../../front_end/core/sdk/sdk.js');\n  });\n\n  const mockModel = {\n    getDOMModel() {\n      return {\n        nodeForId() {\n          return true;\n        },\n      };\n    },\n    target() {\n      return {\n        overlayAgent() {\n          return {\n            invoke_setShowGridOverlays() {},\n            invoke_setShowFlexOverlays() {},\n            invoke_setShowScrollSnapOverlays() {},\n            invoke_setShowContainerQueryOverlays() {},\n            invoke_setShowIsolatedElements() {},\n          };\n        },\n      };\n    },\n    setShowViewportSizeOnResize() {},\n  };\n\n  const nodeId = 1 as Protocol.DOM.NodeId;\n\n  it('is able to highlight flexbox elements', () => {\n    const highlighter = new SDK.OverlayPersistentHighlighter.OverlayPersistentHighlighter(mockModel);\n    highlighter.highlightFlexInOverlay(nodeId);\n    assert(highlighter.isFlexHighlighted(nodeId));\n    assert(!highlighter.isGridHighlighted(nodeId));\n    assert(highlighter.colorOfFlex(nodeId) instanceof Common.Color.Color);\n    highlighter.hideFlexInOverlay(nodeId);\n    assert(!highlighter.isFlexHighlighted(nodeId));\n  });\n\n  it('is able to highlight grid elements', () => {\n    const highlighter = new SDK.OverlayPersistentHighlighter.OverlayPersistentHighlighter(mockModel);\n    highlighter.highlightGridInOverlay(nodeId);\n    assert(highlighter.isGridHighlighted(nodeId));\n    assert(!highlighter.isFlexHighlighted(nodeId));\n    assert(highlighter.colorOfGrid(nodeId) instanceof Common.Color.Color);\n    highlighter.hideGridInOverlay(nodeId);\n    assert(!highlighter.isGridHighlighted(nodeId));\n  });\n\n  it('is able to highlight scroll snap elements', () => {\n    const highlighter = new SDK.OverlayPersistentHighlighter.OverlayPersistentHighlighter(mockModel);\n    highlighter.highlightScrollSnapInOverlay(nodeId);\n    assert(highlighter.isScrollSnapHighlighted(nodeId));\n    assert(!highlighter.isFlexHighlighted(nodeId));\n    assert(!highlighter.isGridHighlighted(nodeId));\n    highlighter.hideScrollSnapInOverlay(nodeId);\n    assert(!highlighter.isScrollSnapHighlighted(nodeId));\n  });\n\n  it('is able to highlight container query elements', () => {\n    const highlighter = new SDK.OverlayPersistentHighlighter.OverlayPersistentHighlighter(mockModel);\n    highlighter.highlightContainerQueryInOverlay(nodeId);\n    assert(highlighter.isContainerQueryHighlighted(nodeId));\n    assert(!highlighter.isFlexHighlighted(nodeId));\n    assert(!highlighter.isGridHighlighted(nodeId));\n    assert(!highlighter.isScrollSnapHighlighted(nodeId));\n    highlighter.hideContainerQueryInOverlay(nodeId);\n    assert(!highlighter.isContainerQueryHighlighted(nodeId));\n  });\n\n  it('is able to highlight isolated elements', () => {\n    const highlighter = new SDK.OverlayPersistentHighlighter.OverlayPersistentHighlighter(mockModel);\n    highlighter.highlightIsolatedElementInOverlay(nodeId);\n    assert(highlighter.isIsolatedElementHighlighted(nodeId));\n    assert(!highlighter.isFlexHighlighted(nodeId));\n    assert(!highlighter.isGridHighlighted(nodeId));\n    assert(!highlighter.isScrollSnapHighlighted(nodeId));\n    assert(!highlighter.isContainerQueryHighlighted(nodeId));\n    highlighter.hideIsolatedElementInOverlay(nodeId);\n    assert(!highlighter.isIsolatedElementHighlighted(nodeId));\n  });\n});\n"]}