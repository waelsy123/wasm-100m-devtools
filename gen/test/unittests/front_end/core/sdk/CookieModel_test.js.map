{"version":3,"file":"CookieModel_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/sdk/CookieModel_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport {createTarget} from '../../helpers/EnvironmentHelpers.js';\nimport {describeWithMockConnection, setMockConnectionResponseHandler} from '../../helpers/MockConnection.js';\nimport type * as SDKModule from '../../../../../front_end/core/sdk/sdk.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\n\ndescribeWithMockConnection('CookieModel', () => {\n  let SDK: typeof SDKModule;\n  before(async () => {\n    SDK = await import('../../../../../front_end/core/sdk/sdk.js');\n  });\n\n  it('can retrieve cookies', async () => {\n    // CDP Connection mock: for Network.getCookies, respond with a single cookie.\n    setMockConnectionResponseHandler('Network.getCookies', () => {\n      return {\n        cookies: [{\n          domain: '.example.com',\n          name: 'name',\n          path: '/test',\n          size: 23,\n          value: 'value',\n          expires: 42,\n          httpOnly: false,\n          secure: false,\n          session: true,\n          sameParty: false,\n          priority: Protocol.Network.CookiePriority.Medium,\n          sourcePort: 80,\n          sourceScheme: Protocol.Network.CookieSourceScheme.NonSecure,\n          partitionKey: 'https://example.net',\n        }],\n      };\n    });\n\n    const target = createTarget();\n    const model = new SDK.CookieModel.CookieModel(target);\n    const cookies = await model.getCookies(['https://www.google.com']);\n    assert.isArray(cookies);\n    assert.lengthOf(cookies, 1);\n    assert.strictEqual(cookies[0].domain(), '.example.com');\n    assert.strictEqual(cookies[0].name(), 'name');\n    assert.strictEqual(cookies[0].path(), '/test');\n    assert.strictEqual(cookies[0].size(), 23);\n    assert.strictEqual(cookies[0].value(), 'value');\n    assert.strictEqual(cookies[0].expires(), 42000);\n    assert.strictEqual(cookies[0].httpOnly(), false);\n    assert.strictEqual(cookies[0].secure(), false);\n    assert.strictEqual(cookies[0].priority(), Protocol.Network.CookiePriority.Medium);\n    assert.strictEqual(cookies[0].sourcePort(), 80);\n    assert.strictEqual(cookies[0].sourceScheme(), Protocol.Network.CookieSourceScheme.NonSecure);\n    assert.strictEqual(cookies[0].partitionKey(), 'https://example.net');\n  });\n});\n"]}