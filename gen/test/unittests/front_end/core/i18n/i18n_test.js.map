{"version":3,"file":"i18n_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/i18n/i18n_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as i18n from '../../../../../front_end/core/i18n/i18n.js';\nimport * as i18nRaw from '../../../../../front_end/third_party/i18n/i18n.js';\n\nimport {assertElement} from '../../helpers/DOMHelpers.js';\n\ndescribe('serializeUIString', () => {\n  it('serializes strings without placeholders', () => {\n    const output = i18n.i18n.serializeUIString('foo');\n    assert.deepEqual(output, JSON.stringify({\n      string: 'foo',\n      values: {},\n    }));\n  });\n\n  it('serializes strings with placeholder values', () => {\n    const output = i18n.i18n.serializeUIString('a string', {PH1: 'value1', PH2: 'value2'});\n    assert.deepEqual(output, JSON.stringify({\n      string: 'a string',\n      values: {PH1: 'value1', PH2: 'value2'},\n    }));\n  });\n});\n\ndescribe('deserializeUIString', () => {\n  it('returns an empty object for an empty string input', () => {\n    const output = i18n.i18n.deserializeUIString('');\n    assert.deepEqual(output, {string: '', values: {}});\n  });\n\n  it('deserializes correctly for a string with no placeholders', () => {\n    const output = i18n.i18n.deserializeUIString('{\"string\":\"foo\", \"values\":{}}');\n    assert.deepEqual(output, {string: 'foo', values: {}});\n  });\n\n  it('deserializes correctly for a string with placeholders', () => {\n    const output = i18n.i18n.deserializeUIString('{\"string\":\"foo\", \"values\":{\"PH1\": \"value1\"}}');\n    assert.deepEqual(output, {string: 'foo', values: {PH1: 'value1'}});\n  });\n});\n\ndescribe('serialize/deserialize round-trip', () => {\n  it('returns a matching input/output', () => {\n    const inputString = 'a string';\n    const serializedString = i18n.i18n.serializeUIString(inputString);\n    const deserializedString = i18n.i18n.deserializeUIString(serializedString);\n    assert.deepEqual(deserializedString, {\n      string: inputString,\n      values: {},\n    });\n  });\n});\n\ndescribe('getLocalizedLanguageRegion', () => {\n  function createMockDevToolsLocale(locale: string): i18n.DevToolsLocale.DevToolsLocale {\n    return {locale, forceFallbackLocale: () => {}} as i18n.DevToolsLocale.DevToolsLocale;\n  }\n\n  it('build the correct language/region string', () => {\n    assert.strictEqual(\n        i18n.i18n.getLocalizedLanguageRegion('de-AT', createMockDevToolsLocale('en-US')),\n        'German (Austria) - Deutsch (Österreich)');\n    assert.strictEqual(\n        i18n.i18n.getLocalizedLanguageRegion('de', createMockDevToolsLocale('en-US')), 'German - Deutsch');\n    assert.strictEqual(\n        i18n.i18n.getLocalizedLanguageRegion('en-US', createMockDevToolsLocale('de')), 'Englisch (USA) - English (US)');\n  });\n\n  it('uses english for the target locale if the languages match', () => {\n    assert.strictEqual(\n        i18n.i18n.getLocalizedLanguageRegion('de-AT', createMockDevToolsLocale('de')),\n        'Deutsch (Österreich) - German (Austria)');\n    assert.strictEqual(i18n.i18n.getLocalizedLanguageRegion('de', createMockDevToolsLocale('de')), 'Deutsch - German');\n  });\n});\n\ndescribe('getFormatLocalizedString', () => {\n  let i18nInstance: i18nRaw.I18n.I18n;\n  beforeEach(() => {\n    i18nInstance = new i18nRaw.I18n.I18n();\n    i18nInstance.registerLocaleData('en-US', {});  // Always fall back to UIStrings.\n  });\n\n  it('returns an HTML element', () => {\n    const uiStrings = {simple: 'a simple message'};\n    const registeredStrings = i18nInstance.registerFileStrings('test.ts', uiStrings);\n\n    const messageElement = i18n.i18n.getFormatLocalizedString(registeredStrings, uiStrings.simple, {});\n\n    assertElement(messageElement, HTMLElement);\n    assert.strictEqual(messageElement.innerText, 'a simple message');\n  });\n\n  it('nests HTML placeholders in the message element', () => {\n    const uiStrings = {placeholder: 'a message with a {PH1} placeholder'};\n    const registeredStrings = i18nInstance.registerFileStrings('test.ts', uiStrings);\n    const placeholder = document.createElement('span');\n    placeholder.innerText = 'very pretty';\n\n    const messageElement =\n        i18n.i18n.getFormatLocalizedString(registeredStrings, uiStrings.placeholder, {PH1: placeholder});\n\n    assertElement(messageElement, HTMLElement);\n    assert.strictEqual(messageElement.innerHTML, 'a message with a <span>very pretty</span> placeholder');\n  });\n\n  it('nests string placeholders in the message element', () => {\n    const uiStrings = {placeholder: 'a message with a {PH1} placeholder'};\n    const registeredStrings = i18nInstance.registerFileStrings('test.ts', uiStrings);\n\n    const messageElement =\n        i18n.i18n.getFormatLocalizedString(registeredStrings, uiStrings.placeholder, {PH1: 'somewhat nice'});\n\n    assertElement(messageElement, HTMLElement);\n    assert.strictEqual(messageElement.innerHTML, 'a message with a somewhat nice placeholder');\n  });\n});\n"]}