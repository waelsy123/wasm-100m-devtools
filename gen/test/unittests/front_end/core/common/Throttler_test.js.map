{"version":3,"file":"Throttler_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/common/Throttler_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,KAAK,MAAM,MAAM,gDAAgD,CAAC;AAEzE,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;AAE7C,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,IAAI,MAAM,GAAG,gBAAgB,CAAC;QAE9B,KAAK,UAAU,UAAU;YACvB,MAAM,GAAG,WAAW,CAAC;QACvB,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,WAAW,GAAG,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACzD,KAAK,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE;YACzB,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,EAAE,qCAAqC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,gBAAgB,EAAE,qCAAqC,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,IAAI,MAAM,GAAG,gBAAgB,CAAC;QAE9B,KAAK,UAAU,UAAU;YACvB,MAAM,GAAG,aAAa,CAAC;QACzB,CAAC;QAED,KAAK,UAAU,UAAU;YACvB,MAAM,GAAG,aAAa,CAAC;QACzB,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,WAAW,GAAG,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACzD,KAAK,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC1C,KAAK,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE;YACzB,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,aAAa,EAAE,qCAAqC,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,gBAAgB,EAAE,qCAAqC,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\n\nconst Throttler = Common.Throttler.Throttler;\n\ndescribe('Throttler class', () => {\n  it('is able to schedule a process as soon as possible', () => {\n    let result = 'original value';\n\n    async function assignVar1() {\n      result = 'new value';\n    }\n\n    const throttler = new Throttler(10);\n    const promiseTest = throttler.schedule(assignVar1, true);\n    void promiseTest.then(() => {\n      assert.strictEqual(result, 'new value', 'process was not scheduled correctly');\n    });\n\n    assert.strictEqual(result, 'original value', 'process was not scheduled correctly');\n  });\n\n  it('is able to schedule two processes as soon as possible', () => {\n    let result = 'original value';\n\n    async function assignVar1() {\n      result = 'new value 1';\n    }\n\n    async function assignVar2() {\n      result = 'new value 2';\n    }\n\n    const throttler = new Throttler(10);\n    const promiseTest = throttler.schedule(assignVar1, true);\n    void throttler.schedule(assignVar2, true);\n    void promiseTest.then(() => {\n      assert.strictEqual(result, 'new value 2', 'process was not scheduled correctly');\n    });\n\n    assert.strictEqual(result, 'original value', 'process was not scheduled correctly');\n  });\n});\n"]}