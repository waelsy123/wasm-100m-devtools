{"version":3,"file":"Settings_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/common/Settings_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\n\nconst SettingsStorage = Common.Settings.SettingsStorage;\n\nclass MockStore implements Common.Settings.SettingsBackingStore {\n  #store = new Map();\n  register() {\n  }\n  set(key: string, value: string) {\n    this.#store.set(key, value);\n  }\n  get(key: string) {\n    return this.#store.get(key);\n  }\n  remove(key: string) {\n    this.#store.delete(key);\n  }\n  clear() {\n    this.#store.clear();\n  }\n}\n\ndescribe('SettingsStorage class', () => {\n  it('is able to set a name', () => {\n    const settingsStorage = new SettingsStorage({});\n    settingsStorage.set('Test Name', 'Test Value');\n    assert.strictEqual(settingsStorage.get('Test Name'), 'Test Value', 'Name was not retrieve correctly');\n  });\n\n  it('is able to check if a name that it has exists', () => {\n    const settingsStorage = new SettingsStorage({});\n    settingsStorage.set('Test Name', 'Test Value');\n    assert.isTrue(settingsStorage.has('Test Name'), 'the class should have that name');\n  });\n\n  it('is able to check if a name that it does not have exists', () => {\n    const settingsStorage = new SettingsStorage({});\n    assert.isFalse(settingsStorage.has('Test Name'), 'the class should not have that name');\n  });\n\n  it('is able to remove a name', () => {\n    const settingsStorage = new SettingsStorage({});\n    settingsStorage.set('Test Name', 'Test Value');\n    settingsStorage.remove('Test Name');\n    assert.isFalse(settingsStorage.has('Test Name'), 'the class should not have that name');\n  });\n\n  it('is able to remove all names', () => {\n    const settingsStorage = new SettingsStorage({});\n    settingsStorage.set('Test Name 1', 'Test Value 1');\n    settingsStorage.set('Test Name 2', 'Test Value 2');\n    settingsStorage.removeAll();\n    assert.isFalse(settingsStorage.has('Test Name 1'), 'the class should not have any names');\n    assert.isFalse(settingsStorage.has('Test Name 2'), 'the class should not have any names');\n  });\n\n  describe('forceGet', () => {\n    it('returns the value of the backing store, not the cached one', async () => {\n      const mockStore = new MockStore();\n      const settingsStorage = new SettingsStorage({}, mockStore);\n      settingsStorage.set('test', 'value');\n\n      mockStore.set('test', 'changed');\n\n      assert.strictEqual(await settingsStorage.forceGet('test'), 'changed');\n      assert.strictEqual(await settingsStorage.forceGet('test'), 'changed');\n    });\n    it('updates the cached value of a SettingsStorage', async () => {\n      const mockStore = new MockStore();\n      const settingsStorage = new SettingsStorage({}, mockStore);\n      settingsStorage.set('test', 'value');\n      mockStore.set('test', 'changed');\n      assert.strictEqual(settingsStorage.get('test'), 'value');\n\n      await settingsStorage.forceGet('test');\n\n      assert.strictEqual(settingsStorage.get('test'), 'changed');\n    });\n    it('leaves the cached value alone if the backing store has the same value', async () => {\n      const mockStore = new MockStore();\n      const settingsStorage = new SettingsStorage({}, mockStore);\n\n      mockStore.set('test', 'value');\n      settingsStorage.set('test', 'value');\n\n      assert.strictEqual(mockStore.get('test'), 'value');\n      assert.strictEqual(await settingsStorage.forceGet('test'), 'value');\n      assert.strictEqual(mockStore.get('test'), 'value');\n      assert.strictEqual(await settingsStorage.forceGet('test'), 'value');\n    });\n  });\n});\n\ndescribe('Settings instance', () => {\n  afterEach(() => {\n    Common.Settings.Settings.removeInstance();\n    Common.Settings.resetSettings();  // Clear SettingsRegistrations.\n  });\n\n  it('can be instantiated in a test', () => {\n    const dummyStorage = new SettingsStorage({});\n\n    const settings = Common.Settings.Settings.instance(\n        {forceNew: true, syncedStorage: dummyStorage, globalStorage: dummyStorage, localStorage: dummyStorage});\n\n    assert.isOk(settings);\n  });\n\n  it('throws when constructed without storage', () => {\n    assert.throws(() => Common.Settings.Settings.instance());\n    assert.throws(\n        () => Common.Settings.Settings.instance(\n            {forceNew: true, syncedStorage: null, globalStorage: null, localStorage: null}));\n  });\n\n  it('stores synced settings in the correct storage', () => {\n    const syncedStorage = new SettingsStorage({});\n    const dummyStorage = new SettingsStorage({});\n    Common.Settings.registerSettingExtension({\n      settingName: 'staticSyncedSetting',\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: false,\n      storageType: Common.Settings.SettingStorageType.Synced,\n    });\n    const settings = Common.Settings.Settings.instance(\n        {forceNew: true, syncedStorage, globalStorage: dummyStorage, localStorage: dummyStorage});\n\n    const dynamicSetting: Common.Settings.Setting<string> =\n        settings.createSetting('dynamicSyncedSetting', 'default val', Common.Settings.SettingStorageType.Synced);\n    dynamicSetting.set('foo value');\n    const staticSetting: Common.Settings.Setting<boolean> = settings.moduleSetting('staticSyncedSetting');\n    staticSetting.set(true);\n\n    assert.isFalse(dummyStorage.has('dynamicSyncedSetting'));\n    assert.isFalse(dummyStorage.has('staticSyncedSetting'));\n    assert.strictEqual(syncedStorage.get('dynamicSyncedSetting'), '\"foo value\"');\n    assert.strictEqual(syncedStorage.get('staticSyncedSetting'), 'true');\n  });\n\n  it('registers settings with the backing store when creating them', () => {\n    const registeredSettings = new Set<string>();\n    const mockBackingStore: Common.Settings.SettingsBackingStore = {\n      ...Common.Settings.NOOP_STORAGE,\n      register: (name: string) => registeredSettings.add(name),\n    };\n    const storage = new SettingsStorage({}, mockBackingStore, '__prefix__.');\n    Common.Settings.registerSettingExtension({\n      settingName: 'staticGlobalSetting',\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: false,\n      storageType: Common.Settings.SettingStorageType.Global,\n    });\n\n    const settings = Common.Settings.Settings.instance(\n        {forceNew: true, syncedStorage: storage, globalStorage: storage, localStorage: storage});\n    settings.createSetting('dynamicLocalSetting', 42, Common.Settings.SettingStorageType.Local);\n    settings.createSetting('dynamicSyncedSetting', 'foo', Common.Settings.SettingStorageType.Synced);\n\n    assert.isTrue(registeredSettings.has('__prefix__.staticGlobalSetting'));\n    assert.isTrue(registeredSettings.has('__prefix__.dynamicLocalSetting'));\n    assert.isTrue(registeredSettings.has('__prefix__.dynamicSyncedSetting'));\n  });\n\n  describe('forceGet', () => {\n    it('triggers a setting changed event in case the value in the backing store got updated and we update the cached value',\n       async () => {\n         const mockStore = new MockStore();\n         const settingsStorage = new SettingsStorage({}, mockStore);\n         mockStore.set('test', '\"old\"');\n         const settings = Common.Settings.Settings.instance({\n           forceNew: true,\n           syncedStorage: settingsStorage,\n           globalStorage: settingsStorage,\n           localStorage: settingsStorage,\n         });\n         const testSetting: Common.Settings.Setting<string> =\n             settings.createSetting('test', 'default val', Common.Settings.SettingStorageType.Global);\n         const changes: string[] = [];\n         testSetting.addChangeListener((event: Common.EventTarget.EventTargetEvent<string>) => {\n           changes.push(event.data);\n         });\n         mockStore.set('test', '\"new\"');\n         assert.strictEqual(await testSetting.forceGet(), 'new');\n         assert.deepEqual(changes, ['new']);\n         assert.strictEqual(mockStore.get('test'), '\"new\"');\n         assert.strictEqual(await settingsStorage.forceGet('test'), '\"new\"');\n         assert.strictEqual(await testSetting.forceGet(), 'new');\n       });\n  });\n});\n"]}