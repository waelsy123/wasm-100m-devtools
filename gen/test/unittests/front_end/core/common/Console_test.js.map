{"version":3,"file":"Console_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/common/Console_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\n\nconst Console = Common.Console.Console;\nconst Events = Common.Console.Events;\nconst MessageLevel = Common.Console.MessageLevel;\n\ndescribe('Console', () => {\n  let consoleImpl: Common.Console.Console;\n  beforeEach(() => {\n    consoleImpl = Console.instance({forceNew: true});\n  });\n\n  it('adds messages', () => {\n    consoleImpl.addMessage('Foo', MessageLevel.Info, true);\n    const messages = consoleImpl.messages();\n    assert.strictEqual(messages.length, 1);\n    assert.strictEqual(messages[0].text, 'Foo');\n  });\n\n  it('adds handles messages of all types', () => {\n    const messageTypes = new Map<Common.Console.MessageLevel, string>([\n      [MessageLevel.Info, 'log'],\n      [MessageLevel.Warning, 'warn'],\n      [MessageLevel.Error, 'error'],\n    ]);\n\n    for (const [type, method] of messageTypes) {\n      consoleImpl = Console.instance({forceNew: true});\n\n      // Dispatch the message of the appropriate type.\n      // @ts-ignore\n      consoleImpl[method](type);\n\n      // Now read the message back and check it.\n      const messages = consoleImpl.messages();\n      assert.strictEqual(messages.length, 1);\n      assert.strictEqual(messages[0].text, type);\n      assert.strictEqual(messages[0].level, type);\n    }\n  });\n\n  it('stores messages', () => {\n    consoleImpl.addMessage('Foo', MessageLevel.Info, true);\n    consoleImpl.addMessage('Baz', MessageLevel.Warning, true);\n    consoleImpl.addMessage('Bar', MessageLevel.Error, true);\n    consoleImpl.addMessage('Donkey', MessageLevel.Info, true);\n    const messages = consoleImpl.messages();\n    assert.strictEqual(messages.length, 4);\n  });\n\n  it('dispatches events to listeners', done => {\n    const callback = ({data}: Common.EventTarget.EventTargetEvent<Common.Console.Message>) => {\n      consoleImpl.removeEventListener(Events.MessageAdded, callback);\n      assert.strictEqual(data.text, 'Foo');\n      done();\n    };\n\n    consoleImpl.addEventListener(Events.MessageAdded, callback);\n    consoleImpl.addMessage('Foo', MessageLevel.Info, true);\n  });\n});\n"]}