{"version":3,"file":"Color_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/common/Color_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\nimport {assertNotNullOrUndefined} from '../../../../../front_end/core/platform/platform.js';\n\nconst Color = Common.Color;\n\nconst parseAndAssertNotNull = (value: string) => {\n  const result = Color.Color.parse(value);\n  assertNotNullOrUndefined(result);\n  return result;\n};\n\nconst deepCloseTo = (actual: number[], expected: number[], delta: number, message?: string) => {\n  for (let i = 0; i <= 3; ++i) {\n    assert.closeTo(actual[i], expected[i], delta, message);\n  }\n};\n\nconst tolerance = 0.0001;\n\ndescribe('Color', () => {\n  it('can be instantiated without issues', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    assert.deepEqual(color.rgba(), [0.5, 0.5, 0.5, 0.5], 'RGBA array was not set correctly');\n    assert.strictEqual(color.asString(), 'testColor', 'original text was not set correctly');\n    assert.strictEqual(color.format(), Color.Format.Original, 'format was not set correctly');\n  });\n\n  it('defaults RGBA value to 0 if the RGBA initializing value given was negative', () => {\n    const color = new Color.Color([-0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    assert.deepEqual(color.rgba(), [0, 0.5, 0.5, 0.5], 'RGBA array was not set correctly');\n    assert.strictEqual(color.asString(), 'testColor', 'original text was not set correctly');\n    assert.strictEqual(color.format(), Color.Format.Original, 'format was not set correctly');\n  });\n\n  it('defaults RGBA value to 1 if the RGBA initializing value given was above one', () => {\n    const color = new Color.Color([1.1, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    assert.deepEqual(color.rgba(), [1, 0.5, 0.5, 0.5], 'RGBA array was not set correctly');\n    assert.strictEqual(color.asString(), 'testColor', 'original text was not set correctly');\n    assert.strictEqual(color.format(), Color.Format.Original, 'format was not set correctly');\n  });\n\n  it('is able to create a color class from an HSVA value', () => {\n    const color = Color.Color.fromHSVA([0.5, 0.5, 0.5, 100]);\n    assert.deepEqual(color.rgba(), [0.25, 0.49999999999999994, 0.5, 1], 'RGBA array was not set correctly');\n    assert.strictEqual(color.asString(), 'hsl(180deg 33% 38%)', 'original text was not set correctly');\n    assert.strictEqual(color.format(), 'hsla', 'format was not set correctly');\n  });\n\n  it('is able to return the HSVA value of a color', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    const hsva = color.hsva();\n    assert.deepEqual(hsva, [0, 0, 0.5, 0.5], 'HSVA was not calculated correctly');\n  });\n\n  it('is able to return a lighter luminance according to a given contrast value', () => {\n    const result = Color.Color.desiredLuminance(0.2, 2, true);\n    assert.strictEqual(result, 0.45, 'luminance was not calculated correctly');\n  });\n\n  it('is able to return a darker luminance according to a given contrast value', () => {\n    const result = Color.Color.desiredLuminance(0.2, 2, false);\n    assert.strictEqual(result, 0.075, 'luminance was not calculated correctly');\n  });\n\n  it('is able to return a darker luminance if the lighter one falls out of the inclusive range [0, 1]', () => {\n    const result = Color.Color.desiredLuminance(0.2, 5, true);\n    assert.strictEqual(result, 0, 'luminance was not calculated correctly');\n  });\n\n  it('is able to return canonical HSLA for a color', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    const result = color.canonicalHSLA();\n    assert.deepEqual(result, [0, 0, 50, 0.5], 'canonical HSLA was not calculated correctly');\n  });\n\n  it('is able to return canonical HWBA for a color', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColorGray');\n    const result = color.canonicalHWBA();\n    deepCloseTo(result, [0, 50, 50, 0.5], tolerance, 'canonical HWBA was not calculated correctly');\n  });\n\n  it('parses hex values', () => {\n    assert.deepEqual(parseAndAssertNotNull('#FF00FF').rgba(), [1, 0, 1, 1]);\n    assert.deepEqual(parseAndAssertNotNull('#F0F').rgba(), [1, 0, 1, 1]);\n    assert.deepEqual(parseAndAssertNotNull('#F0F0').rgba(), [1, 0, 1, 0]);\n    assert.deepEqual(parseAndAssertNotNull('#FF00FF00').rgba(), [1, 0, 1, 0]);\n  });\n\n  it('parses nickname values', () => {\n    assert.deepEqual(parseAndAssertNotNull('red').rgba(), [1, 0, 0, 1]);\n  });\n\n  it('parses rgb(a) values', () => {\n    const colorOne = Color.Color.parse('rgb(255, 255, 0)');\n    assertNotNullOrUndefined(colorOne);\n    assert.deepEqual(colorOne.rgba(), [1, 1, 0, 1]);\n\n    const colorTwo = Color.Color.parse('rgba(0, 255, 255, 0.5)');\n    assertNotNullOrUndefined(colorTwo);\n    assert.deepEqual(colorTwo.rgba(), [0, 1, 1, 0.5]);\n\n    const colorThree = Color.Color.parse('rgb(255 255 255)');\n    assertNotNullOrUndefined(colorThree);\n    assert.deepEqual(colorThree.rgba(), [1, 1, 1, 1]);\n\n    const colorFour = Color.Color.parse('rgb(10% 10% 10%)');\n    assertNotNullOrUndefined(colorFour);\n    assert.deepEqual(colorFour.rgba(), [0.1, 0.1, 0.1, 1]);\n\n    const colorFive = Color.Color.parse('rgb(10% 10% 10% / 0.4)');\n    assertNotNullOrUndefined(colorFive);\n    assert.deepEqual(colorFive.rgba(), [0.1, 0.1, 0.1, 0.4]);\n\n    const colorSix = Color.Color.parse('rgb(10% 10% 10% / 40%)');\n    assertNotNullOrUndefined(colorSix);\n    assert.deepEqual(colorSix.rgba(), [0.1, 0.1, 0.1, 0.4]);\n  });\n\n  it('parses hsl(a) values', () => {\n    const colorOne = Color.Color.parse('hsl(0, 100%, 50%)');\n    assertNotNullOrUndefined(colorOne);\n    assert.deepEqual(colorOne.rgba(), [1, 0, 0, 1]);\n\n    const colorTwo = Color.Color.parse('hsla(0, 100%, 50%, 0.5)');\n    assertNotNullOrUndefined(colorTwo);\n    assert.deepEqual(colorTwo.rgba(), [1, 0, 0, 0.5]);\n\n    const colorThree = Color.Color.parse('hsla(50deg 100% 100% / 50%)');\n    assertNotNullOrUndefined(colorThree);\n    assert.deepEqual(colorThree.rgba(), [1, 1, 1, 0.5]);\n\n    const colorFour = Color.Color.parse('hsl(0 100% 50% / 0.5)');\n    assertNotNullOrUndefined(colorFour);\n    assert.deepEqual(colorFour.rgba(), [1, 0, 0, 0.5]);\n\n    const colorFive = Color.Color.parse('hsl(0 100% 50% / 50%)');\n    assertNotNullOrUndefined(colorFive);\n    assert.deepEqual(colorFive.rgba(), [1, 0, 0, 0.5]);\n\n    const colorSix = Color.Color.parse('hsl(0deg 100% 50% / 50%)');\n    assertNotNullOrUndefined(colorSix);\n    assert.deepEqual(colorSix.rgba(), [1, 0, 0, 0.5]);\n  });\n\n  it('parses hwb values', () => {\n    const colorOne = Color.Color.parse('hwb(300 0% 0%)');\n    assertNotNullOrUndefined(colorOne);\n    deepCloseTo(colorOne.rgba(), [1, 0, 1, 1], tolerance);\n\n    const colorTwo = Color.Color.parse('hwb(0 0% 0% / 0.5)');\n    assertNotNullOrUndefined(colorTwo);\n    deepCloseTo(colorTwo.rgba(), [1, 0, 0, 0.5], tolerance);\n\n    const colorThree = Color.Color.parse('hwb(60deg 0% 0% / 50%)');\n    assertNotNullOrUndefined(colorThree);\n    deepCloseTo(colorThree.rgba(), [1, 1, 0, 0.5], tolerance);\n\n    const colorFour = Color.Color.parse('hwb(0deg 100% 0% / 0.2)');\n    assertNotNullOrUndefined(colorFour);\n    deepCloseTo(colorFour.rgba(), [1, 1, 1, 0.2], tolerance);\n\n    const colorFive = Color.Color.parse('hwb(180deg 0% 0%)');\n    assertNotNullOrUndefined(colorFive);\n    deepCloseTo(colorFive.rgba(), [0, 1, 1, 1], tolerance);\n\n    const colorSix = Color.Color.parse('hwb(240deg 0% 0% / 90%)');\n    assertNotNullOrUndefined(colorSix);\n    deepCloseTo(colorSix.rgba(), [0, 0, 1, 0.9], tolerance);\n  });\n\n  it('handles invalid values', () => {\n    assert.isNull(Color.Color.parse('#FAFAFA       Trailing'));\n    assert.isNull(Color.Color.parse('#FAFAFG'));\n    assert.isNull(Color.Color.parse('gooseberry'));\n    assert.isNull(Color.Color.parse('rgb(10% 10% 10% /)'));\n    assert.isNull(Color.Color.parse('rgb(10% 10% 10% 0.4 40)'));\n    assert.isNull(Color.Color.parse('hsl(0, carrot, 30%)'));\n    assert.isNull(Color.Color.parse('hsl(0)'));\n    assert.isNull(Color.Color.parse('hwb(0)'));\n    // Unlike HSL, HWB does not allow comma-separated input\n    assert.isNull(Color.Color.parse('hwb(0%, 50%, 50%)'));\n    assert.isNull(Color.Color.parse('rgb(255)'));\n    assert.isNull(Color.Color.parse('rgba(1 golf 30)'));\n  });\n\n  it('is able to return whether or not the color has an alpha value', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    assert.isTrue(color.hasAlpha(), 'the color should be considered to have an alpha value');\n  });\n\n  it('is able to detect the HEX format of a color with an alpha value', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    const result = color.detectHEXFormat();\n    assert.strictEqual(result, 'hexa', 'format was not detected correctly');\n  });\n\n  it('is able to detect the HEX format of a color without an alpha value', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 1], Color.Format.Original, 'testColor');\n    const result = color.detectHEXFormat();\n    assert.strictEqual(result, 'hex', 'format was not detected correctly');\n  });\n\n  it('is able to return the canonical RGBA of a color', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    const result = color.canonicalRGBA();\n    assert.deepEqual(result, [128, 128, 128, 0.5], 'canonical RGBA was not returned correctly');\n  });\n\n  it('is able to return the nickname of a color', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.Original, 'testColor');\n    const result = color.nickname();\n    assert.strictEqual(result, 'red', 'nickname was not returned correctly');\n  });\n\n  it('returns null as a nickname if the color was not recognized', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    const result = color.nickname();\n    assert.isNull(result, 'nickname should be returned as Null');\n  });\n\n  it('is able to convert the color to a protocol RGBA', () => {\n    const color = new Color.Color([0.5, 0.5, 0.5, 0.5], Color.Format.Original, 'testColor');\n    const result = color.toProtocolRGBA();\n    assert.deepEqual(result, {r: 128, g: 128, b: 128, a: 0.5}, 'conversion to protocol RGBA was not correct');\n  });\n\n  it('is able to invert a color', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.Original, 'testColor');\n    const result = color.invert().rgba();\n    assert.deepEqual(result, [0, 1, 1, 1], 'inversion was not successful');\n  });\n\n  it('is able to set the alpha value of a color', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.Original, 'testColor');\n    const result = color.setAlpha(0.5).rgba();\n    assert.deepEqual(result, [1, 0, 0, 0.5], 'alpha value was not set correctly');\n  });\n\n  it('can blend with another color', () => {\n    const color = new Color.Color([1, 0, 0, 0.5], Color.Format.Original, 'testColor');\n    const otherColor = new Color.Color([0, 0, 1, 0.5], Color.Format.Original, 'testColor');\n    const result = color.blendWith(otherColor).rgba();\n    assert.deepEqual(result, [0.5, 0, 0.5, 0.75], 'color was not blended correctly');\n  });\n\n  it('returns the original text when turned into a string if its format was \"original\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.Original, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'testColor', 'color was not converted to a string correctly');\n  });\n\n  it('returns the nickname when turned into a string if its format was \"nickname\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.Nickname, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'red', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HEX value when turned into a string if its format was \"hex\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.HEX, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, '#ff0000', 'color was not converted to a string correctly');\n  });\n\n  it('returns the short HEX value when turned into a string if its format was \"shorthex\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.ShortHEX, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, '#f00', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HEXA value when turned into a string if its format was \"hexa\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.HEXA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, '#ff0000ff', 'color was not converted to a string correctly');\n  });\n\n  it('returns the short HEXA value when turned into a string if its format was \"shorthexa\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.ShortHEXA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, '#f00f', 'color was not converted to a string correctly');\n  });\n\n  it('returns the RGB value when turned into a string if its format was \"rgb\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.RGB, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'rgb(255 0 0)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the RGBA value when turned into a string if its format was \"rgba\"', () => {\n    const color = new Color.Color([1, 0, 0, 0.42], Color.Format.RGBA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'rgb(255 0 0 / 42%)', 'color was not converted to a string correctly');\n  });\n\n  it('omits the alpha value when it’s 100% if its format was \"rgba\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.RGBA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'rgb(255 0 0)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HSL value when turned into a string if its format was \"hsl\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.HSL, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'hsl(0deg 100% 50%)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HSLA value when turned into a string if its format was \"hsla\"', () => {\n    const color = new Color.Color([1, 0, 0, 0.42], Color.Format.HSLA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'hsl(0deg 100% 50% / 42%)', 'color was not converted to a string correctly');\n  });\n\n  it('omits the alpha value when it’s 100% if its format was \"hsla\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.HSLA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'hsl(0deg 100% 50%)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HWB value when turned into a string if its format was \"hwb\"', () => {\n    const color = new Color.Color([0, 0, 1, 1], Color.Format.HWB, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'hwb(240deg 0% 0%)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HWB value when turned into a string if its format was \"hwba\"', () => {\n    const color = new Color.Color([1, 0, 0, 0.42], Color.Format.HWBA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'hwb(0deg 0% 0% / 42%)', 'color was not converted to a string correctly');\n  });\n\n  it('omits the alpha value when it’s 100% if its format was \"hwba\"', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.HWBA, 'testColor');\n    const result = color.asString();\n    assert.strictEqual(result, 'hwb(0deg 0% 0%)', 'color was not converted to a string correctly');\n  });\n\n  it('is able to return a color in a different format than the one the color was originally set with', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.RGB, 'testColor');\n    const result = color.asString('nickname');\n    assert.strictEqual(result, 'red', 'color was not converted to a string correctly');\n  });\n\n  it('is able to change color format', () => {\n    const color = new Color.Color([1, 0, 0, 1], Color.Format.RGB);\n    color.setFormat(Color.Format.HSL);\n    assert.strictEqual(color.asString(), 'hsl(0deg 100% 50%)', 'format was not set correctly');\n    color.setFormat(Color.Format.HWB);\n    assert.strictEqual(color.asString(), 'hwb(0deg 0% 0%)', 'format was not set correctly');\n  });\n\n  it('suggests colors with good contrast', () => {\n    const colors = [\n      {\n        bgColor: 'salmon',\n        fgColor: 'white',\n        contrast: 4.5,\n        result: 'hsl(0deg 0% 23%)',\n      },\n      {\n        bgColor: 'Lightblue',\n        fgColor: 'white',\n        contrast: 4.5,\n        result: 'hsl(0deg 0% 35%)',\n      },\n      {\n        bgColor: 'white',\n        fgColor: 'hsl(0 53% 52% / 87%)',\n        contrast: 7.0,\n        result: 'hsl(0deg 49% 32% / 87%)',\n      },\n      {\n        bgColor: 'white',\n        fgColor: 'white',\n        contrast: 7.0,\n        result: 'hsl(0deg 0% 35%)',\n      },\n      {\n        bgColor: 'black',\n        fgColor: 'black',\n        contrast: 7.05,\n        result: 'hsl(0deg 0% 59%)',\n      },\n      {\n        bgColor: 'white',\n        fgColor: '#00FF00',\n        contrast: 7.05,\n        result: 'hsl(120deg 100% 20%)',\n      },\n      {\n        bgColor: 'black',\n        fgColor: '#b114ff',\n        contrast: 7.05,\n        result: 'hsl(280deg 100% 71%)',\n      },\n    ];\n    for (const {fgColor, bgColor, contrast, result} of colors) {\n      const fgParsed = Color.Color.parse(fgColor);\n      const bgParsed = Color.Color.parse(bgColor);\n      assertNotNullOrUndefined(fgParsed);\n      assertNotNullOrUndefined(bgParsed);\n      const suggestedColor = Color.Color.findFgColorForContrast(fgParsed, bgParsed, contrast);\n      assertNotNullOrUndefined(suggestedColor);\n      assert.strictEqual(\n          suggestedColor.asString(), result,\n          `incorrect color suggestion for ${fgColor}/${bgColor} with contrast ${contrast}`);\n    }\n  });\n\n  it('find the fg color with good contrast according to APCA', () => {\n    const tests = [\n      {\n        fgColor: 'white',\n        bgColor: 'white',\n        requiredContrast: 68,\n      },\n      {\n        fgColor: 'black',\n        bgColor: 'black',\n        requiredContrast: 68,\n      },\n      {\n        bgColor: 'lightblue',\n        fgColor: 'white',\n        requiredContrast: 66,\n      },\n      {\n        bgColor: 'white',\n        fgColor: '#00FF00',\n        requiredContrast: 66,\n      },\n      {\n        bgColor: 'black',\n        fgColor: '#b114ff',\n        requiredContrast: 66,\n      },\n    ];\n    for (const test of tests) {\n      const fg = Common.Color.Color.parse(test.fgColor);\n      const bg = Common.Color.Color.parse(test.bgColor);\n      assertNotNullOrUndefined(fg);\n      assertNotNullOrUndefined(bg);\n      const result = Common.Color.Color.findFgColorForContrastAPCA(fg, bg, test.requiredContrast);\n      assertNotNullOrUndefined(result);\n      const absContrast = Math.abs(Common.ColorUtils.contrastRatioAPCA(result.rgba() || [], bg.rgba()));\n      assert.isTrue(Math.round(absContrast) >= test.requiredContrast);\n    }\n  });\n\n  it('does not find fg color for certain combinations acoording to APCA', () => {\n    const tests = [\n      {\n        bgColor: 'salmon',\n        fgColor: 'white',\n        requiredContrast: 66,\n      },\n      {\n        fgColor: 'grey',\n        bgColor: 'grey',\n        requiredContrast: 68,\n      },\n    ];\n    for (const test of tests) {\n      const fg = Common.Color.Color.parse(test.fgColor);\n      const bg = Common.Color.Color.parse(test.bgColor);\n      assertNotNullOrUndefined(fg);\n      assertNotNullOrUndefined(bg);\n      const result = Common.Color.Color.findFgColorForContrastAPCA(fg, bg, test.requiredContrast);\n      assert.isNull(result);\n    }\n  });\n});\n\ndescribe('Generator', () => {\n  it('able to return the color for an ID if the ID was already set', () => {\n    const generator = new Color.Generator();\n    generator.setColorForID('r', 'Red');\n    assert.strictEqual(generator.colorForID('r'), 'Red', 'color was not retrieved correctly');\n  });\n\n  it('able to return the color for an ID that was not set', () => {\n    const generator = new Color.Generator();\n    assert.strictEqual(generator.colorForID('r'), 'hsl(133deg 67% 80%)', 'color was not generated correctly');\n  });\n});\n"]}