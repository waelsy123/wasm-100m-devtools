{"version":3,"file":"Trie_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/core/common/Trie_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,KAAK,MAAM,MAAM,gDAAgD,CAAC;AAEzE,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;AAE9B,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;IACpB,IAAI,IAAsB,CAAC;IAC3B,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACvB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAE/B,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAErB,iCAAiC;QACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,oCAAoC,EAAE,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;QAE/F,6BAA6B;QAC7B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,oCAAoC,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\n\nconst Trie = Common.Trie.Trie;\n\ndescribe('Trie', () => {\n  let trie: Common.Trie.Trie;\n  beforeEach(() => {\n    trie = new Trie();\n  });\n\n  it('stores and retrieves words', () => {\n    trie.add('foo');\n    assert.isTrue(trie.has('foo'));\n    assert.isFalse(trie.has('bar'));\n  });\n\n  it('removes words', () => {\n    trie.add('foo');\n    assert.isTrue(trie.has('foo'));\n    trie.remove('foo');\n    assert.isFalse(trie.has('foo'));\n  });\n\n  it('completes words based on prefixes', () => {\n    trie.add('foo');\n    trie.add('food');\n    trie.add('flora');\n    trie.add('boat');\n    trie.add('focus');\n    trie.add('banana');\n    assert.deepEqual(trie.words('fo'), ['foo', 'food', 'focus']);\n    assert.isEmpty(trie.words('cat'));\n  });\n\n  it('clears words', () => {\n    trie.add('foo');\n    assert.isTrue(trie.has('foo'));\n\n    trie.clear();\n    assert.isFalse(trie.has('foo'));\n    assert.isEmpty(trie.words('foo'));\n  });\n\n  it('provides the longest prefix', () => {\n    trie.add('super');\n    trie.add('supercar');\n\n    // Longest non-word prefix match.\n    assert.strictEqual(trie.longestPrefix('supercalifragilisticexpialidocious', false), 'superca');\n\n    // Longest word prefix match.\n    assert.strictEqual(trie.longestPrefix('supercalifragilisticexpialidocious', true), 'super');\n  });\n});\n"]}