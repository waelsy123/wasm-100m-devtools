{"version":3,"file":"HARWriter_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/models/har/HARWriter_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,KAAK,MAAM,MAAM,gDAAgD,CAAC;AACzE,OAAO,KAAK,GAAG,MAAM,0CAA0C,CAAC;AAChE,OAAO,KAAK,EAAE,MAAM,8CAA8C,CAAC;AACnE,OAAO,KAAK,GAAG,MAAM,4CAA4C,CAAC;AAClE,OAAO,KAAK,QAAQ,MAAM,oDAAoD,CAAC;AAE/E,OAAO,EAAC,kBAAkB,EAAC,MAAM,qCAAqC,CAAC;AAEvE,MAAM,4BAA4B,GAAG,CAAC,SAAiB,EAAqC,EAAE;IAC5F,MAAM,SAAS,GAAG,IAAkC,CAAC;IACrD,MAAM,OAAO,GAAG,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CACpD,SAAS,EAAE,QAA2C,EAAE,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACpH,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC3C,OAAO,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;IAClG,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,kBAAkB,CAAC,WAAW,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,4BAA4B,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,4BAA4B,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,4BAA4B,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAErE,MAAM,iBAAiB,GAAG,IAAI,EAAE,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,CAAC;QACvE,MAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACnF,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,oBAAoB,CACvD;YACE,IAAI;YACJ,IAAI;YACJ,IAAI;SACL,EACD,iBAAiB,CAAC,CAAC;QACvB,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,mCAAmC,CAAC,CAAC;QAC7G,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,mCAAmC,CAAC,CAAC;QAC7G,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,mCAAmC,CAAC,CAAC;IAC/G,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as UI from '../../../../../front_end/ui/legacy/legacy.js';\nimport * as HAR from '../../../../../front_end/models/har/har.js';\nimport * as Platform from '../../../../../front_end/core/platform/platform.js';\nimport type * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport {describeWithLocale} from '../../helpers/EnvironmentHelpers.js';\n\nconst simulateRequestWithStartTime = (startTime: number): SDK.NetworkRequest.NetworkRequest => {\n  const requestId = 'r0' as Protocol.Network.RequestId;\n  const request = SDK.NetworkRequest.NetworkRequest.create(\n      requestId, 'p0.com' as Platform.DevToolsPath.UrlString, Platform.DevToolsPath.EmptyUrlString, null, null, null);\n  request.setIssueTime(startTime, startTime);\n  request.setContentDataProvider(() => Promise.resolve({error: null, content: '', encoded: false}));\n  return request;\n};\n\ndescribeWithLocale('HARWriter', () => {\n  it('can correctly sort exported requests logs', async () => {\n    const req1Time = new Date(2020, 0, 3);\n    const req2Time = new Date(2020, 1, 3);\n    const req3Time = new Date(2020, 2, 3);\n    const req1 = simulateRequestWithStartTime(req1Time.getTime() / 1000);\n    const req2 = simulateRequestWithStartTime(req2Time.getTime() / 1000);\n    const req3 = simulateRequestWithStartTime(req3Time.getTime() / 1000);\n\n    const progressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n    const compositeProgress = new Common.Progress.CompositeProgress(progressIndicator);\n    const result = await HAR.Writer.Writer.harStringForRequests(\n        [\n          req3,\n          req2,\n          req1,\n        ],\n        compositeProgress);\n    const resultEntries = JSON.parse(result).log.entries;\n    assert.strictEqual(resultEntries[0].startedDateTime, req1Time.toJSON(), 'earlier request should come first');\n    assert.strictEqual(resultEntries[1].startedDateTime, req2Time.toJSON(), 'earlier request should come first');\n    assert.strictEqual(resultEntries[2].startedDateTime, req3Time.toJSON(), 'earlier request should come first');\n  });\n});\n"]}