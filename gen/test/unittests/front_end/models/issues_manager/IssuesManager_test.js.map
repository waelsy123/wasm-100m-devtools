{"version":3,"file":"IssuesManager_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/models/issues_manager/IssuesManager_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as IssuesManager from '../../../../../front_end/models/issues_manager/issues_manager.js';\n\nimport {createFakeSetting, describeWithEnvironment, enableFeatureForTest} from '../../helpers/EnvironmentHelpers.js';\nimport {mkInspectorCspIssue, StubIssue, ThirdPartyStubIssue} from './StubIssue.js';\nimport {MockIssuesModel} from './MockIssuesModel.js';\n\ndescribeWithEnvironment('IssuesManager', () => {\n  it('collects issues from an issues model', () => {\n    const issue1 = new StubIssue('StubIssue1', ['id1', 'id2'], []);\n    const mockModel = new MockIssuesModel([issue1]) as unknown as SDK.IssuesModel.IssuesModel;\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n    issuesManager.modelAdded(mockModel);\n\n    const dispatchedIssues: IssuesManager.Issue.Issue[] = [];\n    issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssueAdded, event => dispatchedIssues.push(event.data.issue));\n\n    mockModel.dispatchEventToListeners(\n        SDK.IssuesModel.Events.IssueAdded, {issuesModel: mockModel, inspectorIssue: mkInspectorCspIssue('url1')});\n    mockModel.dispatchEventToListeners(\n        SDK.IssuesModel.Events.IssueAdded, {issuesModel: mockModel, inspectorIssue: mkInspectorCspIssue('url2')});\n\n    const expected = ['ContentSecurityPolicyIssue::kURLViolation', 'ContentSecurityPolicyIssue::kURLViolation'];\n    assert.deepStrictEqual(dispatchedIssues.map(i => i.code()), expected);\n\n    // The `issue1` should not be present, as it was present before the IssuesManager\n    // was instantiated.\n    const issueCodes = Array.from(issuesManager.issues()).map(r => r.code());\n    assert.deepStrictEqual(issueCodes, expected);\n  });\n\n  it('filters third-party issues when the third-party issues setting is false, includes them otherwise', () => {\n    const issues = [\n      new ThirdPartyStubIssue('AllowedStubIssue1', false),\n      new ThirdPartyStubIssue('StubIssue2', true),\n      new ThirdPartyStubIssue('AllowedStubIssue3', false),\n      new ThirdPartyStubIssue('StubIssue4', true),\n    ];\n\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', false);\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting);\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    issuesManager.modelAdded(mockModel);\n\n    const firedIssueAddedEventCodes: string[] = [];\n    issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssueAdded,\n        event => firedIssueAddedEventCodes.push(event.data.issue.code()));\n\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n\n    let issueCodes = Array.from(issuesManager.issues()).map(i => i.code());\n    assert.deepStrictEqual(issueCodes, ['AllowedStubIssue1', 'AllowedStubIssue3']);\n    assert.deepStrictEqual(firedIssueAddedEventCodes, ['AllowedStubIssue1', 'AllowedStubIssue3']);\n\n    showThirdPartyIssuesSetting.set(true);\n\n    issueCodes = Array.from(issuesManager.issues()).map(i => i.code());\n    assert.deepStrictEqual(issueCodes, ['AllowedStubIssue1', 'StubIssue2', 'AllowedStubIssue3', 'StubIssue4']);\n  });\n\n  it('reports issue counts by kind', () => {\n    const issue1 = new StubIssue('StubIssue1', ['id1'], [], IssuesManager.Issue.IssueKind.Improvement);\n    const issue2 = new StubIssue('StubIssue1', ['id2'], [], IssuesManager.Issue.IssueKind.Improvement);\n    const issue3 = new StubIssue('StubIssue1', ['id3'], [], IssuesManager.Issue.IssueKind.BreakingChange);\n\n    const mockModel = new MockIssuesModel([issue1]) as unknown as SDK.IssuesModel.IssuesModel;\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n    issuesManager.modelAdded(mockModel);\n\n    issuesManager.addIssue(mockModel, issue1);\n    issuesManager.addIssue(mockModel, issue2);\n    issuesManager.addIssue(mockModel, issue3);\n\n    assert.deepStrictEqual(issuesManager.numberOfIssues(), 3);\n    assert.deepStrictEqual(issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.Improvement), 2);\n    assert.deepStrictEqual(issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.BreakingChange), 1);\n    assert.deepStrictEqual(issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.PageError), 0);\n  });\n  describe('instance', () => {\n    it('throws an Error if its not the first instance created with \"ensureFirst\" set', () => {\n      IssuesManager.IssuesManager.IssuesManager.instance();\n\n      assert.throws(() => IssuesManager.IssuesManager.IssuesManager.instance({forceNew: true, ensureFirst: true}));\n      assert.throws(() => IssuesManager.IssuesManager.IssuesManager.instance({forceNew: false, ensureFirst: true}));\n    });\n  });\n});\n\ndescribeWithEnvironment('IssuesManager', () => {\n  beforeEach(() => {\n    enableFeatureForTest('hideIssuesFeature');\n  });\n\n  it('hides issues added after setting has been initialised', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    issuesManager.modelAdded(mockModel);\n\n    const hiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssueAdded, event => {\n      if (event.data.issue.isHidden()) {\n        hiddenIssues.push(event.data.issue.code());\n      }\n    });\n    // This Setting can either have been initialised in a previous Devtools session and retained\n    // through to a new session.\n    // OR\n    // These settings have been updated by clicking on \"hide issue\" and cause the updateHiddenIssues\n    // method to be called. These issues are being added to the IssuesManager after this has happened.\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n\n    assert.deepStrictEqual(hiddenIssues, ['HiddenStubIssue1', 'HiddenStubIssue2']);\n  });\n\n  it('hides issues present in IssuesManager when setting is updated', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    issuesManager.modelAdded(mockModel);\n\n    let hiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.FullUpdateRequired, () => {\n      hiddenIssues = [];\n      for (const issue of issuesManager.issues()) {\n        if (issue.isHidden()) {\n          hiddenIssues.push(issue.code());\n        }\n      }\n    });\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n    // Setting is updated by clicking on \"hide issue\".\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.deepStrictEqual(hiddenIssues, ['HiddenStubIssue1']);\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.deepStrictEqual(hiddenIssues, ['HiddenStubIssue1', 'HiddenStubIssue2']);\n  });\n\n  it('unhides issues present in IssuesManager when setting is updated', () => {\n    enableFeatureForTest('hideIssuesFeature');\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    issuesManager.modelAdded(mockModel);\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    let UnhiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.FullUpdateRequired, () => {\n      UnhiddenIssues = [];\n      for (const issue of issuesManager.issues()) {\n        if (!issue.isHidden()) {\n          UnhiddenIssues.push(issue.code());\n        }\n      }\n    });\n\n    // Setting updated by clicking on \"unhide issue\"\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Unhidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.deepStrictEqual(UnhiddenIssues, ['UnhiddenStubIssue1']);\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Unhidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Unhidden,\n    });\n    assert.deepStrictEqual(UnhiddenIssues, ['UnhiddenStubIssue1', 'UnhiddenStubIssue2']);\n  });\n\n  it('unhides all issues correctly', () => {\n    enableFeatureForTest('hideIssuesFeature');\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n    issuesManager.modelAdded(mockModel);\n    for (const issue of issues) {\n      issuesManager.addIssue(mockModel, issue);\n    }\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    let UnhiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.FullUpdateRequired, () => {\n      UnhiddenIssues = [];\n      for (const issue of issuesManager.issues()) {\n        if (!issue.isHidden()) {\n          UnhiddenIssues.push(issue.code());\n        }\n      }\n    });\n    issuesManager.unhideAllIssues();\n    assert.deepStrictEqual(\n        UnhiddenIssues, ['HiddenStubIssue1', 'HiddenStubIssue2', 'UnhiddenStubIssue1', 'UnhiddenStubIssue2']);\n  });\n});\n"]}