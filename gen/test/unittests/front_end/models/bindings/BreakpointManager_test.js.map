{"version":3,"file":"BreakpointManager_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/models/bindings/BreakpointManager_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as Workspace from '../../../../../front_end/models/workspace/workspace.js';\nimport * as Bindings from '../../../../../front_end/models/bindings/bindings.js';\nimport type * as Platform from '../../../../../front_end/core/platform/platform.js';\nimport type * as Protocol from '../../../../../front_end/generated/protocol.js';\n\nimport {describeWithRealConnection} from '../../helpers/RealConnection.js';\nimport {createUISourceCode} from '../../helpers/UISourceCodeHelpers.js';\nimport {assertNotNullOrUndefined} from '../../../../../front_end/core/platform/platform.js';\n\ndescribeWithRealConnection('BreakpointManager', () => {\n  it('allows awaiting on scheduled update in debugger', async () => {\n    const breakpointManager = Bindings.BreakpointManager.BreakpointManager.instance();\n    assertNotNullOrUndefined(breakpointManager);\n\n    const URL = 'file:///tmp/example.html' as Platform.DevToolsPath.UrlString;\n    const SCRIPT_ID = 'SCRIPT_ID' as Protocol.Runtime.ScriptId;\n    const BREAKPOINT_ID = 'BREAKPOINT_ID' as Protocol.Debugger.BreakpointId;\n    const {uiSourceCode, project} = createUISourceCode({url: URL, mimeType: 'text/javascript'});\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const target = targetManager.mainTarget();\n    assertNotNullOrUndefined(target);\n\n    class TestDebuggerModel extends SDK.DebuggerModel.DebuggerModel {\n      constructor(target: SDK.Target.Target) {\n        super(target);\n      }\n\n      async setBreakpointByURL(\n          _url: Platform.DevToolsPath.UrlString, _lineNumber: number, _columnNumber?: number,\n          _condition?: string): Promise<SDK.DebuggerModel.SetBreakpointResult> {\n        return Promise.resolve(\n            {breakpointId: BREAKPOINT_ID, locations: [new SDK.DebuggerModel.Location(debuggerModel, SCRIPT_ID, 42)]});\n      }\n\n      scriptForId(scriptId: string): SDK.Script.Script|null {\n        if (scriptId === SCRIPT_ID) {\n          return new SDK.Script.Script(\n              this, scriptId as Protocol.Runtime.ScriptId, URL, 0, 0, 0, 0, 0, '', false, false, undefined, false, 0,\n              null, null, null, null, null, null);\n        }\n        return null;\n      }\n    }\n\n    const debuggerModel = new TestDebuggerModel(target);\n    const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 42, 0, '', true);\n\n    const modelBreakpoint = new Bindings.BreakpointManager.ModelBreakpoint(\n        debuggerModel, breakpoint, breakpointManager.debuggerWorkspaceBinding);\n    const mapping = {\n      rawLocationToUILocation: (_: SDK.DebuggerModel.Location) => null,\n      uiLocationToRawLocations:\n          (_uiSourceCode: Workspace.UISourceCode.UISourceCode, _lineNumber: number,\n           _columnNumber?: number) => [new SDK.DebuggerModel.Location(debuggerModel, SCRIPT_ID, 13)],\n    };\n    Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().addSourceMapping(mapping);\n    assert.isNull(breakpoint.currentState);\n    const update = modelBreakpoint.scheduleUpdateInDebugger();\n    assert.isNull(breakpoint.currentState);\n    await update;\n    assert.strictEqual(breakpoint.currentState?.positions[0]?.lineNumber, 13);\n    Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().removeSourceMapping(mapping);\n    breakpointManager.removeBreakpoint(breakpoint, true);\n    Workspace.Workspace.WorkspaceImpl.instance().removeProject(project);\n  });\n});\n"]}