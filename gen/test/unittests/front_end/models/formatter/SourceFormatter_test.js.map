{"version":3,"file":"SourceFormatter_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/models/formatter/SourceFormatter_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Common from '../../../../../front_end/core/common/common.js';\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as Formatter from '../../../../../front_end/models/formatter/formatter.js';\nimport * as Workspace from '../../../../../front_end/models/workspace/workspace.js';\nimport * as Bindings from '../../../../../front_end/models/bindings/bindings.js';\nimport type * as Platform from '../../../../../front_end/core/platform/platform.js';\nimport * as TextUtils from '../../../../../front_end/models/text_utils/text_utils.js';\n\nimport {describeWithEnvironment} from '../../helpers/EnvironmentHelpers.js';\nimport {createUISourceCode} from '../../helpers/UISourceCodeHelpers.js';\n\ndescribeWithEnvironment('SourceFormatter', () => {\n  let uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  let project: Bindings.ContentProviderBasedProject.ContentProviderBasedProject;\n  let sourceFormatter: Formatter.SourceFormatter.SourceFormatter;\n\n  const DOCUMENT_URL = 'index.html' as Platform.DevToolsPath.UrlString;\n  const PROJECT_ID = 'projectID';\n  const MIME_TYPE = 'text/html';\n  const RESOURCE_TYPE = Common.ResourceType.ResourceType.fromMimeType(MIME_TYPE);\n\n  beforeEach(() => {\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      targetManager,\n      workspace,\n    });\n    Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance({\n      forceNew: true,\n      targetManager,\n      workspace,\n    });\n    ({project, uiSourceCode} = createUISourceCode({\n       url: DOCUMENT_URL,\n       mimeType: MIME_TYPE,\n       content: '<html><body></body></html>',\n       projectType: Workspace.Workspace.projectTypes.Formatter,\n       projectId: PROJECT_ID,\n     }));\n    sourceFormatter = Formatter.SourceFormatter.SourceFormatter.instance({forceNew: true});\n  });\n\n  it('can format a HTML document', async () => {\n    const {formattedSourceCode} = await sourceFormatter.format(uiSourceCode);\n    const formattedContent = await formattedSourceCode.requestContent();\n    assert.strictEqual(formattedContent.content, `<html>\n    <body></body>\n</html>\n`);\n  });\n\n  it('caches formatted documents', async () => {\n    await sourceFormatter.format(uiSourceCode);\n    assert.isTrue(sourceFormatter.hasFormatted(uiSourceCode));\n  });\n\n  it('removes cached formatted documents on request', async () => {\n    const {formattedSourceCode} = await sourceFormatter.format(uiSourceCode);\n    await sourceFormatter.discardFormattedUISourceCode(formattedSourceCode);\n    assert.isFalse(sourceFormatter.hasFormatted(uiSourceCode));\n  });\n\n  it('ignores previously cached formatted documents if already removed from cache', async () => {\n    const {formattedSourceCode} = await sourceFormatter.format(uiSourceCode);\n    await sourceFormatter.discardFormattedUISourceCode(formattedSourceCode);\n    assert.isFalse(sourceFormatter.hasFormatted(uiSourceCode));\n    // Should already be removed and should gracefully handle a second removal\n    await sourceFormatter.discardFormattedUISourceCode(formattedSourceCode);\n    assert.isFalse(sourceFormatter.hasFormatted(uiSourceCode));\n  });\n\n  it('retrieves original source code from formatted version', async () => {\n    const {formattedSourceCode} = await sourceFormatter.format(uiSourceCode);\n    assert.strictEqual(sourceFormatter.getOriginalUISourceCode(formattedSourceCode), uiSourceCode);\n  });\n\n  it('can compute the original path of the source code from formatted output', async () => {\n    const formattedResult = await sourceFormatter.format(uiSourceCode);\n    assert.strictEqual(formattedResult.originalPath(), `${PROJECT_ID}:${DOCUMENT_URL}`);\n  });\n\n  it('can handle duplicate file names for different ui source code instances', async () => {\n    const formattedResult = await sourceFormatter.format(uiSourceCode);\n    assert.isTrue(formattedResult.formattedSourceCode.url().startsWith(`${DOCUMENT_URL}:formatted`));\n\n    const duplicateUiSourceCode = project.createUISourceCode(DOCUMENT_URL, RESOURCE_TYPE);\n    const secondContentProvider = TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n        DOCUMENT_URL, RESOURCE_TYPE, '<html>Second document</html>');\n    project.addUISourceCodeWithProvider(duplicateUiSourceCode, secondContentProvider, null, MIME_TYPE);\n\n    const duplicateFormattedResult = await sourceFormatter.format(duplicateUiSourceCode);\n    assert.isTrue(duplicateFormattedResult.formattedSourceCode.url().startsWith(`${DOCUMENT_URL}:formatted`));\n\n    assert.notStrictEqual(formattedResult, duplicateFormattedResult);\n    // We created a new unique name for the newly formatted document\n    assert.notStrictEqual(\n        formattedResult.formattedSourceCode.url(), duplicateFormattedResult.formattedSourceCode.url());\n    // Even though the original paths were equivalent\n    assert.strictEqual(formattedResult.originalPath(), duplicateFormattedResult.originalPath());\n  });\n});\n"]}