{"version":3,"file":"TimelineFrameBeginFrameQueue_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/models/timeline_model/TimelineFrameBeginFrameQueue_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,KAAK,aAAa,MAAM,kEAAkE,CAAC;AAElG,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,4BAA4B,EAAE,CAAC;QAC5F,MAAM,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAEpF,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;QAC9E,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,4BAA4B,EAAE,CAAC;QAC5F,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,MAAM,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAEpF,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,4BAA4B,EAAE,CAAC;QAC5F,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAEhE,MAAM,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAEpF,uCAAuC;QACvC,qEAAqE;QACrE,+BAA+B;QAC/B,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,4BAA4B,EAAE,CAAC;QAC5F,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAEhE,MAAM,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAEpF,yEAAyE;QACzE,yEAAyE;QACzE,mCAAmC;QACnC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,4BAA4B,EAAE,CAAC;QAC5F,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACtC,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAEvC,MAAM,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAEpF,yEAAyE;QACzE,yEAAyE;QACzE,mCAAmC;QACnC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,4BAA4B,EAAE,CAAC;QAC5F,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChE,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAE/D,0DAA0D;QAC1D,IAAI,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAElF,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,yDAAyD;QACzD,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAE9E,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5D,2BAA2B;QAC3B,iBAAiB,GAAG,eAAe,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC;QAE9E,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as TimelineModel from '../../../../../front_end/models/timeline_model/timeline_model.js';\n\ndescribe('TimelineFrameBeginFrameQueue', () => {\n  it('visualizes zero frames when no BeginFrames are added', () => {\n    const beginFrameQueue = new TimelineModel.TimelineFrameModel.TimelineFrameBeginFrameQueue();\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(100);\n\n    assert.isEmpty(framesToVisualize);\n  });\n\n  it('visualizes zero frames when no BeginFrame in queue matches DrawFrame', () => {\n    const beginFrameQueue = new TimelineModel.TimelineFrameModel.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, 1000000, false, false);\n    beginFrameQueue.addFrameIfNotExists(101, 1000016, false, false);\n    beginFrameQueue.addFrameIfNotExists(102, 1000032, false, false);\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(103);\n\n    assert.isEmpty(framesToVisualize);\n  });\n\n  it('ignores BeginFrames without corresponding DrawFrames', () => {\n    const beginFrameQueue = new TimelineModel.TimelineFrameModel.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, 1000000, false, false);\n    beginFrameQueue.addFrameIfNotExists(101, 1000016, false, false);\n    beginFrameQueue.addFrameIfNotExists(102, 1000032, false, false);\n    beginFrameQueue.addFrameIfNotExists(103, 1000048, false, false);\n\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(102);\n\n    // Visualized frame: 102 (non-dropped).\n    // The other frames that are neither drawn nor dropped (100, 101) are\n    // excluded from visualization.\n    assert.lengthOf(framesToVisualize, 1);\n    assert.isFalse(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 102);\n    assert.strictEqual(framesToVisualize[0].startTime, 1000032);\n  });\n\n  it('visualizes dropped BeginFrames before a presented frame', () => {\n    const beginFrameQueue = new TimelineModel.TimelineFrameModel.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, 1000000, false, false);\n    beginFrameQueue.addFrameIfNotExists(101, 1000016, true, false);\n    beginFrameQueue.addFrameIfNotExists(102, 1000032, false, false);\n    beginFrameQueue.addFrameIfNotExists(103, 1000048, true, false);\n    beginFrameQueue.addFrameIfNotExists(104, 1000064, false, false);\n    beginFrameQueue.addFrameIfNotExists(105, 1000080, false, false);\n    beginFrameQueue.addFrameIfNotExists(106, 1000096, false, false);\n\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(105);\n\n    // Visualized frames: 101 (dropped), 103 (dropped) and 105 (non-dropped).\n    // The other frames that are neither drawn nor dropped (100, 102 and 104)\n    // are excluded from visualization.\n    assert.lengthOf(framesToVisualize, 3);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 101);\n    assert.strictEqual(framesToVisualize[0].startTime, 1000016);\n\n    assert.isTrue(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 103);\n    assert.strictEqual(framesToVisualize[1].startTime, 1000048);\n\n    assert.isFalse(framesToVisualize[2].isDropped);\n    assert.strictEqual(framesToVisualize[2].seqId, 105);\n    assert.strictEqual(framesToVisualize[2].startTime, 1000080);\n  });\n\n  it('changes dropped status of specified frames via setDropped()', () => {\n    const beginFrameQueue = new TimelineModel.TimelineFrameModel.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, 1000000, false, false);\n    beginFrameQueue.setDropped(100, true);\n    beginFrameQueue.addFrameIfNotExists(101, 1000016, true, false);\n    beginFrameQueue.addFrameIfNotExists(102, 1000032, false, false);\n    beginFrameQueue.addFrameIfNotExists(103, 1000048, true, false);\n    beginFrameQueue.addFrameIfNotExists(104, 1000064, false, false);\n    beginFrameQueue.addFrameIfNotExists(105, 1000080, false, false);\n    beginFrameQueue.addFrameIfNotExists(106, 1000096, true, false);\n    beginFrameQueue.setDropped(101, false);\n\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(105);\n\n    // Visualized frames: 100 (dropped), 103 (dropped) and 105 (non-dropped).\n    // The other frames that are neither drawn nor dropped (101, 102 and 104)\n    // are excluded from visualization.\n    assert.lengthOf(framesToVisualize, 3);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 100);\n    assert.strictEqual(framesToVisualize[0].startTime, 1000000);\n\n    assert.isTrue(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 103);\n    assert.strictEqual(framesToVisualize[1].startTime, 1000048);\n\n    assert.isFalse(framesToVisualize[2].isDropped);\n    assert.strictEqual(framesToVisualize[2].seqId, 105);\n    assert.strictEqual(framesToVisualize[2].startTime, 1000080);\n  });\n\n  it('pops processed frames out of the queue', () => {\n    const beginFrameQueue = new TimelineModel.TimelineFrameModel.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, 1000000, true, false);\n    beginFrameQueue.addFrameIfNotExists(101, 1000016, false, false);\n    beginFrameQueue.addFrameIfNotExists(102, 1000032, false, false);\n    beginFrameQueue.addFrameIfNotExists(103, 1000048, true, false);\n    beginFrameQueue.addFrameIfNotExists(104, 1000064, false, false);\n    beginFrameQueue.addFrameIfNotExists(105, 1000080, true, false);\n    beginFrameQueue.addFrameIfNotExists(106, 1000096, true, false);\n\n    // Pop frame 100, 101 (not visualized) and 102 from queue.\n    let framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(102);\n\n    assert.lengthOf(framesToVisualize, 2);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 100);\n    assert.strictEqual(framesToVisualize[0].startTime, 1000000);\n\n    assert.isFalse(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 102);\n    assert.strictEqual(framesToVisualize[1].startTime, 1000032);\n\n    // Pop frame 103, 104 (not visualized) and 105 from queue\n    framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(105);\n\n    assert.lengthOf(framesToVisualize, 2);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 103);\n    assert.strictEqual(framesToVisualize[0].startTime, 1000048);\n\n    assert.isTrue(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 105);\n    assert.strictEqual(framesToVisualize[1].startTime, 1000080);\n\n    // Pop frame 106 from queue\n    framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(106);\n\n    assert.lengthOf(framesToVisualize, 1);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 106);\n    assert.strictEqual(framesToVisualize[0].startTime, 1000096);\n  });\n});\n"]}