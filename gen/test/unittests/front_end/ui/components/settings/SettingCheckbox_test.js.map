{"version":3,"file":"SettingCheckbox_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/ui/components/settings/SettingCheckbox_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,gEAAgE,CAAC;AAC3F,OAAO,EAAC,aAAa,EAAE,gBAAgB,EAAE,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AACrG,OAAO,EAAC,iBAAiB,EAAC,MAAM,wCAAwC,CAAC;AAEzE,SAAS,qBAAqB,CAAC,IAAkD;IAE/E,MAAM,SAAS,GAAG,IAAI,QAAQ,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;IACjE,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;IACtB,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAChC,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAEvC,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC7D,aAAa,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IAE1C,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,CAAC;AAC/B,CAAC;AAED,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,OAAO,GAAG,iBAAiB,CAAU,SAAS,EAAE,IAAI,CAAC,CAAC;QAC5D,MAAM,EAAC,QAAQ,EAAC,GAAG,qBAAqB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;QAEpD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,OAAO,GAAG,iBAAiB,CAAU,SAAS,EAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,EAAC,QAAQ,EAAC,GAAG,qBAAqB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;QAEpD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,OAAO,GAAG,iBAAiB,CAAU,SAAS,EAAE,IAAI,CAAC,CAAC;QAC5D,MAAM,EAAC,QAAQ,EAAC,GAAG,qBAAqB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;QAEpD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEnB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,QAAQ,GAAG,iBAAiB,CAAU,UAAU,EAAE,IAAI,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,iBAAiB,CAAU,UAAU,EAAE,IAAI,CAAC,CAAC;QAC9D,MAAM,EAAC,SAAS,EAAE,QAAQ,EAAC,GAAG,qBAAqB,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAC,CAAC,CAAC;QAEzE,SAAS,CAAC,IAAI,GAAG,EAAC,OAAO,EAAE,QAAQ,EAAC,CAAC;QACrC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEpB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,OAAO,GAAG,iBAAiB,CAAU,SAAS,EAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,EAAC,QAAQ,EAAC,GAAG,qBAAqB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;QAEpD,QAAQ,CAAC,KAAK,EAAE,CAAC;QAEjB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,OAAO,GAAG,iBAAiB,CAAU,SAAS,EAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,EAAC,QAAQ,EAAC,GAAG,qBAAqB,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAEpE,QAAQ,CAAC,KAAK,EAAE,CAAC;QAEjB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Settings from '../../../../../../front_end/ui/components/settings/settings.js';\nimport {assertElement, assertShadowRoot, renderElementIntoDOM} from '../../../helpers/DOMHelpers.js';\nimport {createFakeSetting} from '../../../helpers/EnvironmentHelpers.js';\n\nfunction renderSettingCheckbox(data: Settings.SettingCheckbox.SettingCheckboxData):\n    {component: Settings.SettingCheckbox.SettingCheckbox, checkbox: HTMLInputElement} {\n  const component = new Settings.SettingCheckbox.SettingCheckbox();\n  component.data = data;\n  renderElementIntoDOM(component);\n  assertShadowRoot(component.shadowRoot);\n\n  const checkbox = component.shadowRoot.querySelector('input');\n  assertElement(checkbox, HTMLInputElement);\n\n  return {component, checkbox};\n}\n\ndescribe('SettingCheckbox', () => {\n  it('renders the checkbox ticked when the setting is enabled', () => {\n    const setting = createFakeSetting<boolean>('setting', true);\n    const {checkbox} = renderSettingCheckbox({setting});\n\n    assert.isTrue(checkbox.checked);\n  });\n\n  it('renders the checkbox unticked when the setting is disabled', () => {\n    const setting = createFakeSetting<boolean>('setting', false);\n    const {checkbox} = renderSettingCheckbox({setting});\n\n    assert.isFalse(checkbox.checked);\n  });\n\n  it('updates the checkbox when the setting changes', () => {\n    const setting = createFakeSetting<boolean>('setting', true);\n    const {checkbox} = renderSettingCheckbox({setting});\n\n    setting.set(false);\n\n    assert.isFalse(checkbox.checked);\n  });\n\n  it('can be reassigned to a different settings', () => {\n    const setting1 = createFakeSetting<boolean>('setting1', true);\n    const setting2 = createFakeSetting<boolean>('setting2', true);\n    const {component, checkbox} = renderSettingCheckbox({setting: setting1});\n\n    component.data = {setting: setting2};\n    setting1.set(false);\n\n    assert.isTrue(checkbox.checked);\n  });\n\n  it('changes the setting when the checkbox changes', () => {\n    const setting = createFakeSetting<boolean>('setting', false);\n    const {checkbox} = renderSettingCheckbox({setting});\n\n    checkbox.click();\n\n    assert.isTrue(setting.get());\n  });\n\n  it('ignores clicks when disabled', () => {\n    const setting = createFakeSetting<boolean>('setting', false);\n    const {checkbox} = renderSettingCheckbox({setting, disabled: true});\n\n    checkbox.click();\n\n    assert.isFalse(setting.get());\n  });\n});\n"]}