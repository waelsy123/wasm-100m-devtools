{"version":3,"file":"LinearMemoryInspector_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/ui/components/linear_memory_inspector/LinearMemoryInspector_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LinearMemoryInspectorModule from '../../../../../../front_end/ui/components/linear_memory_inspector/linear_memory_inspector.js';\nimport {dispatchClickEvent, getElementsWithinComponent, getElementWithinComponent, getEventPromise, renderElementIntoDOM} from '../../../helpers/DOMHelpers.js';\nimport {describeWithLocale} from '../../../helpers/EnvironmentHelpers.js';\n\nimport {NAVIGATOR_ADDRESS_SELECTOR, NAVIGATOR_HISTORY_BUTTON_SELECTOR, NAVIGATOR_PAGE_BUTTON_SELECTOR} from './LinearMemoryNavigator_test.js';\nimport {ENDIANNESS_SELECTOR} from './LinearMemoryValueInterpreter_test.js';\nimport {VIEWER_BYTE_CELL_SELECTOR} from './LinearMemoryViewer_test.js';\nimport {DISPLAY_JUMP_TO_POINTER_BUTTON_SELECTOR} from './ValueInterpreterDisplay_test.js';\n\nconst {assert} = chai;\n\nconst NAVIGATOR_SELECTOR = 'devtools-linear-memory-inspector-navigator';\nconst VIEWER_SELECTOR = 'devtools-linear-memory-inspector-viewer';\nconst INTERPRETER_SELECTOR = 'devtools-linear-memory-inspector-interpreter';\n\ndescribeWithLocale('LinearMemoryInspector', () => {\n  function getViewer(component: LinearMemoryInspectorModule.LinearMemoryInspector.LinearMemoryInspector) {\n    return getElementWithinComponent(\n        component, VIEWER_SELECTOR, LinearMemoryInspectorModule.LinearMemoryViewer.LinearMemoryViewer);\n  }\n\n  function getNavigator(component: LinearMemoryInspectorModule.LinearMemoryInspector.LinearMemoryInspector) {\n    return getElementWithinComponent(\n        component, NAVIGATOR_SELECTOR, LinearMemoryInspectorModule.LinearMemoryNavigator.LinearMemoryNavigator);\n  }\n\n  function getValueInterpreter(component: LinearMemoryInspectorModule.LinearMemoryInspector.LinearMemoryInspector) {\n    return getElementWithinComponent(\n        component, INTERPRETER_SELECTOR,\n        LinearMemoryInspectorModule.LinearMemoryValueInterpreter.LinearMemoryValueInterpreter);\n  }\n\n  function setUpComponent() {\n    const component = new LinearMemoryInspectorModule.LinearMemoryInspector.LinearMemoryInspector();\n\n    const flexWrapper = document.createElement('div');\n    flexWrapper.style.width = '500px';\n    flexWrapper.style.height = '500px';\n    flexWrapper.style.display = 'flex';\n    flexWrapper.appendChild(component);\n    renderElementIntoDOM(flexWrapper);\n\n    const size = 1000;\n    const memory = [];\n    for (let i = 0; i < size; ++i) {\n      memory[i] = i;\n    }\n    const data = {\n      memory: new Uint8Array(memory),\n      address: 20,\n      memoryOffset: 0,\n      outerMemoryLength: memory.length,\n      endianness: LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set<LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.ValueType>(\n          LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.getDefaultValueTypeMapping().keys()),\n    };\n    component.data = data;\n\n    return {component, data};\n  }\n\n  function triggerAddressChangedEvent(\n      component: LinearMemoryInspectorModule.LinearMemoryInspector.LinearMemoryInspector, address: string,\n      mode: LinearMemoryInspectorModule.LinearMemoryNavigator.Mode) {\n    const navigator = getNavigator(component);\n    const changeEvent = new LinearMemoryInspectorModule.LinearMemoryNavigator.AddressInputChangedEvent(address, mode);\n    navigator.dispatchEvent(changeEvent);\n  }\n\n  function assertUpdatesInNavigator(\n      navigator: LinearMemoryInspectorModule.LinearMemoryNavigator.LinearMemoryNavigator, expectedAddress: string,\n      expectedTooltip: string) {\n    const address = getElementWithinComponent(navigator, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n    const addressValue = address.value;\n    assert.strictEqual(addressValue, expectedAddress);\n    assert.strictEqual(address.title, expectedTooltip);\n  }\n\n  it('renders the navigator component', () => {\n    const {component} = setUpComponent();\n    const navigator = getNavigator(component);\n    assert.isNotNull(navigator);\n  });\n\n  it('renders the viewer component', () => {\n    const {component} = setUpComponent();\n    const viewer = getViewer(component);\n    assert.isNotNull(viewer);\n  });\n\n  it('renders the interpreter component', () => {\n    const {component} = setUpComponent();\n    const interpreter = getValueInterpreter(component);\n    assert.isNotNull(interpreter);\n  });\n\n  it('only saves history entries if addresses differ', async () => {\n    const {component, data} = setUpComponent();\n    // Set the address to zero to avoid the LMI to jump around in terms of addresses\n    // before the LMI is completely rendered (it requires two rendering processes,\n    // meanwhile our test might have already started).\n    data.address = 0;\n    component.data = data;\n\n    const navigator = getNavigator(component);\n    const buttons = getElementsWithinComponent(navigator, NAVIGATOR_HISTORY_BUTTON_SELECTOR, HTMLButtonElement);\n    const [backwardButton] = buttons;\n\n    const viewer = getViewer(component);\n    const byteCells = getElementsWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR, HTMLSpanElement);\n\n    const byteIndices = [2, 1, 1, 2];\n    const expectedHistory = [2, 1, 2];\n\n    for (const index of byteIndices) {\n      const byteSelectedPromise =\n          getEventPromise<LinearMemoryInspectorModule.LinearMemoryViewer.ByteSelectedEvent>(viewer, 'byteselected');\n      dispatchClickEvent(byteCells[index]);\n      await byteSelectedPromise;\n    }\n\n    const navigatorAddress = getElementWithinComponent(navigator, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n    for (const index of expectedHistory) {\n      assert.strictEqual(parseInt(navigatorAddress.value, 16), index);\n      dispatchClickEvent(backwardButton);\n    }\n  });\n\n  it('can navigate addresses back and forth in history', async () => {\n    const {component, data: {address}} = setUpComponent();\n\n    const navigator = getNavigator(component);\n    const buttons = getElementsWithinComponent(navigator, NAVIGATOR_HISTORY_BUTTON_SELECTOR, HTMLButtonElement);\n    const [backwardButton, forwardButton] = buttons;\n\n    const viewer = getViewer(component);\n    const byteCells = getElementsWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR, HTMLSpanElement);\n\n    const visitedByteValue = [address];\n    const historyLength = Math.min(byteCells.length, 10);\n\n    for (let i = 1; i < historyLength; ++i) {\n      const byteSelectedPromise =\n          getEventPromise<LinearMemoryInspectorModule.LinearMemoryViewer.ByteSelectedEvent>(viewer, 'byteselected');\n      dispatchClickEvent(byteCells[i]);\n      const byteSelectedEvent = await byteSelectedPromise;\n      visitedByteValue.push(byteSelectedEvent.data);\n    }\n\n    for (let i = historyLength - 1; i >= 0; --i) {\n      const currentByteValue =\n          getElementWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR + '.selected', HTMLSpanElement);\n      assert.strictEqual(parseInt(currentByteValue.innerText, 16), visitedByteValue[i]);\n      dispatchClickEvent(backwardButton);\n    }\n\n    for (let i = 0; i < historyLength; ++i) {\n      const currentByteValue =\n          getElementWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR + '.selected', HTMLSpanElement);\n      assert.strictEqual(parseInt(currentByteValue.innerText, 16), visitedByteValue[i]);\n\n      dispatchClickEvent(forwardButton);\n    }\n  });\n\n  it('can turn the page back and forth', () => {\n    const {component} = setUpComponent();\n    const navigator = getNavigator(component);\n    const buttons = getElementsWithinComponent(navigator, NAVIGATOR_PAGE_BUTTON_SELECTOR, HTMLButtonElement);\n    const [backwardButton, forwardButton] = buttons;\n\n    const address = getElementWithinComponent(navigator, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n    const addressBefore = parseInt(address.value, 16);\n\n    const viewer = getViewer(component);\n    const bytesShown = getElementsWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR, HTMLSpanElement);\n    const numBytesPerPage = bytesShown.length;\n\n    dispatchClickEvent(forwardButton);\n    let addressAfter = parseInt(address.value, 16);\n    let expectedAddressAfter = addressBefore + numBytesPerPage;\n    assert.strictEqual(addressAfter, expectedAddressAfter);\n\n    dispatchClickEvent(backwardButton);\n    addressAfter = parseInt(address.value, 16);\n    expectedAddressAfter -= numBytesPerPage;\n    assert.strictEqual(addressAfter, Math.max(0, expectedAddressAfter));\n  });\n\n  it('synchronizes selected addresses in navigator and viewer', () => {\n    const {component, data} = setUpComponent();\n    const navigator = getNavigator(component);\n\n    const address = getElementWithinComponent(navigator, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n    const viewer = getViewer(component);\n    const selectedByte = getElementWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR + '.selected', HTMLSpanElement);\n\n    const actualByteValue = parseInt(selectedByte.innerText, 16);\n    const expectedByteValue = data.memory[parseInt(address.value, 16)];\n    assert.strictEqual(actualByteValue, expectedByteValue);\n  });\n\n  it('can change endianness settings on event', () => {\n    const {component} = setUpComponent();\n    const interpreter = getValueInterpreter(component);\n    const select = getElementWithinComponent(interpreter, ENDIANNESS_SELECTOR, HTMLSelectElement);\n    assert.deepEqual(select.value, LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.Endianness.Little);\n\n    const endianSetting = LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.Endianness.Big;\n    const event = new LinearMemoryInspectorModule.LinearMemoryValueInterpreter.EndiannessChangedEvent(endianSetting);\n    interpreter.dispatchEvent(event);\n\n    assert.deepEqual(select.value, event.data);\n  });\n\n  it('updates current address if user triggers a jumptopointeraddress event', () => {\n    const {component, data} = setUpComponent();\n    data.valueTypes = new Set([LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.ValueType.Pointer32]);\n    data.memory = new Uint8Array([2, 0, 0, 0]);\n    data.outerMemoryLength = data.memory.length;\n    data.address = 0;\n    data.endianness = LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.Endianness.Little;\n    component.data = data;\n\n    const interpreter = getValueInterpreter(component);\n    const display = getElementWithinComponent(\n        interpreter, 'devtools-linear-memory-inspector-interpreter-display',\n        LinearMemoryInspectorModule.ValueInterpreterDisplay.ValueInterpreterDisplay);\n    const button = getElementWithinComponent(display, DISPLAY_JUMP_TO_POINTER_BUTTON_SELECTOR, HTMLButtonElement);\n    dispatchClickEvent(button);\n\n    const navigator = getNavigator(component);\n    const selectedByte = getElementWithinComponent(navigator, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n\n    const actualSelectedByte = parseInt(selectedByte.value, 16);\n    const expectedSelectedByte = new DataView(data.memory.buffer).getUint32(0, true);\n    assert.strictEqual(actualSelectedByte, expectedSelectedByte);\n  });\n\n  it('leaves the navigator address as inputted by user on edit event', () => {\n    const {component} = setUpComponent();\n    const navigator = getNavigator(component);\n    triggerAddressChangedEvent(component, '2', LinearMemoryInspectorModule.LinearMemoryNavigator.Mode.Edit);\n    assertUpdatesInNavigator(navigator, '2', 'Enter address');\n  });\n\n  it('changes navigator address (to hex) on valid user submit event', () => {\n    const {component} = setUpComponent();\n    const navigator = getNavigator(component);\n    triggerAddressChangedEvent(component, '2', LinearMemoryInspectorModule.LinearMemoryNavigator.Mode.Submitted);\n    assertUpdatesInNavigator(navigator, '0x00000002', 'Enter address');\n  });\n\n  it('leaves the navigator address as inputted by user on invalid edit event', () => {\n    const {component} = setUpComponent();\n    const navigator = getNavigator(component);\n    triggerAddressChangedEvent(component, '-2', LinearMemoryInspectorModule.LinearMemoryNavigator.Mode.Edit);\n    assertUpdatesInNavigator(navigator, '-2', 'Address has to be a number between 0x00000000 and 0x000003E8');\n  });\n\n  it('leaves the navigator address as inputted by user on invalid submit event', () => {\n    const {component} = setUpComponent();\n    const navigator = getNavigator(component);\n    triggerAddressChangedEvent(component, '-2', LinearMemoryInspectorModule.LinearMemoryNavigator.Mode.Submitted);\n    assertUpdatesInNavigator(navigator, '-2', 'Address has to be a number between 0x00000000 and 0x000003E8');\n  });\n\n  it('triggers MemoryRequestEvent on refresh', async () => {\n    const {component, data} = setUpComponent();\n    const navigator = getNavigator(component);\n    const viewer = getViewer(component);\n\n    const bytes = getElementsWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR, HTMLSpanElement);\n    const numBytesPerPage = bytes.length;\n\n    const eventPromise = getEventPromise<LinearMemoryInspectorModule.LinearMemoryInspector.MemoryRequestEvent>(\n        component, 'memoryrequest');\n    navigator.dispatchEvent(new LinearMemoryInspectorModule.LinearMemoryNavigator.RefreshRequestedEvent());\n    const event = await eventPromise;\n    const {start, end, address} = event.data;\n\n    assert.strictEqual(address, data.address);\n    assert.isAbove(end, start);\n    assert.strictEqual(numBytesPerPage, end - start);\n  });\n\n  it('triggers event on address change when byte is selected', async () => {\n    const {component, data} = setUpComponent();\n    const eventPromise = getEventPromise<LinearMemoryInspectorModule.LinearMemoryInspector.AddressChangedEvent>(\n        component, 'addresschanged');\n    const viewer = getViewer(component);\n    const bytes = getElementsWithinComponent(viewer, VIEWER_BYTE_CELL_SELECTOR, HTMLSpanElement);\n    const numBytesPerPage = bytes.length;\n    const pageNumber = data.address / numBytesPerPage;\n    const addressOfFirstByte = pageNumber * numBytesPerPage + 1;\n    dispatchClickEvent(bytes[1]);\n    const event = await eventPromise;\n    assert.strictEqual(event.data, addressOfFirstByte);\n  });\n\n  it('triggers event on address change when data is set', async () => {\n    const {component, data} = setUpComponent();\n    const eventPromise = getEventPromise<LinearMemoryInspectorModule.LinearMemoryInspector.AddressChangedEvent>(\n        component, 'addresschanged');\n    data.address = 10;\n    component.data = data;\n    const event = await eventPromise;\n    assert.strictEqual(event.data, data.address);\n  });\n\n  it('triggers event on settings changed when value type is changed', async () => {\n    const {component} = setUpComponent();\n    const interpreter = getValueInterpreter(component);\n    const eventPromise = getEventPromise<LinearMemoryInspectorModule.LinearMemoryInspector.SettingsChangedEvent>(\n        component, 'settingschanged');\n    const valueType = LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.ValueType.Int16;\n    interpreter.dispatchEvent(\n        new LinearMemoryInspectorModule.LinearMemoryValueInterpreter.ValueTypeToggledEvent(valueType, false));\n    const event = await eventPromise;\n    assert.isTrue(event.data.valueTypes.size > 1);\n    assert.isFalse(event.data.valueTypes.has(valueType));\n  });\n\n  it('triggers event on settings changed when value type mode is changed', async () => {\n    const {component} = setUpComponent();\n    const interpreter = getValueInterpreter(component);\n    const eventPromise = getEventPromise<LinearMemoryInspectorModule.LinearMemoryInspector.SettingsChangedEvent>(\n        component, 'settingschanged');\n    const valueType = LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.ValueType.Int16;\n    const valueTypeMode = LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal;\n    interpreter.dispatchEvent(\n        new LinearMemoryInspectorModule.ValueInterpreterDisplay.ValueTypeModeChangedEvent(valueType, valueTypeMode));\n    const event = await eventPromise;\n    assert.isTrue(event.data.valueTypes.has(valueType));\n    assert.strictEqual(event.data.modes.get(valueType), valueTypeMode);\n  });\n\n  it('triggers event on settings changed when endianness is changed', async () => {\n    const {component} = setUpComponent();\n    const interpreter = getValueInterpreter(component);\n    const eventPromise = getEventPromise<LinearMemoryInspectorModule.LinearMemoryInspector.SettingsChangedEvent>(\n        component, 'settingschanged');\n    const endianness = LinearMemoryInspectorModule.ValueInterpreterDisplayUtils.Endianness.Big;\n    interpreter.dispatchEvent(\n        new LinearMemoryInspectorModule.LinearMemoryValueInterpreter.EndiannessChangedEvent(endianness));\n    const event = await eventPromise;\n    assert.strictEqual(event.data.endianness, endianness);\n  });\n\n  it('formats a hexadecimal number', () => {\n    const number = 23;\n    assert.strictEqual(\n        LinearMemoryInspectorModule.LinearMemoryInspectorUtils.toHexString({number, pad: 0, prefix: false}), '17');\n  });\n\n  it('formats a hexadecimal number and adds padding', () => {\n    const number = 23;\n    assert.strictEqual(\n        LinearMemoryInspectorModule.LinearMemoryInspectorUtils.toHexString({number, pad: 5, prefix: false}), '00017');\n  });\n\n  it('formats a hexadecimal number and adds prefix', () => {\n    const number = 23;\n    assert.strictEqual(\n        LinearMemoryInspectorModule.LinearMemoryInspectorUtils.toHexString({number, pad: 5, prefix: true}), '0x00017');\n  });\n\n  it('can parse a valid hexadecimal address', () => {\n    const address = '0xa';\n    const parsedAddress = LinearMemoryInspectorModule.LinearMemoryInspectorUtils.parseAddress(address);\n    assert.strictEqual(parsedAddress, 10);\n  });\n\n  it('can parse a valid decimal address', () => {\n    const address = '20';\n    const parsedAddress = LinearMemoryInspectorModule.LinearMemoryInspectorUtils.parseAddress(address);\n    assert.strictEqual(parsedAddress, 20);\n  });\n\n  it('returns undefined on parsing invalid address', () => {\n    const address = '20a';\n    const parsedAddress = LinearMemoryInspectorModule.LinearMemoryInspectorUtils.parseAddress(address);\n    assert.strictEqual(parsedAddress, undefined);\n  });\n\n  it('returns undefined on parsing negative address', () => {\n    const address = '-20';\n    const parsedAddress = LinearMemoryInspectorModule.LinearMemoryInspectorUtils.parseAddress(address);\n    assert.strictEqual(parsedAddress, undefined);\n  });\n});\n"]}