{"version":3,"file":"LinearMemoryInspectorController_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../../../../../front_end/core/sdk/sdk.js';\nimport * as LinearMemoryInspector from '../../../../../../front_end/ui/components/linear_memory_inspector/linear_memory_inspector.js';\nimport {describeWithEnvironment} from '../../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\nconst {LinearMemoryInspectorController, ValueInterpreterDisplayUtils} = LinearMemoryInspector;\n\nclass MockRemoteObject extends SDK.RemoteObject.LocalJSONObject {\n  private objSubtype?: string;\n\n  constructor(array: ArrayBuffer) {\n    super(array);\n  }\n\n  arrayBufferByteLength() {\n    return this.value.byteLength;\n  }\n\n  get subtype(): string|undefined {\n    return 'arraybuffer';\n  }\n}\n\nfunction createWrapper(array: Uint8Array) {\n  const mockRemoteObj = new MockRemoteObject(array.buffer);\n  const mockRemoteArrayBuffer = new SDK.RemoteObject.RemoteArrayBuffer(mockRemoteObj);\n  return new LinearMemoryInspectorController.RemoteArrayBufferWrapper(mockRemoteArrayBuffer);\n}\n\ndescribeWithEnvironment('LinearMemoryInspectorController', () => {\n  it('throws an error on an invalid (out-of-bounds) memory range request', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n    try {\n      await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 10, 20);\n      throw new Error('Function did now throw.');\n    } catch (e) {\n      const error = e as Error;\n      assert.strictEqual(error.message, 'Requested range is out of bounds.');\n    }\n  });\n\n  it('throws an error on an invalid memory range request', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n    try {\n      await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 20, 10);\n      throw new Error('Function did now throw.');\n    } catch (e) {\n      const error = e as Error;\n      assert.strictEqual(error.message, 'Requested range is out of bounds.');\n    }\n  });\n\n  it('can pull updated data on memory range request', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n    const valuesBefore =\n        await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 0, array.length);\n\n    assert.strictEqual(valuesBefore.length, array.length);\n    for (let i = 0; i < array.length; ++i) {\n      assert.strictEqual(valuesBefore[i], array[i]);\n    }\n\n    const changedIndex = 0;\n    const changedValue = 10;\n    array[changedIndex] = changedValue;\n    const valuesAfter =\n        await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 0, array.length);\n\n    assert.strictEqual(valuesAfter.length, valuesBefore.length);\n    for (let i = 0; i < valuesBefore.length; ++i) {\n      if (i === changedIndex) {\n        assert.strictEqual(valuesAfter[i], changedValue);\n      } else {\n        assert.strictEqual(valuesAfter[i], valuesBefore[i]);\n      }\n    }\n  });\n\n  it('triggers saving and loading of settings on settings changed event', () => {\n    const instance = LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n\n    const valueTypes =\n        new Set([ValueInterpreterDisplayUtils.ValueType.Int16, ValueInterpreterDisplayUtils.ValueType.Float32]);\n    const valueTypeModes = new Map(\n        [[ValueInterpreterDisplayUtils.ValueType.Int16, ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal]]);\n    const settings = {\n      valueTypes,\n      modes: valueTypeModes,\n      endianness: ValueInterpreterDisplayUtils.Endianness.Little,\n    };\n    const defaultSettings = instance.loadSettings();\n    instance.saveSettings(settings);\n\n    assert.notDeepEqual(defaultSettings, settings);\n\n    const actualSettings = instance.loadSettings();\n    assert.deepEqual(actualSettings, settings);\n  });\n});\n\ndescribe('RemoteArrayBufferWrapper', () => {\n  it('correctly wraps the remote object', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n\n    assert.strictEqual(wrapper.length(), array.length);\n\n    const extractedArray = await wrapper.getRange(0, 3);\n    assert.lengthOf(extractedArray, 3);\n\n    for (let i = 0; i < 3; ++i) {\n      assert.deepEqual(array[i], extractedArray[i]);\n    }\n  });\n});\n"]}