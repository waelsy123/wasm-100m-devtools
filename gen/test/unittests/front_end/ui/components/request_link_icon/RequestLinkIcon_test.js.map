{"version":3,"file":"RequestLinkIcon_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/ui/components/request_link_icon/RequestLinkIcon_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,wBAAwB,EAAC,MAAM,uDAAuD,CAAC;AAG/F,OAAO,KAAK,MAAM,MAAM,mDAAmD,CAAC;AAC5E,OAAO,KAAK,eAAe,MAAM,kFAAkF,CAAC;AACpH,OAAO,KAAK,UAAU,MAAM,sEAAsE,CAAC;AACnG,OAAO,EAAC,aAAa,EAAE,gBAAgB,EAAE,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AACrG,OAAO,KAAK,WAAW,MAAM,oFAAoF,CAAC;AAElH,OAAO,EAAC,kBAAkB,EAAC,MAAM,wCAAwC,CAAC;AAE1E,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAE/E,MAAM,qBAAqB,GAAG,KAAK,EAAC,IAAyD,EAG1F,EAAE;IACH,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;IACxE,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;IACtB,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAChC,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACvC,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;IACzB,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,UAAU,EAAC,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,UAAsB,EAIpD,EAAE;IACF,MAAM,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;IACvD,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,SAAS,GAAG,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACnD,wBAAwB,CAAC,SAAS,CAAC,CAAC;IACpC,MAAM,KAAK,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACtD,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,aAAa,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QACtC,OAAO;YACL,IAAI;YACJ,SAAS;YACT,KAAK;SACN,CAAC;KACH;IACD,OAAO,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,UAAsB,EAIhD,EAAE;IACF,MAAM,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAC,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;IAC7D,OAAO;QACL,QAAQ,EAAE,IAAI,CAAC,IAAI;QACnB,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI;QACvC,gBAAgB,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;KAClD,CAAC;AACJ,CAAC,CAAC;AAOF,MAAM,mBAAmB;IACf,UAAU,GAA0C,IAAI,GAAG,EAAE,CAAC;IAEtE,OAAO,CAAC,SAAkB;QACxB,IAAI,CAAC,SAAS,EAAE;YACd,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;aAC9E;YACD,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;SACjD;QACD,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC,OAAO,CAAC;SACtB;QACD,IAAI,OAAO,GAA8D,GAAG,EAAE,GAAE,CAAC,CAAC;QAClF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAyC,CAAC,CAAC,EAAE;YACtE,OAAO,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;QACnD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,OAAO,CAAC,MAA8C,EAAE,SAAkB;QACxE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,EAAE;YAC5C,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;SACjD;QACD,SAAS,GAAG,SAAS,IAAI,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;QACnD,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACtB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;CACF;AAED,kBAAkB,CAAC,iBAAiB,EAAE,GAAG,EAAE;IACzC,MAAM,UAAU,GAAG,IAAkC,CAAC;IACtD,MAAM,UAAU,GAAG,IAAkC,CAAC;IAEtD,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,MAAM,WAAW,GAAG;YAClB,GAAG;gBACD,OAAO,oBAAoB,CAAC;YAC9B,CAAC;SACF,CAAC;QAEF,MAAM,4BAA4B,GAAG;YACnC,GAAG;gBACD,OAAO,qBAAqB,CAAC;YAC/B,CAAC;SACF,CAAC;QAEF,MAAM,sBAAsB,GAAG;YAC7B,KAAK,CAAC,OAAO;gBACX,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC;SACF,CAAC;QAEF,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAC;gBACxC,eAAe,EAAE,sBAAyE;aAC3F,CAAC,CAAC;YAEH,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,CAAC,UAAU,IAAI,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,2BAA2B,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,OAAO,EAAE,WAA2D;aACrE,CAAC,CAAC;YAEH,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,CAAC,UAAU,IAAI,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,OAAO,EAAE,WAA2D;gBACpE,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM,EAAC,KAAK,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,OAAO,EAAE,4BAA4E;gBACrF,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM,EAAC,KAAK,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,0BAA0B,EAAC;gBACzE,eAAe,EAAE,sBAAyE;gBAC1F,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM,EAAC,KAAK,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,OAAO,EAAE,WAA2D;aACrE,CAAC,CAAC;YAEH,MAAM,EAAC,gBAAgB,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,0BAA0B,EAAC;gBACzE,eAAe,EAAE,sBAAyE;aAC3F,CAAC,CAAC;YAEH,MAAM,EAAC,gBAAgB,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACnD,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,MAAM,WAAW,GAAG;YAClB,GAAG;gBACD,OAAO,oBAAoB,CAAC;YAC9B,CAAC;SACF,CAAC;QAEF,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;YAC3C,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,0BAA0B,EAAC;gBACzE,eAAe,EAAE,QAA2D;aAC7E,CAAC,CAAC;YAEH,MAAM,EAAC,gBAAgB,EAAE,sBAAsB,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YAC3E,MAAM,CAAC,UAAU,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;YAElD,QAAQ,CAAC,OAAO,CAAC,WAA2D,CAAC,CAAC;YAE9E,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,6DAA6D;YACrG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;YAEzB,MAAM,EAAC,gBAAgB,EAAE,qBAAqB,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YAC1E,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;YAC3C,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,0BAA0B,EAAC;gBACzE,eAAe,EAAE,QAA2D;gBAC5E,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM,EAAC,KAAK,EAAE,WAAW,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAEzC,QAAQ,CAAC,OAAO,CAAC,WAA2D,CAAC,CAAC;YAE9E,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,6DAA6D;YACrG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;YAEzB,MAAM,EAAC,KAAK,EAAE,UAAU,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;YAC3C,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,0BAA0B,EAAC;gBACzE,eAAe,EAAE,QAA2D;gBAC5E,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM,EAAC,QAAQ,EAAE,cAAc,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,EAAE,2BAA2B,CAAC,CAAC;YAEtE,QAAQ,CAAC,OAAO,CAAC,WAA2D,CAAC,CAAC;YAE9E,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,6DAA6D;YACrG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;YAEzB,MAAM,EAAC,QAAQ,EAAE,aAAa,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;YAC3C,MAAM,EAAC,UAAU,EAAE,SAAS,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC1D,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,0BAA0B,EAAC;gBACzE,eAAe,EAAE,QAA2D;gBAC5E,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM,EAAC,KAAK,EAAE,WAAW,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAEzC,MAAM,YAAY,GAAG;gBACnB,GAAG;oBACD,OAAO,oBAAoB,CAAC;gBAC9B,CAAC;gBACD,SAAS;oBACP,OAAO,UAAU,CAAC;gBACpB,CAAC;aACF,CAAC;YAEF,SAAS,CAAC,IAAI,GAAG;gBACf,eAAe,EAAE,EAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,0BAA0B,EAAC;gBACzE,eAAe,EAAE,QAA2D;gBAC5E,UAAU,EAAE,IAAI;aACjB,CAAC;YAEF,QAAQ,CAAC,OAAO,CAAC,YAA4D,CAAC,CAAC;YAE/E,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,6DAA6D;YACrG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;YAEzB,MAAM,EAAC,KAAK,EAAE,UAAU,EAAC,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,MAAM,WAAW,GAAG;YAClB,GAAG;gBACD,OAAO,oBAAoB,CAAC;YAC9B,CAAC;SACF,CAAC;QAEF,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC1D,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,OAAO,EAAE,WAA2D;gBACpE,UAAU,EAAE,IAAI;gBAChB,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,EAAC,IAAI,EAAC,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;YAE3C,IAAI,CAAC,KAAK,EAAE,CAAC;YAEb,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC1D,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,OAAO,EAAE,WAA2D;gBACpE,UAAU,EAAE,IAAI;gBAChB,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,EAAC,SAAS,EAAC,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;YAEhD,SAAS,CAAC,KAAK,EAAE,CAAC;YAElB,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC1D,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC/C,OAAO,EAAE,WAA2D;gBACpE,UAAU,EAAE,IAAI;gBAChB,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,EAAC,KAAK,EAAC,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;YAE5C,KAAK,EAAE,KAAK,EAAE,CAAC;YAEf,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../../../../../front_end/core/platform/platform.js';\nimport type * as Logs from '../../../../../../front_end/models/logs/logs.js';\nimport type * as SDK from '../../../../../../front_end/core/sdk/sdk.js';\nimport * as Common from '../../../../../../front_end/core/common/common.js';\nimport * as RequestLinkIcon from '../../../../../../front_end/ui/components/request_link_icon/request_link_icon.js';\nimport * as IconButton from '../../../../../../front_end/ui/components/icon_button/icon_button.js';\nimport {assertElement, assertShadowRoot, renderElementIntoDOM} from '../../../helpers/DOMHelpers.js';\nimport * as Coordinator from '../../../../../../front_end/ui/components/render_coordinator/render_coordinator.js';\nimport type * as Protocol from '../../../../../../front_end/generated/protocol.js';\nimport {describeWithLocale} from '../../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst renderRequestLinkIcon = async(data: RequestLinkIcon.RequestLinkIcon.RequestLinkIconData): Promise<{\n  component: RequestLinkIcon.RequestLinkIcon.RequestLinkIcon,\n  shadowRoot: ShadowRoot,\n}> => {\n  const component = new RequestLinkIcon.RequestLinkIcon.RequestLinkIcon();\n  component.data = data;\n  renderElementIntoDOM(component);\n  assertShadowRoot(component.shadowRoot);\n  await coordinator.done();\n  return {component, shadowRoot: component.shadowRoot};\n};\n\nexport const extractElements = (shadowRoot: ShadowRoot): {\n  icon: IconButton.Icon.Icon,\n  container: HTMLSpanElement,\n  label?: HTMLSpanElement,\n} => {\n  const icon = shadowRoot.querySelector('devtools-icon');\n  assertElement(icon, IconButton.Icon.Icon);\n  const container = shadowRoot.querySelector('span');\n  assertNotNullOrUndefined(container);\n  const label = shadowRoot.querySelector('span > span');\n  if (label !== null) {\n    assertElement(label, HTMLSpanElement);\n    return {\n      icon,\n      container,\n      label,\n    };\n  }\n  return {icon, container};\n};\n\nexport const extractData = (shadowRoot: ShadowRoot): {\n  iconData: IconButton.Icon.IconData,\n  label: string|null,\n  containerClasses: string[],\n} => {\n  const {icon, container, label} = extractElements(shadowRoot);\n  return {\n    iconData: icon.data,\n    label: label ? label.textContent : null,\n    containerClasses: Array.from(container.classList),\n  };\n};\n\ninterface MockRequestResolverEntry {\n  resolve: (request: SDK.NetworkRequest.NetworkRequest|null) => void;\n  promise: Promise<SDK.NetworkRequest.NetworkRequest|null>;\n}\n\nclass MockRequestResolver {\n  private promiseMap: Map<string, MockRequestResolverEntry> = new Map();\n\n  waitFor(requestId?: string) {\n    if (!requestId) {\n      if (this.promiseMap.size !== 1) {\n        throw new Error('more than one request being awaited, specify a request id');\n      }\n      requestId = this.promiseMap.keys().next().value;\n    }\n    requestId = requestId || '';\n    const entry = this.promiseMap.get(requestId);\n    if (entry) {\n      return entry.promise;\n    }\n    let resolve: (request: SDK.NetworkRequest.NetworkRequest|null) => void = () => {};\n    const promise = new Promise<SDK.NetworkRequest.NetworkRequest|null>(r => {\n      resolve = r;\n    });\n    this.promiseMap.set(requestId, {resolve, promise});\n    return promise;\n  }\n\n  resolve(result: SDK.NetworkRequest.NetworkRequest|null, requestId?: string): void {\n    if (!requestId && this.promiseMap.size === 1) {\n      requestId = this.promiseMap.keys().next().value;\n    }\n    requestId = requestId || result?.requestId() || '';\n    const entry = this.promiseMap.get(requestId);\n    if (!entry) {\n      throw new Error('resolve uninitialized');\n    }\n    entry.resolve(result);\n    this.promiseMap.delete(requestId);\n  }\n}\n\ndescribeWithLocale('RequestLinkIcon', () => {\n  const requestId1 = 'r1' as Protocol.Network.RequestId;\n  const requestId2 = 'r2' as Protocol.Network.RequestId;\n\n  describe('with simple requests', () => {\n    const mockRequest = {\n      url() {\n        return 'http://foo.bar/baz';\n      },\n    };\n\n    const mockRequestWithTrailingSlash = {\n      url() {\n        return 'http://foo.bar/baz/';\n      },\n    };\n\n    const failingRequestResolver = {\n      async waitFor() {\n        throw new Error('Couldn\\'t resolve');\n      },\n    };\n\n    it('renders correctly without a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1},\n        requestResolver: failingRequestResolver as unknown as Logs.RequestResolver.RequestResolver,\n      });\n\n      const {iconData, label} = extractData(shadowRoot);\n      assert.strictEqual('iconName' in iconData ? iconData.iconName : null, 'network_panel_icon');\n      assert.strictEqual(iconData.color, 'var(--issue-color-yellow)');\n      assert.isNull(label, 'Didn\\'t expect a label');\n    });\n\n    it('renders correctly with a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n      });\n\n      const {iconData, label} = extractData(shadowRoot);\n      assert.strictEqual('iconName' in iconData ? iconData.iconName : null, 'network_panel_icon');\n      assert.strictEqual(iconData.color, 'var(--color-link)');\n      assert.isNull(label, 'Didn\\'t expect a label');\n    });\n\n    it('renders the request label correctly without a trailing slash', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n      });\n\n      const {label} = extractData(shadowRoot);\n      assert.strictEqual(label, 'baz');\n    });\n\n    it('renders the request label correctly with a trailing slash', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequestWithTrailingSlash as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n      });\n\n      const {label} = extractData(shadowRoot);\n      assert.strictEqual(label, 'baz/');\n    });\n\n    it('renders the request label correctly without a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: failingRequestResolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      });\n\n      const {label} = extractData(shadowRoot);\n      assert.strictEqual(label, 'gamma');\n    });\n\n    it('the style reacts to the presence of a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n      });\n\n      const {containerClasses} = extractData(shadowRoot);\n      assert.include(containerClasses, 'link');\n    });\n\n    it('the style reacts to the absence of a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: failingRequestResolver as unknown as Logs.RequestResolver.RequestResolver,\n      });\n\n      const {containerClasses} = extractData(shadowRoot);\n      assert.notInclude(containerClasses, 'link');\n    });\n  });\n\n  describe('transitions upon request resolution', () => {\n    const mockRequest = {\n      url() {\n        return 'http://foo.bar/baz';\n      },\n    };\n\n    it('to change the style correctly', async () => {\n      const resolver = new MockRequestResolver();\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n      });\n\n      const {containerClasses: containerClassesBefore} = extractData(shadowRoot);\n      assert.notInclude(containerClassesBefore, 'link');\n\n      resolver.resolve(mockRequest as unknown as SDK.NetworkRequest.NetworkRequest);\n\n      await new Promise(r => setTimeout(r));  // Drain Microtask queue to get the cooridnator.write posted.\n      await coordinator.done();\n\n      const {containerClasses: containerClassesAfter} = extractData(shadowRoot);\n      assert.include(containerClassesAfter, 'link');\n    });\n\n    it('to set the label correctly', async () => {\n      const resolver = new MockRequestResolver();\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      });\n\n      const {label: labelBefore} = extractData(shadowRoot);\n      assert.strictEqual(labelBefore, 'gamma');\n\n      resolver.resolve(mockRequest as unknown as SDK.NetworkRequest.NetworkRequest);\n\n      await new Promise(r => setTimeout(r));  // Drain Microtask queue to get the cooridnator.write posted.\n      await coordinator.done();\n\n      const {label: labelAfter} = extractData(shadowRoot);\n      assert.strictEqual(labelAfter, 'baz');\n    });\n\n    it('to set icon color correctly', async () => {\n      const resolver = new MockRequestResolver();\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      });\n\n      const {iconData: iconDataBefore} = extractData(shadowRoot);\n      assert.strictEqual(iconDataBefore.color, 'var(--issue-color-yellow)');\n\n      resolver.resolve(mockRequest as unknown as SDK.NetworkRequest.NetworkRequest);\n\n      await new Promise(r => setTimeout(r));  // Drain Microtask queue to get the cooridnator.write posted.\n      await coordinator.done();\n\n      const {iconData: iconDataAfter} = extractData(shadowRoot);\n      assert.strictEqual(iconDataAfter.color, 'var(--color-link)');\n    });\n\n    it('handles multiple data assignments', async () => {\n      const resolver = new MockRequestResolver();\n      const {shadowRoot, component} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId2, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      });\n\n      const {label: labelBefore} = extractData(shadowRoot);\n      assert.strictEqual(labelBefore, 'gamma');\n\n      const mockRequest2 = {\n        url() {\n          return 'http://foo.bar/baz';\n        },\n        requestId() {\n          return requestId1;\n        },\n      };\n\n      component.data = {\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      };\n\n      resolver.resolve(mockRequest2 as unknown as SDK.NetworkRequest.NetworkRequest);\n\n      await new Promise(r => setTimeout(r));  // Drain Microtask queue to get the cooridnator.write posted.\n      await coordinator.done();\n\n      const {label: labelAfter} = extractData(shadowRoot);\n      assert.strictEqual(labelAfter, 'baz');\n    });\n  });\n\n  describe('handles clicks correctly', () => {\n    const mockRequest = {\n      url() {\n        return 'http://foo.bar/baz';\n      },\n    };\n\n    it('if the icon is clicked', async () => {\n      const revealOverride = sinon.fake(Common.Revealer.reveal);\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n        revealOverride,\n      });\n\n      const {icon} = extractElements(shadowRoot);\n\n      icon.click();\n\n      assert.isTrue(revealOverride.called);\n    });\n\n    it('if the container is clicked', async () => {\n      const revealOverride = sinon.fake(Common.Revealer.reveal);\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n        revealOverride,\n      });\n\n      const {container} = extractElements(shadowRoot);\n\n      container.click();\n\n      assert.isTrue(revealOverride.called);\n    });\n\n    it('if the label is clicked', async () => {\n      const revealOverride = sinon.fake(Common.Revealer.reveal);\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n        revealOverride,\n      });\n\n      const {label} = extractElements(shadowRoot);\n\n      label?.click();\n\n      assert.isTrue(revealOverride.called);\n    });\n  });\n});\n"]}