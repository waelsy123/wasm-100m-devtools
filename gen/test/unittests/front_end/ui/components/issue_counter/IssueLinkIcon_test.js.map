{"version":3,"file":"IssueLinkIcon_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/ui/components/issue_counter/IssueLinkIcon_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../../../front_end/core/common/common.js';\nimport {assertNotNullOrUndefined} from '../../../../../../front_end/core/platform/platform.js';\nimport * as IconButton from '../../../../../../front_end/ui/components/icon_button/icon_button.js';\nimport * as IssueCounter from '../../../../../../front_end/ui/components/issue_counter/issue_counter.js';\nimport * as Coordinator from '../../../../../../front_end/ui/components/render_coordinator/render_coordinator.js';\nimport {assertElement, assertShadowRoot, renderElementIntoDOM} from '../../../helpers/DOMHelpers.js';\nimport {describeWithLocale} from '../../../helpers/EnvironmentHelpers.js';\n\nimport type * as Protocol from '../../../../../../front_end/generated/protocol.js';\nimport * as IssuesManager from '../../../../../../front_end/models/issues_manager/issues_manager.js';\n\nconst {assert} = chai;\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst renderIssueLinkIcon = async(data: IssueCounter.IssueLinkIcon.IssueLinkIconData): Promise<{\n  component: IssueCounter.IssueLinkIcon.IssueLinkIcon,\n  shadowRoot: ShadowRoot,\n}> => {\n  const component = new IssueCounter.IssueLinkIcon.IssueLinkIcon();\n  component.data = data;\n  renderElementIntoDOM(component);\n  assertShadowRoot(component.shadowRoot);\n  await coordinator.done();\n  return {component, shadowRoot: component.shadowRoot};\n};\n\nexport const extractElements = (shadowRoot: ShadowRoot): {\n  icon: IconButton.Icon.Icon,\n  container: HTMLSpanElement,\n} => {\n  const icon = shadowRoot.querySelector('devtools-icon');\n  assertElement(icon, IconButton.Icon.Icon);\n  const container = shadowRoot.querySelector('span');\n  assertNotNullOrUndefined(container);\n  return {icon, container};\n};\n\nexport const extractData = (shadowRoot: ShadowRoot): {\n  iconData: IconButton.Icon.IconData,\n  containerClasses: string[],\n} => {\n  const {icon, container} = extractElements(shadowRoot);\n  return {\n    iconData: icon.data,\n    containerClasses: Array.from(container.classList),\n  };\n};\n\ninterface MockIssueResolverEntry {\n  resolve: (issue: IssuesManager.Issue.Issue|null) => void;\n  promise: Promise<IssuesManager.Issue.Issue|null>;\n}\n\nclass MockIssueResolver {\n  private promiseMap: Map<string, MockIssueResolverEntry> = new Map();\n\n  waitFor(issueId?: string) {\n    if (!issueId) {\n      if (this.promiseMap.size !== 1) {\n        throw new Error('more than one issue being awaited, specify a issue id');\n      }\n      issueId = this.promiseMap.keys().next().value;\n    }\n    issueId = issueId || '';\n    const entry = this.promiseMap.get(issueId);\n    if (entry) {\n      return entry.promise;\n    }\n    let resolve: (issue: IssuesManager.Issue.Issue|null) => void = () => {};\n    const promise = new Promise<IssuesManager.Issue.Issue|null>(r => {\n      resolve = r;\n    });\n    this.promiseMap.set(issueId, {resolve, promise});\n    return promise;\n  }\n\n  resolve(result: IssuesManager.Issue.Issue|null, issueId?: string): void {\n    if (!issueId && this.promiseMap.size === 1) {\n      issueId = this.promiseMap.keys().next().value;\n    }\n    issueId = issueId || result?.getIssueId() || '';\n    const entry = this.promiseMap.get(issueId);\n    if (!entry) {\n      throw new Error('resolve uninitialized');\n    }\n    entry.resolve(result);\n    this.promiseMap.delete(issueId);\n  }\n}\n\ndescribeWithLocale('IssueLinkIcon', () => {\n  const issueId = 'issue1' as Protocol.Audits.IssueId;\n  const defaultIcon = {iconName: 'issue-questionmark-icon', color: 'var(--color-text-secondary)'};\n  const breakingChangeIcon =\n      IssueCounter.IssueCounter.getIssueKindIconData(IssuesManager.Issue.IssueKind.BreakingChange);\n  const pageErrorIcon = IssueCounter.IssueCounter.getIssueKindIconData(IssuesManager.Issue.IssueKind.PageError);\n  const mockIssue = {\n    getKind() {\n      return IssuesManager.Issue.IssueKind.PageError;\n    },\n    getIssueId() {\n      return issueId;\n    },\n  };\n\n  describe('with simple issues', () => {\n    const failingIssueResolver = {\n      async waitFor() {\n        throw new Error('Couldn\\'t resolve');\n      },\n    };\n\n    it('renders correctly without an issue', async () => {\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issueId,\n        issueResolver: failingIssueResolver as unknown as IssuesManager.IssueResolver.IssueResolver,\n      });\n\n      const {iconData} = extractData(shadowRoot);\n      assert.strictEqual('iconName' in iconData ? iconData.iconName : null, defaultIcon.iconName);\n      assert.strictEqual(iconData.color, defaultIcon.color);\n    });\n\n    it('renders correctly with an issue', async () => {\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issue: mockIssue as unknown as IssuesManager.Issue.Issue,\n      });\n\n      const {iconData} = extractData(shadowRoot);\n      assert.strictEqual('iconName' in iconData ? iconData.iconName : null, pageErrorIcon.iconName);\n      assert.strictEqual(iconData.color, pageErrorIcon.color);\n    });\n\n    it('the style reacts to the presence of the issue', async () => {\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issue: mockIssue as unknown as IssuesManager.Issue.Issue,\n      });\n\n      const {containerClasses} = extractData(shadowRoot);\n      assert.include(containerClasses, 'link');\n    });\n\n    it('the style reacts to the absence of an issue', async () => {\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issueId,\n        issueResolver: failingIssueResolver as unknown as IssuesManager.IssueResolver.IssueResolver,\n      });\n\n      const {containerClasses} = extractData(shadowRoot);\n      assert.notInclude(containerClasses, 'link');\n    });\n  });\n\n  describe('transitions upon issue resolution', () => {\n    it('to change the style correctly', async () => {\n      const resolver = new MockIssueResolver();\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issueId,\n        issueResolver: resolver as unknown as IssuesManager.IssueResolver.IssueResolver,\n      });\n\n      const {containerClasses: containerClassesBefore} = extractData(shadowRoot);\n      assert.notInclude(containerClassesBefore, 'link');\n\n      resolver.resolve(mockIssue as unknown as IssuesManager.Issue.Issue);\n\n      await new Promise(r => setTimeout(r));  // Drain Microtask queue to get the cooridnator.write posted.\n      await coordinator.done();\n\n      const {containerClasses: containerClassesAfter} = extractData(shadowRoot);\n      assert.include(containerClassesAfter, 'link');\n    });\n\n    it('to set icon color correctly', async () => {\n      const resolver = new MockIssueResolver();\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issueId,\n        issueResolver: resolver as unknown as IssuesManager.IssueResolver.IssueResolver,\n      });\n\n      const {iconData: iconDataBefore} = extractData(shadowRoot);\n      assert.strictEqual(iconDataBefore.color, defaultIcon.color);\n\n      resolver.resolve(mockIssue as unknown as IssuesManager.Issue.Issue);\n\n      await new Promise(r => setTimeout(r));  // Drain Microtask queue to get the cooridnator.write posted.\n      await coordinator.done();\n\n      const {iconData: iconDataAfter} = extractData(shadowRoot);\n      assert.strictEqual(iconDataAfter.color, pageErrorIcon.color);\n    });\n\n    it('handles multiple data assignments', async () => {\n      const {shadowRoot, component} = await renderIssueLinkIcon({\n        issue: mockIssue as unknown as IssuesManager.Issue.Issue,\n      });\n\n      const {iconData: iconDataBefore} = extractData(shadowRoot);\n      assert.strictEqual(iconDataBefore.color, pageErrorIcon.color);\n\n      const mockIssue2 = {\n        getKind() {\n          return IssuesManager.Issue.IssueKind.BreakingChange;\n        },\n      };\n\n      component.data = {\n        issue: mockIssue2 as unknown as IssuesManager.Issue.Issue,\n      };\n\n      await new Promise(r => setTimeout(r));  // Drain Microtask queue to get the cooridnator.write posted.\n      await coordinator.done();\n\n      const {iconData: iconDataAfter} = extractData(shadowRoot);\n      assert.strictEqual(iconDataAfter.color, breakingChangeIcon.color);\n    });\n  });\n\n  describe('handles clicks correctly', () => {\n    it('if the icon is clicked', async () => {\n      const revealOverride = sinon.fake(Common.Revealer.reveal);\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issue: mockIssue as unknown as IssuesManager.Issue.Issue,\n        revealOverride,\n      });\n\n      const {icon} = extractElements(shadowRoot);\n      icon.click();\n      assert.isTrue(revealOverride.called);\n    });\n\n    it('if the container is clicked', async () => {\n      const revealOverride = sinon.fake(Common.Revealer.reveal);\n      const {shadowRoot} = await renderIssueLinkIcon({\n        issue: mockIssue as unknown as IssuesManager.Issue.Issue,\n        revealOverride,\n      });\n\n      const {container} = extractElements(shadowRoot);\n      container.click();\n      assert.isTrue(revealOverride.called);\n    });\n  });\n});\n"]}