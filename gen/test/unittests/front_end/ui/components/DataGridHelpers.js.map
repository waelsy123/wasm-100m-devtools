{"version":3,"file":"DataGridHelpers.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/ui/components/DataGridHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Coordinator from '../../../../../front_end/ui/components/render_coordinator/render_coordinator.js';\nimport {assertElement, assertElements, dispatchFocusEvent, dispatchKeyDownEvent} from '../../helpers/DOMHelpers.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\nconst {assert} = chai;\n\nexport const getFocusableCell = (shadowRoot: ShadowRoot) => {\n  // We only expect one here, but we qSA so we can assert on only one.\n  // Can't use td as it may be a th if the user has focused a column header.\n  const tabIndexCells = shadowRoot.querySelectorAll('table [tabindex=\"0\"]');\n  assertElements(tabIndexCells, HTMLTableCellElement);\n  assert.lengthOf(tabIndexCells, 1);\n  return tabIndexCells[0];\n};\n\nexport const getCellByIndexes = (shadowRoot: ShadowRoot, indexes: {column: number, row: number}) => {\n  const cell = shadowRoot.querySelector<HTMLTableCellElement>(\n      `[data-row-index=\"${indexes.row}\"][data-col-index=\"${indexes.column}\"]`);\n  assertElement(cell, HTMLTableCellElement);\n  return cell;\n};\n\nexport const getHeaderCells = (shadowRoot: ShadowRoot, options: {onlyVisible: boolean} = {\n  onlyVisible: false,\n}) => {\n  const cells = shadowRoot.querySelectorAll('[data-grid-header-cell]');\n  assertElements(cells, HTMLTableCellElement);\n  return Array.from(cells).filter(cell => {\n    if (!options.onlyVisible) {\n      return true;\n    }\n\n    return cell.classList.contains('hidden') === false;\n  });\n};\n\nexport const getValuesOfBodyRowByAriaIndex =\n    (shadowRoot: ShadowRoot, ariaIndex: number, options: {onlyVisible: boolean} = {\n      onlyVisible: false,\n    }): string[] => {\n      const row = getBodyRowByAriaIndex(shadowRoot, ariaIndex);\n      const cells = row.querySelectorAll('[data-grid-value-cell-for-column]');\n      assertElements(cells, HTMLTableCellElement);\n      return Array.from(cells)\n          .filter(cell => {\n            return !options.onlyVisible || cell.classList.contains('hidden') === false;\n          })\n          .map(cell => {\n            return cell.innerText;\n          });\n    };\n\nexport const getAllRows = (shadowRoot: ShadowRoot): HTMLTableRowElement[] => {\n  const rows = shadowRoot.querySelectorAll('[aria-rowindex]');\n  assertElements(rows, HTMLTableRowElement);\n  return Array.from(rows);\n};\n\nexport const assertCurrentFocusedCellIs = (shadowRoot: ShadowRoot, {column, row}: {column: number, row: number}) => {\n  const cell = getFocusableCell(shadowRoot);\n  // Convert to strings as attributes are always strings.\n  assert.strictEqual(cell.getAttribute('data-row-index'), String(row), 'The row index was not as expected.');\n  assert.strictEqual(cell.getAttribute('data-col-index'), String(column), 'The column index was not as expected.');\n};\n\nexport const assertSelectedRowIs = (shadowRoot: ShadowRoot, row: number) => {\n  const selectedRow = shadowRoot.querySelector('tr.selected');\n  assertElement(selectedRow, HTMLTableRowElement);\n  assert.strictEqual(selectedRow.getAttribute('aria-rowindex'), String(row), 'The row index was not as expected.');\n};\n\nexport const focusCurrentlyFocusableCell = (shadowRoot: ShadowRoot) => {\n  const cell = getFocusableCell(shadowRoot);\n  dispatchFocusEvent(cell);\n};\n\nexport const emulateUserKeyboardNavigation =\n    (shadowRoot: ShadowRoot, key: 'ArrowLeft'|'ArrowRight'|'ArrowUp'|'ArrowDown') => {\n      const table = shadowRoot.querySelector('table');\n      assertElement(table, HTMLTableElement);\n      dispatchKeyDownEvent(table, {key});\n    };\n\nexport const emulateUserFocusingCellAt = async (shadowRoot: ShadowRoot, position: {column: number, row: number}) => {\n  const cellToFocus = getCellByIndexes(shadowRoot, position);\n  dispatchFocusEvent(cellToFocus);\n  await coordinator.done();\n  assertCurrentFocusedCellIs(shadowRoot, position);\n};\n\nexport const getValuesOfAllBodyRows = (shadowRoot: ShadowRoot, options: {onlyVisible: boolean} = {\n  onlyVisible: false,\n}): string[][] => {\n  const rows = getAllRows(shadowRoot);\n  return rows\n      .map(row => {\n        // now decide if the row should be included or not\n        const rowIsHidden = row.classList.contains('hidden');\n        const rowIndex = window.parseInt(row.getAttribute('aria-rowindex') || '-1', 10);\n        return {\n          rowValues: getValuesOfBodyRowByAriaIndex(shadowRoot, rowIndex, options),\n          hidden: options.onlyVisible && rowIsHidden,\n        };\n      })\n      .filter(row => row.hidden === false)\n      .map(r => r.rowValues);\n};\n\nexport const getBodyRowByAriaIndex = (shadowRoot: ShadowRoot, rowIndex: number): HTMLTableRowElement => {\n  const row = shadowRoot.querySelector(`[aria-rowindex=\"${rowIndex}\"]`);\n  assertElement(row, HTMLTableRowElement);\n  return row;\n};\n\nexport const getHeaderCellForColumnId = (shadowRoot: ShadowRoot, columnId: string): HTMLTableCellElement => {\n  const cell = shadowRoot.querySelector(`[data-grid-header-cell=\"${columnId}`);\n  assertElement(cell, HTMLTableCellElement);\n  return cell;\n};\n\nexport const getValuesForColumn = (shadowRoot: ShadowRoot, columnId: string): string[] => {\n  const cells = shadowRoot.querySelectorAll(`[data-grid-value-cell-for-column=${columnId}]`);\n  assertElements(cells, HTMLTableCellElement);\n  return Array.from(cells, cell => cell.innerText);\n};\n"]}