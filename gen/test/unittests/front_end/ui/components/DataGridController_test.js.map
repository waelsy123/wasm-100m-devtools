{"version":3,"file":"DataGridController_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/ui/components/DataGridController_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../../../../front_end/core/platform/platform.js';\nimport * as DataGrid from '../../../../../front_end/ui/components/data_grid/data_grid.js';\nimport * as IconButton from '../../../../../front_end/ui/components/icon_button/icon_button.js';\nimport * as Coordinator from '../../../../../front_end/ui/components/render_coordinator/render_coordinator.js';\nimport {assertShadowRoot, dispatchClickEvent, renderElementIntoDOM} from '../../helpers/DOMHelpers.js';\nimport {TEXT_NODE, withMutations} from '../../helpers/MutationHelpers.js';\n\nimport {getAllRows, getHeaderCellForColumnId, getValuesForColumn, getValuesOfAllBodyRows} from './DataGridHelpers.js';\n\nconst {assert} = chai;\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst getInternalDataGridShadowRoot = (component: DataGrid.DataGridController.DataGridController): ShadowRoot => {\n  assertShadowRoot(component.shadowRoot);\n  const internalDataGrid = component.shadowRoot.querySelector('devtools-data-grid');\n  assertNotNullOrUndefined(internalDataGrid);\n  const internalShadow = internalDataGrid.shadowRoot;\n  assertShadowRoot(internalShadow);\n  return internalShadow;\n};\n\ndescribe('DataGridController', () => {\n  describe('sorting the columns', () => {\n    const columns = [\n      {id: 'key', title: 'Key', sortable: true, widthWeighting: 1, visible: true, hideable: false},\n    ];\n    const rows = [\n      {cells: [{columnId: 'key', value: 'Bravo'}]},\n      {cells: [{columnId: 'key', value: 'Alpha'}]},\n      {cells: [{columnId: 'key', value: 'Charlie'}]},\n    ];\n    const numericRows = [\n      {cells: [{columnId: 'key', value: 2}]},\n      {cells: [{columnId: 'key', value: 1}]},\n      {cells: [{columnId: 'key', value: 3}]},\n    ];\n\n    it('lets the user click to sort the column in ASC order', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n\n      await withMutations(\n          [{\n            // Two text mutations as LitHtml updates the text nodes but does not\n            // touch the actual DOM nodes.\n            target: TEXT_NODE,\n            max: 2,\n          }],\n          internalDataGridShadow, async shadowRoot => {\n            const keyHeader = getHeaderCellForColumnId(shadowRoot, 'key');\n            dispatchClickEvent(keyHeader);\n            await coordinator.done();\n            const cellValues = getValuesForColumn(shadowRoot, 'key');\n            assert.deepEqual(cellValues, ['Alpha', 'Bravo', 'Charlie']);\n          });\n    });\n\n    it('supports sorting numeric columns', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows: numericRows, columns};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n\n      const keyHeader = getHeaderCellForColumnId(internalDataGridShadow, 'key');\n      dispatchClickEvent(keyHeader);  // ASC order\n      await coordinator.done();\n      let cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['1', '2', '3']);\n      dispatchClickEvent(keyHeader);  // DESC order\n      await coordinator.done();\n      cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['3', '2', '1']);\n    });\n\n    it('can be provided an initial sort which is immediately applied', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {\n        rows,\n        columns,\n        initialSort: {\n          columnId: 'key',\n          direction: DataGrid.DataGridUtils.SortDirection.ASC,\n        },\n      };\n\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Alpha', 'Bravo', 'Charlie']);\n    });\n\n    it('lets the user click to change the sort when it is initially provided', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {\n        rows,\n        columns,\n        initialSort: {\n          columnId: 'key',\n          direction: DataGrid.DataGridUtils.SortDirection.ASC,\n        },\n      };\n\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const keyHeader = getHeaderCellForColumnId(internalDataGridShadow, 'key');\n      let cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Alpha', 'Bravo', 'Charlie']);\n      dispatchClickEvent(keyHeader);  // DESC order\n      await coordinator.done();\n      cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Charlie', 'Bravo', 'Alpha']);\n    });\n\n    it('lets the user click twice to sort the column in DESC order', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns};\n\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n\n      const keyHeader = getHeaderCellForColumnId(internalDataGridShadow, 'key');\n      dispatchClickEvent(keyHeader);  // ASC order\n      await coordinator.done();\n      let cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Alpha', 'Bravo', 'Charlie']);\n      dispatchClickEvent(keyHeader);  // DESC order\n      await coordinator.done();\n      cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Charlie', 'Bravo', 'Alpha']);\n    });\n\n    it('resets the sort if the user clicks after setting the sort to DESC', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns};\n\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n\n      const keyHeader = getHeaderCellForColumnId(internalDataGridShadow, 'key');\n      const originalCellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      dispatchClickEvent(keyHeader);  // ASC order\n      await coordinator.done();\n      let cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Alpha', 'Bravo', 'Charlie']);\n      dispatchClickEvent(keyHeader);  // DESC order\n      await coordinator.done();\n      cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Charlie', 'Bravo', 'Alpha']);\n      dispatchClickEvent(keyHeader);  // Now reset!\n      await coordinator.done();\n      const finalCellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(finalCellValues, originalCellValues);\n    });\n\n    it('persists the sort as new data is added and inserts new data into the right place', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns};\n\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n\n      const keyHeader = getHeaderCellForColumnId(internalDataGridShadow, 'key');\n      dispatchClickEvent(keyHeader);  // ASC order\n      await coordinator.done();\n      let cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      // Ensure we are in ASC order\n      assert.deepEqual(cellValues, ['Alpha', 'Bravo', 'Charlie']);\n      const newRow = {cells: [{columnId: 'key', value: 'Baz'}]};\n      const newRows = [...rows, newRow];\n      component.data = {\n        ...component.data,\n        rows: newRows,\n      };\n      await coordinator.done();\n      cellValues = getValuesForColumn(internalDataGridShadow, 'key');\n      assert.deepEqual(cellValues, ['Alpha', 'Baz', 'Bravo', 'Charlie']);\n    });\n  });\n\n  describe('filtering rows', () => {\n    const responseIcon = new IconButton.Icon.Icon();\n    responseIcon.data = {iconName: 'ic_response', color: 'var(--color-text-disabled)', width: '16px', height: '16px'};\n\n    const columns = [\n      {id: 'key', title: 'Letter', sortable: true, widthWeighting: 1, visible: true, hideable: false},\n      {id: 'value', title: 'Phonetic', sortable: true, widthWeighting: 1, visible: true, hideable: false},\n      {id: 'icon', title: 'Icon', sortable: true, widthWeighting: 1, visible: false, hideable: false},\n    ];\n    const rows = [\n      {\n        cells: [\n          {columnId: 'key', value: 'Letter A'},\n          {columnId: 'value', value: 'Alpha'},\n          {columnId: 'icon', value: responseIcon},\n        ],\n      },\n      {\n        cells: [\n          {columnId: 'key', value: 'Letter B'},\n          {columnId: 'value', value: 'Bravo'},\n          {columnId: 'icon', value: responseIcon},\n        ],\n      },\n      {\n        cells: [\n          {columnId: 'key', value: 'Letter C'},\n          {columnId: 'value', value: 'Charlie'},\n          {columnId: 'icon', value: responseIcon},\n        ],\n      },\n    ];\n\n    const createPlainTextFilter = (text: string) => ({\n      text,\n      key: undefined,\n      regex: undefined,\n      negative: false,\n    });\n\n    const createRegexFilter = (text: string) => ({\n      text: undefined,\n      key: undefined,\n      regex: new RegExp(text, 'i'),  // i because the FilterParser adds that flag\n      negative: false,\n    });\n\n    const createColumnFilter = (key: string, text: string) => ({\n      text,\n      key,\n      regex: undefined,\n      negative: false,\n    });\n\n    it('only shows rows with values that match the filter', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns, filters: [createPlainTextFilter('bravo')]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter B', 'Bravo'],\n      ]);\n    });\n\n    it('renders only visible rows, but maintains proper aria-rowindexes for the rows that are rendered', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns, filters: [createPlainTextFilter('bravo')]};\n\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const renderedRows = getAllRows(internalDataGridShadow);\n      assert.deepEqual(renderedRows.map(row => row.getAttribute('aria-rowindex')), ['2']);\n    });\n\n    it('shows all rows if the filter is then cleared', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns, filters: [createPlainTextFilter('bravo')]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      let renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.lengthOf(renderedRowValues, 1);\n      component.data = {\n        ...component.data,\n        filters: [],\n      };\n      await coordinator.done();\n      renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow);\n      assert.lengthOf(renderedRowValues, 3);\n    });\n\n    it('supports a regex filter', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns, filters: [createRegexFilter('bravo')]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter B', 'Bravo'],\n      ]);\n    });\n\n    it('inverts the filter if given a negative filter', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      const filter = createPlainTextFilter('bravo');\n      filter.negative = true;\n      component.data = {rows, columns, filters: [filter]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter A', 'Alpha'],\n        ['Letter C', 'Charlie'],\n      ]);\n    });\n\n    it('only shows rows that match all filters when given multiple filters', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      // This matches no rows, as no row can match both of these filters\n      component.data = {rows, columns, filters: [createPlainTextFilter('alpha'), createPlainTextFilter('charlie')]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, []);\n    });\n\n    it('supports filtering by column key', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      // By filtering for values with `e` we expect to only get the \"Letter C: Charlie\" row as it's the only value field with an `e` in.\n      component.data = {rows, columns, filters: [createColumnFilter('value', 'e')]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter C', 'Charlie'],\n      ]);\n    });\n\n    it('supports negative filtering by column key', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      const filter = createColumnFilter('value', 'e');\n      filter.negative = true;\n      component.data = {rows, columns, filters: [filter]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      const renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter A', 'Alpha'],\n        ['Letter B', 'Bravo'],\n      ]);\n    });\n\n    it('renders only matching rows even after sorting columns', async () => {\n      const component = new DataGrid.DataGridController.DataGridController();\n      component.data = {rows, columns, filters: [createPlainTextFilter('h')]};\n      renderElementIntoDOM(component);\n      assertShadowRoot(component.shadowRoot);\n      await coordinator.done();\n      const internalDataGridShadow = getInternalDataGridShadowRoot(component);\n      let renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter A', 'Alpha'],\n        ['Letter C', 'Charlie'],\n      ]);\n\n      const keyHeader = getHeaderCellForColumnId(internalDataGridShadow, 'key');\n      dispatchClickEvent(keyHeader);  // ASC order\n      await coordinator.done();\n      renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter A', 'Alpha'],\n        ['Letter C', 'Charlie'],\n      ]);\n\n      dispatchClickEvent(keyHeader);  // DESC order\n      await coordinator.done();\n      renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter C', 'Charlie'],\n        ['Letter A', 'Alpha'],\n      ]);\n\n      dispatchClickEvent(keyHeader);  // reset order\n      await coordinator.done();\n      renderedRowValues = getValuesOfAllBodyRows(internalDataGridShadow, {onlyVisible: true});\n      assert.deepEqual(renderedRowValues, [\n        ['Letter A', 'Alpha'],\n        ['Letter C', 'Charlie'],\n      ]);\n    });\n  });\n});\n"]}