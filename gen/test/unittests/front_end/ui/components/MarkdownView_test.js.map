{"version":3,"file":"MarkdownView_test.js","sourceRoot":"","sources":["../../../../../../../../test/unittests/front_end/ui/components/MarkdownView_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Marked from '../../../../../front_end/third_party/marked/marked.js';\nimport * as MarkdownView from '../../../../../front_end/ui/components/markdown_view/markdown_view.js';\nimport type * as LitHtml from '../../../../../front_end/ui/lit-html/lit-html.js';\nimport {assertShadowRoot, renderElementIntoDOM} from '../../helpers/DOMHelpers.js';\n\nconst {assert} = chai;\n\ndescribe('MarkdownView', async () => {\n  describe('renderToken', async () => {\n    it('wraps paragraph tokens in <p> tags', () => {\n      const renderResult = MarkdownView.MarkdownView.renderToken({type: 'paragraph', tokens: []});\n      assert.deepStrictEqual(renderResult.strings.raw, ['<p>', '']);\n    });\n\n    it('wraps an unordered list token in <ul> tags', () => {\n      const renderResult = MarkdownView.MarkdownView.renderToken({type: 'list', items: []});\n      assert.deepStrictEqual(renderResult.strings.raw, ['<ul>', '</ul>']);\n    });\n\n    it('wraps list items in <li> tags', () => {\n      const renderResult = MarkdownView.MarkdownView.renderToken({type: 'list_item', tokens: []});\n      assert.deepStrictEqual(renderResult.strings.raw, ['<li>', '']);\n    });\n\n    it('wraps a codespan token in <code> tags', () => {\n      const renderResult = MarkdownView.MarkdownView.renderToken({type: 'codespan', text: 'const foo = 42;'});\n      assert.deepStrictEqual(renderResult.strings.raw, ['<code>', '</code>']);\n      assert.deepStrictEqual(renderResult.values, ['const foo = 42;']);\n    });\n\n    it('renders childless text tokens as-is', () => {\n      const renderResult = MarkdownView.MarkdownView.renderToken({type: 'text', text: 'Simple text token'});\n      assert.deepStrictEqual(renderResult.values, ['Simple text token']);\n    });\n\n    it('renders nested text tokens correctly', () => {\n      const renderResult = MarkdownView.MarkdownView.renderToken({\n        type: 'text',\n        text: 'This text should not be rendered. Only the subtokens!',\n        tokens: [\n          {type: 'text', text: 'Nested raw text'},\n          {type: 'codespan', text: 'and a nested codespan to boot'},\n        ],\n      });\n\n      const renderedParts = renderResult.values[0] as LitHtml.TemplateResult[];\n      assert.strictEqual(renderedParts.length, 2);\n      assert.deepStrictEqual(renderedParts[0].values, ['Nested raw text']);\n      assert.deepStrictEqual(renderedParts[1].values, ['and a nested codespan to boot']);\n    });\n\n    it('throws an error for invalid or unsupported token types', () => {\n      assert.throws(() => MarkdownView.MarkdownView.renderToken({type: 'no_way_this_is_a_valid_markdown_token'}));\n    });\n\n    it('renders link with valid key', () => {\n      MarkdownView.MarkdownLinksMap.markdownLinks.set('exampleLink', 'https://web.dev/');\n      const renderResult =\n          MarkdownView.MarkdownView.renderToken({type: 'link', text: 'learn more', href: 'exampleLink'})\n              .strings.join('');\n\n      assert.isTrue(renderResult.includes('<devtools-markdown-link'));\n    });\n\n    it('throws an error if invalid link key is provided', () => {\n      assert.throws(() => MarkdownView.MarkdownLinksMap.getMarkdownLink('testErrorLink'));\n    });\n\n    it('renders icon with valid key', () => {\n      MarkdownView.MarkdownImagesMap.markdownImages.set('testExampleImage', {\n        src: 'largeicon-phone',\n        isIcon: true,\n      });\n      const renderResult =\n          MarkdownView.MarkdownView.renderToken({type: 'image', text: 'phone', href: 'testExampleImage'})\n              .strings.join('');\n      assert.isTrue(renderResult.includes('<devtools-markdown-image'));\n    });\n\n    it('renders image with valid key', () => {\n      MarkdownView.MarkdownImagesMap.markdownImages.set('exampleImage', {\n        src: 'Images/phone-logo.png',\n        isIcon: false,\n      });\n      const renderResult =\n          MarkdownView.MarkdownView.renderToken({type: 'image', text: 'phone', href: 'exampleImage'}).strings.join('');\n      assert.isTrue(renderResult.includes('<devtools-markdown-image'));\n    });\n\n    it('throws an error if invalid image key is provided', () => {\n      assert.throws(() => MarkdownView.MarkdownImagesMap.getMarkdownImage('testErrorImageLink'));\n    });\n  });\n\n  const paragraphText =\n      'Single paragraph with a sentence of text and some list items to test that the component works end-to-end.';\n  const listItemTexts = ['Simple unordered list item 1', 'Simple unordered list item 2'];\n  const markdownString = `\n${paragraphText}\n\n* ${listItemTexts[0]}\n* ${listItemTexts[1]}\n`;\n\n  describe('component', () => {\n    it('renders basic markdown correctly', () => {\n      const component = new MarkdownView.MarkdownView.MarkdownView();\n      renderElementIntoDOM(component);\n\n      component.data = {tokens: Marked.Marked.lexer(markdownString)};\n\n      assertShadowRoot(component.shadowRoot);\n\n      const paragraphs = Array.from(component.shadowRoot.querySelectorAll('p'));\n      assert.strictEqual(paragraphs.length, 1);\n      assert.strictEqual(paragraphs[0].innerText, paragraphText);\n\n      const listItems = Array.from(component.shadowRoot.querySelectorAll('li'));\n      assert.strictEqual(listItems.length, 2);\n      assert.deepStrictEqual(listItems.map(item => item.textContent), listItemTexts);\n    });\n  });\n\n  const renderString = (string: string, selector: 'p'|'code'): HTMLElement => {\n    const component = new MarkdownView.MarkdownView.MarkdownView();\n    renderElementIntoDOM(component);\n    component.data = {tokens: Marked.Marked.lexer(string)};\n    assertShadowRoot(component.shadowRoot);\n    const element = component.shadowRoot.querySelector(selector);\n    return element ? element : document.createElement('span');\n  };\n\n  describe('escaping', () => {\n    it('renders basic escaped non-html tag', () => {\n      const paragraph = renderString('<123>', 'p');\n      assert.strictEqual(paragraph.innerText, '<123>');\n    });\n\n    it('renders all unescaped chars', () => {\n      const paragraph = renderString('<>&\\'\"', 'p');\n      assert.strictEqual(paragraph.innerText, '<>&\\'\"');\n    });\n\n    it('renders all escaped chars', () => {\n      const paragraph = renderString('&lt;&gt;&amp;&#39;&quot;', 'p');\n      assert.strictEqual(paragraph.innerText, '<>&\\'\"');\n    });\n\n    it('renders basic escaped tag inside codespan', () => {\n      const codeBlock = renderString('`<123>`', 'code');\n      assert.strictEqual(codeBlock.innerText, '<123>');\n    });\n  });\n});\n"]}