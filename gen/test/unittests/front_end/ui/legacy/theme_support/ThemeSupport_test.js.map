{"version":3,"file":"ThemeSupport_test.js","sourceRoot":"","sources":["../../../../../../../../../test/unittests/front_end/ui/legacy/theme_support/ThemeSupport_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,YAAY,MAAM,sEAAsE,CAAC;AACrG,OAAO,EAAC,gBAAgB,EAAC,MAAM,gCAAgC,CAAC;AAChE,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAE/E,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,MAAM,eAAgB,SAAQ,WAAW;IACvC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAE5C;QACE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG;;;;eAId,CAAC;IACd,CAAC;CACF;AAED,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,uBAAuB,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC9C,IAAI,YAAuC,CAAC;QAC5C,MAAM,CAAC,GAAG,EAAE;YACV,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YACpD,cAAc,CAAC,MAAM,CAAC,uBAAuB,EAAE,eAAe,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,OAAO,GAAG,IAAI,eAAe,EAAE,CAAC;YACtC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAEnC,MAAM,aAAa,GAAG,YAAY,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;YACvE,MAAM,YAAY,GAAG,YAAY,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;YAC/E,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAChC,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,aAAa,GAAG,YAAY,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;YAEvE,wEAAwE;YACxE,2BAA2B;YAC3B,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACjD,QAAQ,CAAC,WAAW,GAAG,mCAAmC,CAAC;YAC3D,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAEpC,MAAM,oBAAoB,GAAG,YAAY,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;YAC9E,QAAQ,CAAC,MAAM,EAAE,CAAC;YAElB,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,OAAO,GAAG,IAAI,eAAe,EAAE,CAAC;YACtC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAEnC,MAAM,YAAY,GAAG,YAAY,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;YAC/E,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAEhC,wEAAwE;YACxE,2BAA2B;YAC3B,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACjD,QAAQ,CAAC,WAAW,GAAG,mCAAmC,CAAC;YAC3D,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAErC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YACzC,MAAM,mBAAmB,GAAG,YAAY,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;YAEtF,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,aAAa,GAAG,YAAY,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YAEpE,wEAAwE;YACxE,2BAA2B;YAC3B,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACjD,QAAQ,CAAC,WAAW,GAAG,gCAAgC,CAAC;YACxD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAEpC,MAAM,oBAAoB,GAAG,YAAY,CAAC,gBAAgB,CAAC,cAAc,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC1F,QAAQ,CAAC,MAAM,EAAE,CAAC;YAElB,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC9B,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;YACxC,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ThemeSupport from '../../../../../../front_end/ui/legacy/theme_support/theme_support.js';\nimport {assertShadowRoot} from '../../../helpers/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\n\nclass StyledComponent extends HTMLElement {\n  #shadow = this.attachShadow({mode: 'open'});\n\n  constructor() {\n    super();\n\n    this.#shadow.innerHTML = `<style>\n      :host {\n        --color-primary: red;\n      }\n      </style>`;\n  }\n}\n\ndescribe('Theme Support', () => {\n  describeWithEnvironment('Computed Values', () => {\n    let themeSupport: ThemeSupport.ThemeSupport;\n    before(() => {\n      themeSupport = ThemeSupport.ThemeSupport.instance();\n      customElements.define('test-styled-component', StyledComponent);\n    });\n\n    afterEach(() => {\n      document.body.removeChildren();\n    });\n\n    it('obtains computed values correctly (document)', () => {\n      assert.isNotEmpty(themeSupport.getComputedValue('--color-primary'));\n    });\n\n    it('obtains computed values correctly (element)', () => {\n      const element = new StyledComponent();\n      document.body.appendChild(element);\n\n      const documentValue = themeSupport.getComputedValue('--color-primary');\n      const elementValue = themeSupport.getComputedValue('--color-primary', element);\n      assert.isNotEmpty(elementValue);\n      assert.notStrictEqual(documentValue, elementValue);\n    });\n\n    it('caches computed values (document)', () => {\n      const documentValue = themeSupport.getComputedValue('--color-primary');\n\n      // Update the styles by adding a new style tag, and confirm that the old\n      // value is still returned.\n      const newStyle = document.createElement('style');\n      newStyle.textContent = ':root { --color-primary: green; }';\n      document.head.appendChild(newStyle);\n\n      const updatedDocumentValue = themeSupport.getComputedValue('--color-primary');\n      newStyle.remove();\n\n      assert.strictEqual(documentValue, updatedDocumentValue);\n    });\n\n    it('caches computed values (element)', () => {\n      const element = new StyledComponent();\n      document.body.appendChild(element);\n\n      const elementValue = themeSupport.getComputedValue('--color-primary', element);\n      assert.isNotEmpty(elementValue);\n\n      // Update the styles by adding a new style tag, and confirm that the old\n      // value is still returned.\n      const newStyle = document.createElement('style');\n      newStyle.textContent = ':root { --color-primary: green; }';\n      assertShadowRoot(element.shadowRoot);\n\n      element.shadowRoot.appendChild(newStyle);\n      const updatedElementValue = themeSupport.getComputedValue('--color-primary', element);\n\n      assert.strictEqual(elementValue, updatedElementValue);\n    });\n\n    it('does not caches empty computed values (element)', () => {\n      const documentValue = themeSupport.getComputedValue('--test-value');\n\n      // Update the styles by adding a new style tag, and confirm that the old\n      // value is still returned.\n      const newStyle = document.createElement('style');\n      newStyle.textContent = ':root { --test-value: green; }';\n      document.head.appendChild(newStyle);\n\n      const updatedDocumentValue = themeSupport.getComputedValue('--test-value', document.body);\n      newStyle.remove();\n\n      assert.isEmpty(documentValue);\n      assert.isNotEmpty(updatedDocumentValue);\n      assert.notStrictEqual(documentValue, updatedDocumentValue);\n    });\n  });\n});\n"]}