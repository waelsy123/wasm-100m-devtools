{"version":3,"file":"InspectorOverlayHelpers.js","sourceRoot":"","sources":["../../../../../../../test/unittests/front_end/helpers/InspectorOverlayHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport {renderElementIntoDOM, assertElements, assertElement} from './DOMHelpers.js';\n\nimport type {CanvasSize, GridPositionNormalizedDataWithNames, NormalizePositionDataConfig} from '../../../../inspector_overlay/css_grid_label_helpers.js';\nimport {normalizePositionData, drawGridAreaNames, drawGridLineNumbers, drawGridLineNames} from '../../../../inspector_overlay/css_grid_label_helpers.js';\nimport type {AreaBounds, Bounds} from '../../../../inspector_overlay/common.js';\nimport {gridStyle} from '../../../../inspector_overlay/highlight_grid_common.js';\n\nconst GRID_LABEL_CONTAINER_ID = 'grid-label-container';\nconst DEFAULT_GRID_LABEL_LAYER_ID = 'grid-labels';\nconst GRID_LINE_NUMBER_LABEL_CONTAINER_CLASS = 'line-numbers';\nconst GRID_LINE_NAME_LABEL_CONTAINER_CLASS = 'line-names';\nconst GRID_LINE_AREA_LABEL_CONTAINER_CLASS = 'area-names';\nconst GRID_TRACK_SIZES_LABEL_CONTAINER_CLASS = 'track-sizes';\n\n/**\n * This does the same as initFrame but also prepares the DOM for testing grid labels.\n */\nexport function initFrameForGridLabels() {\n  const styleTag = document.createElement('style');\n  styleTag.textContent = gridStyle;\n  document.head.append(styleTag);\n  createGridLabelContainer();\n}\n\nexport function initFrameForMultipleGridLabels(numGrids: number) {\n  for (let i = 1; i <= numGrids; i++) {\n    createGridLabelContainer(i);\n  }\n}\n\nexport function createGridLabelContainer(layerId?: number) {\n  // Ensure main layer is created first\n  let el = document.getElementById(GRID_LABEL_CONTAINER_ID);\n  if (!el) {\n    el = document.createElement('div');\n    el.id = GRID_LABEL_CONTAINER_ID;\n  }\n\n  const layerEl = el.createChild('div');\n  layerEl.id = layerId ? `grid-${layerId}-labels` : DEFAULT_GRID_LABEL_LAYER_ID;\n  layerEl.createChild('div', GRID_LINE_NUMBER_LABEL_CONTAINER_CLASS);\n  layerEl.createChild('div', GRID_LINE_NAME_LABEL_CONTAINER_CLASS);\n  layerEl.createChild('div', GRID_LINE_AREA_LABEL_CONTAINER_CLASS);\n  layerEl.createChild('div', GRID_TRACK_SIZES_LABEL_CONTAINER_CLASS);\n\n  renderElementIntoDOM(el, {allowMultipleChildren: true});\n}\n\nexport function getMainGridLabelContainer(): HTMLElement {\n  const el = document.getElementById(GRID_LABEL_CONTAINER_ID);\n  assertElement(el, HTMLElement);\n  return el;\n}\n\nexport function getGridLabelContainer(layerId?: number): HTMLElement {\n  const id = layerId ? `grid-${layerId}-labels` : DEFAULT_GRID_LABEL_LAYER_ID;\n  const el = document.querySelector(`#${GRID_LABEL_CONTAINER_ID} #${CSS.escape(id)}`);\n  assertElement(el, HTMLElement);\n  return el;\n}\n\nexport function getGridLineNumberLabelContainer(layerId?: number): HTMLElement {\n  const id = layerId ? `grid-${layerId}-labels` : DEFAULT_GRID_LABEL_LAYER_ID;\n  const el = document.querySelector(\n      `#${GRID_LABEL_CONTAINER_ID} #${CSS.escape(id)} .${GRID_LINE_NUMBER_LABEL_CONTAINER_CLASS}`);\n  assertElement(el, HTMLElement);\n  return el;\n}\n\nexport function getGridLineNameLabelContainer(layerId?: number): HTMLElement {\n  const id = layerId ? `grid-${layerId}-labels` : DEFAULT_GRID_LABEL_LAYER_ID;\n  const el =\n      document.querySelector(`#${GRID_LABEL_CONTAINER_ID} #${CSS.escape(id)} .${GRID_LINE_NAME_LABEL_CONTAINER_CLASS}`);\n  assertElement(el, HTMLElement);\n  return el;\n}\n\nexport function getGridTrackSizesLabelContainer(layerId?: number): HTMLElement {\n  const id = layerId ? `grid-${layerId}-labels` : DEFAULT_GRID_LABEL_LAYER_ID;\n  const el = document.querySelector(\n      `#${GRID_LABEL_CONTAINER_ID} #${CSS.escape(id)} .${GRID_TRACK_SIZES_LABEL_CONTAINER_CLASS}`);\n  assertElement(el, HTMLElement);\n  return el;\n}\n\nexport function getGridAreaNameLabelContainer(layerId?: number): HTMLElement {\n  const id = layerId ? `grid-${layerId}-labels` : DEFAULT_GRID_LABEL_LAYER_ID;\n  const el =\n      document.querySelector(`#${GRID_LABEL_CONTAINER_ID} #${CSS.escape(id)} .${GRID_LINE_AREA_LABEL_CONTAINER_CLASS}`);\n  assertElement(el, HTMLElement);\n  return el;\n}\n\ninterface ExpectedLayerLabel {\n  layerId: number;\n  expectedLabels: ExpectedLineNumberLabel[];\n}\ninterface ExpectedLineNumberLabel {\n  className: string;\n  count: number;\n}\n\ninterface ExpectedLineNameLabel {\n  type: string;\n  textContent: string;\n  x?: number;\n  y?: number;\n}\n\ninterface ExpectedAreaNameLabel {\n  textContent: string;\n  left?: string;\n  top?: string;\n}\n\nexport function drawGridLineNumbersAndAssertLabels(\n    config: NormalizePositionDataConfig&{writingMode?: string}, bounds: Bounds, canvasSize: CanvasSize, layerId: number,\n    expectedLabels: ExpectedLineNumberLabel[]) {\n  const el = getGridLineNumberLabelContainer(layerId);\n  const data = normalizePositionData(config, bounds);\n\n  // Note that this test helper is focused on testing the number and orientation of the labels, not their exact position\n  // so we pass the identity matrix here in all cases, even when a different writing mode is provided.\n  drawGridLineNumbers(el, data, canvasSize, 1, new DOMMatrix(), config.writingMode);\n  let totalLabelCount = 0;\n  for (const {className, count} of expectedLabels) {\n    const labels =\n        el.querySelectorAll(`.${GRID_LINE_NUMBER_LABEL_CONTAINER_CLASS} .grid-label-content.${CSS.escape(className)}`);\n    assert.strictEqual(labels.length, count, `Expected ${count} labels to be displayed for ${className}`);\n    totalLabelCount += count;\n  }\n\n  assert.strictEqual(\n      el.querySelectorAll(`.${GRID_LINE_NUMBER_LABEL_CONTAINER_CLASS} .grid-label-content`).length, totalLabelCount,\n      'The right total number of line number labels were displayed');\n}\n\nexport function drawGridLineNamesAndAssertLabels(\n    config: NormalizePositionDataConfig, bounds: Bounds, canvasSize: CanvasSize, layerId: number,\n    deviceEmulationFactor: number, expectedLabels: ExpectedLineNameLabel[]) {\n  const el = getGridLineNameLabelContainer(layerId);\n  const data = normalizePositionData(config, bounds);\n  drawGridLineNames(el, data as GridPositionNormalizedDataWithNames, canvasSize, deviceEmulationFactor);\n\n  const labels = el.querySelectorAll(`.${GRID_LINE_NAME_LABEL_CONTAINER_CLASS} .grid-label-content`);\n  assert.strictEqual(labels.length, expectedLabels.length, 'The right total number of line name labels were displayed');\n  assertElements(labels, HTMLElement);\n\n  const foundLabels: {textContent: string, x: number, y: number}[] = [];\n  labels.forEach(el => {\n    const width = el.offsetWidth;\n    const height = el.offsetHeight;\n    const top = parseInt(el.style.top, 10);\n    const left = parseInt(el.style.left, 10);\n\n    let rowOffset = height / 2;\n    if (el.classList.contains('right-top')) {\n      rowOffset = 0;\n    } else if (el.classList.contains('right-bottom')) {\n      rowOffset = height;\n    }\n\n    let columnOffset = width / 2;\n    if (el.classList.contains('bottom-left')) {\n      columnOffset = 0;\n    } else if (el.classList.contains('bottom-right')) {\n      columnOffset = width;\n    }\n\n    foundLabels.push({\n      textContent: el.textContent || '',\n      x: left + columnOffset,\n      y: top + rowOffset,\n    });\n  });\n\n  for (const expected of expectedLabels) {\n    const foundLabel = foundLabels.find(({textContent}) => textContent === expected.textContent);\n\n    if (!foundLabel) {\n      assert.fail(`Expected line name label with text content ${expected.textContent} not found`);\n      return;\n    }\n\n    if (expected.type === 'column' && typeof expected.x !== 'undefined') {\n      assert.strictEqual(\n          foundLabel.x, expected.x,\n          `Expected column line name label ${expected.textContent} to be positioned at ${expected.x}px`);\n    }\n    if (expected.type === 'row' && typeof expected.y !== 'undefined') {\n      assert.strictEqual(\n          foundLabel.y, expected.y,\n          `Expected row line name label ${expected.textContent} to be positioned at ${expected.y}px`);\n    }\n  }\n}\n\nexport function drawGridAreaNamesAndAssertLabels(\n    areaNames: AreaBounds[], writingModeMatrix: DOMMatrix|undefined, writingMode: string|undefined,\n    expectedLabels: ExpectedAreaNameLabel[]) {\n  const el = getGridAreaNameLabelContainer();\n  drawGridAreaNames(el, areaNames, writingModeMatrix, writingMode);\n\n  const labels = el.querySelectorAll(`.${GRID_LINE_AREA_LABEL_CONTAINER_CLASS} .grid-label-content`);\n  assert.strictEqual(labels.length, expectedLabels.length, 'The right total number of area name labels were displayed');\n  assertElements(labels, HTMLElement);\n\n  const foundLabels: ExpectedAreaNameLabel[] = [];\n  labels.forEach(label => {\n    foundLabels.push({\n      textContent: label.textContent || '',\n      top: label.style.top,\n      left: label.style.left,\n    });\n  });\n  for (const expected of expectedLabels) {\n    const foundLabel = foundLabels.find(({textContent}) => textContent === expected.textContent);\n\n    if (!foundLabel) {\n      assert.fail(`Expected area label with text content ${expected.textContent} not found`);\n      return;\n    }\n\n    if (typeof expected.left !== 'undefined') {\n      assert.strictEqual(\n          foundLabel.left, expected.left,\n          `Expected label ${expected.textContent} to be left positioned to ${expected.left}`);\n    }\n    if (typeof expected.top !== 'undefined') {\n      assert.strictEqual(\n          foundLabel.top, expected.top,\n          `Expected label ${expected.textContent} to be top positioned to ${expected.top}`);\n    }\n  }\n}\n\nexport function drawMultipleGridLineNumbersAndAssertLabels(\n    configs: Array<{config: NormalizePositionDataConfig, layerId: number}>, bounds: Bounds, canvasSize: CanvasSize,\n    expectedLabelList: ExpectedLayerLabel[]) {\n  for (const item of configs) {\n    const el = getGridLineNumberLabelContainer(item.layerId);\n    const data = normalizePositionData(item.config, bounds);\n    drawGridLineNumbers(el, data, canvasSize, 1);\n  }\n\n  let totalLabelCount = 0;\n  for (const {layerId, expectedLabels} of expectedLabelList) {\n    const el = getGridLineNumberLabelContainer(layerId);\n    for (const {className, count} of expectedLabels) {\n      const labels = el.querySelectorAll(\n          `.${GRID_LINE_NUMBER_LABEL_CONTAINER_CLASS} .grid-label-content.${CSS.escape(className)}`);\n      assert.strictEqual(labels.length, count, `Expected ${count} labels to be displayed for ${className}`);\n      totalLabelCount += count;\n    }\n  }\n\n  const mainLayerEl = getMainGridLabelContainer();\n  assert.strictEqual(\n      mainLayerEl.querySelectorAll(`.${GRID_LINE_NUMBER_LABEL_CONTAINER_CLASS} .grid-label-content`).length,\n      totalLabelCount, 'The right total number of line number labels were displayed');\n}\n"]}