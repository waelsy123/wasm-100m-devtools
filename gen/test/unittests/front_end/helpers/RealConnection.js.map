{"version":3,"file":"RealConnection.js","sourceRoot":"","sources":["../../../../../../../test/unittests/front_end/helpers/RealConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../../front_end/core/host/host.js';\nimport * as Root from '../../../../front_end/core/root/root.js';\nimport * as SDK from '../../../../front_end/core/sdk/sdk.js';\nimport * as Main from '../../../../front_end/entrypoints/main/main.js';\n\nimport {deinitializeGlobalVars} from './EnvironmentHelpers.js';\n\n// We want to run tests with real connection after all the other tests, so that\n// we can do one time bootstrap of the CDP connection and related globals.\n// To do that, we expose a function here that is called in a before hook, thus\n// after all other tests were registered but before they got to run.\n// In describeWithRealConnection we await this promise and call real `describe`\n// only when the promise is resolved. This ensures that tests suites with real\n// connection get registered last, which makes mocha also run them last.\nexport let markStaticTestsLoaded: () => void;\nconst staticTestsLoaded = new Promise<void>(resolve => {\n  markStaticTestsLoaded = resolve;\n});\n\nlet hasOnly = false;\nlet initialized = false;\n\ninterface KarmaConfig {\n  config: {remoteDebuggingPort: string};\n}\n\nfunction describeBody(title: string, fn: (this: Mocha.Suite) => void) {\n  before(async function() {\n    if (initialized) {\n      return;\n    }\n    await deinitializeGlobalVars();\n    await import('../../../../front_end/entrypoints/shell/shell.js');\n    await import('../../../../front_end/panels/elements/elements-meta.js');\n    await import('../../../../front_end/panels/sensors/sensors-meta.js');\n    await import('../../../../front_end/entrypoints/inspector_main/inspector_main-meta.js');\n    const response = await fetch('/json/new');\n    const target = await response.json();\n    /* This value comes from the `client.targetDir` setting in `karma.conf.js` */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const {remoteDebuggingPort} = ((globalThis as unknown as {__karma__: KarmaConfig}).__karma__).config;\n    Root.Runtime.Runtime.setQueryParamForTesting('ws', `localhost:${remoteDebuggingPort}/devtools/page/${target.id}`);\n    const main = new Main.MainImpl.MainImpl();\n    await main.readyForTest();\n    initialized = true;\n  });\n\n  beforeEach(() => {\n    resetHostBindingStubState();\n  });\n\n  describe(title, fn);\n}\n\nexport function describeWithRealConnection(title: string, fn: (this: Mocha.Suite) => void) {\n  if (fn.toString().match(/(^|\\s)it.only\\('[^]+',.*\\)/)?.length) {\n    describeWithRealConnection.only(title, fn);\n    return;\n  }\n  staticTestsLoaded\n      .then(() => {\n        if (hasOnly) {\n          return;\n        }\n        describe(`real-${title}`, () => {\n          describeBody(title, fn);\n        });\n      })\n      .catch(e => {\n        throw e;\n      });\n}\n\ndescribeWithRealConnection.only = function(title: string, fn: (this: Mocha.Suite) => void) {\n  hasOnly = true;\n  // eslint-disable-next-line mocha/no-exclusive-tests\n  describe.only(`real-${title}`, () => {\n    describeBody(title, fn);\n  });\n};\n\nexport async function getExecutionContext(runtimeModel: SDK.RuntimeModel.RuntimeModel):\n    Promise<SDK.RuntimeModel.ExecutionContext> {\n  let executionContexts = runtimeModel.executionContexts();\n  if (!executionContexts.length) {\n    await new Promise<void>(resolve => {\n      const listener = () => {\n        runtimeModel.removeEventListener(SDK.RuntimeModel.Events.ExecutionContextCreated, listener);\n        executionContexts = runtimeModel.executionContexts();\n        resolve();\n      };\n      runtimeModel.addEventListener(SDK.RuntimeModel.Events.ExecutionContextCreated, listener);\n    });\n  }\n  if (!executionContexts.length) {\n    throw new Error('Cannot get executionContext');\n  }\n  return executionContexts[0];\n}\n\nfunction resetHostBindingStubState() {\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.recordedEnumeratedHistograms.splice(0);\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.recordedPerformanceHistograms.splice(0);\n}\n"]}