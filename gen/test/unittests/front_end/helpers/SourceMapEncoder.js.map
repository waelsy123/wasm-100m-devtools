{"version":3,"file":"SourceMapEncoder.js","sourceRoot":"","sources":["../../../../../../../test/unittests/front_end/helpers/SourceMapEncoder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../../front_end/core/platform/platform.js';\nimport type * as SDK from '../../../../front_end/core/sdk/sdk.js';\n\nconst base64Digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nexport function encodeVlq(n: number): string {\n  // Set the sign bit as the least significant bit.\n  n = n >= 0 ? 2 * n : 1 - 2 * n;\n  // Encode into a base64 run.\n  let result = '';\n  while (true) {\n    // Extract the lowest 5 bits and remove them from the number.\n    const digit = n & 0x1f;\n    n >>= 5;\n    // Is there anything more left to encode?\n    if (n === 0) {\n      // We are done encoding, finish the run.\n      result += base64Digits[digit];\n      break;\n    } else {\n      // There is still more encode, so add the digit and the continuation bit.\n      result += base64Digits[0x20 + digit];\n    }\n  }\n  return result;\n}\n\nexport function encodeVlqList(list: number[]) {\n  return list.map(encodeVlq).join('');\n}\n\nconst mappingRE = new RegExp('^(\\\\d+):(\\\\d+)(?:\\\\s*=>\\\\s*([^:]+):(\\\\d+):(\\\\d+)(?:@(\\\\S+))?)?$');\n\n// Encode array mappings of the form \"compiledLine:compiledColumn => srcFile:srcLine:srcColumn@name\"\n// as a source map.\nexport function encodeSourceMap(textMap: string[]): SDK.SourceMap.SourceMapV3 {\n  let mappings = '';\n  const sources: Platform.DevToolsPath.UrlString[] = [];\n  const names: string[] = [];\n\n  const state = {\n    line: -1,\n    column: 0,\n    srcFile: 0,\n    srcLine: 0,\n    srcColumn: 0,\n    srcName: 0,\n  };\n\n  for (const mapping of textMap) {\n    const match = mapping.match(mappingRE);\n    if (!match) {\n      throw `Cannot parse mapping \"${mapping}\"`;\n    }\n\n    const lastState = Object.assign({}, state);\n    state.line = Number(match[1]);\n    state.column = Number(match[2]);\n    const hasSource = match[3] !== undefined;\n    const hasName = hasSource && (match[6] !== undefined);\n    if (hasSource) {\n      state.srcFile = getOrAddString(sources, match[3]);\n      state.srcLine = Number(match[4]);\n      state.srcColumn = Number(match[5]);\n      if (hasName) {\n        state.srcName = getOrAddString(names, match[6]);\n      }\n    }\n\n    if (state.line < lastState.line) {\n      throw 'Line numbers must be increasing';\n    }\n\n    const isNewLine = state.line !== lastState.line;\n\n    if (isNewLine) {\n      // Fixup for the first line mapping.\n      if (lastState.line === -1) {\n        lastState.line = 0;\n      }\n      // Insert semicolons for all the new lines.\n      mappings += ';'.repeat(state.line - lastState.line);\n      // Reset the compiled code column counter.\n      lastState.column = 0;\n    } else {\n      mappings += ',';\n    }\n\n    // Encode the mapping and add it to the list of mappings.\n    const toEncode = [state.column - lastState.column];\n    if (hasSource) {\n      toEncode.push(\n          state.srcFile - lastState.srcFile, state.srcLine - lastState.srcLine, state.srcColumn - lastState.srcColumn);\n      if (hasName) {\n        toEncode.push(state.srcName - lastState.srcName);\n      }\n    }\n    mappings += encodeVlqList(toEncode);\n  }\n\n  return {\n    mappings,\n    sources,\n    names,\n    version: 3,\n    file: undefined,\n    sections: undefined,\n    sourceRoot: undefined,\n    sourcesContent: undefined,\n  };\n\n  function getOrAddString(array: string[], s: string) {\n    const index = array.indexOf(s);\n    if (index >= 0) {\n      return index;\n    }\n    array.push(s);\n    return array.length - 1;\n  }\n}\n"]}