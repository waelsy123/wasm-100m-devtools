{"version":3,"file":"css_grid_label_helpers_test.js","sourceRoot":"","sources":["../../../../../../test/unittests/inspector_overlay/css_grid_label_helpers_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport {drawGridAreaNamesAndAssertLabels, drawGridLineNumbersAndAssertLabels, drawMultipleGridLineNumbersAndAssertLabels, getGridLineNumberLabelContainer, getGridTrackSizesLabelContainer, initFrameForGridLabels, initFrameForMultipleGridLabels, drawGridLineNamesAndAssertLabels} from '../front_end/helpers/InspectorOverlayHelpers.js';\nimport {drawGridLineNumbers, drawGridTrackSizes, generateLegibleTextColor, normalizePositionData} from '../../../inspector_overlay/css_grid_label_helpers.js';\n\ndescribe('drawGridLineNumbers label creation', () => {\n  beforeEach(initFrameForGridLabels);\n\n  const bounds = {\n    minX: 100,\n    minY: 100,\n    maxX: 200,\n    maxY: 200,\n    allPoints: [{x: 100, y: 100}, {x: 200, y: 100}, {x: 200, y: 200}, {x: 100, y: 200}],\n  };\n\n  const TESTS = [\n    {\n      description: 'can display positive row line numbers',\n      config: {\n        positiveRowLineNumberPositions: [{x: 0, y: 0}, {x: 0, y: 50}, {x: 0, y: 100}, {x: 0, y: 150}],\n      },\n      bounds,\n      expectedLabels: [1, 2, 3, 4],\n    },\n    {\n      description: 'can display negative row line numbers',\n      config: {\n        negativeRowLineNumberPositions: [{x: 0, y: 0}, {x: 0, y: 50}, {x: 0, y: 100}, {x: 0, y: 150}],\n      },\n      bounds,\n      expectedLabels: [-4, -3, -2, -1],\n    },\n    {\n      description: 'can display positive column line numbers',\n      config: {\n        positiveColumnLineNumberPositions: [{x: 0, y: 0}, {x: 50, y: 0}, {x: 100, y: 0}],\n      },\n      bounds,\n      expectedLabels: [1, 2, 3],\n    },\n    {\n      description: 'can display negative column line numbers',\n      config: {\n        negativeColumnLineNumberPositions: [{x: 0, y: 0}, {x: 50, y: 0}, {x: 100, y: 0}],\n      },\n      bounds,\n      expectedLabels: [-3, -2, -1],\n    },\n    {\n      description: 'can display all line numbers',\n      config: {\n        positiveColumnLineNumberPositions: [{x: 0, y: 0}, {x: 50, y: 0}, {x: 100, y: 0}],\n        positiveRowLineNumberPositions: [{x: 0, y: 0}, {x: 0, y: 50}, {x: 0, y: 100}, {x: 0, y: 150}],\n        negativeColumnLineNumberPositions: [{x: 0, y: 0}, {x: 50, y: 0}, {x: 100, y: 0}],\n        negativeRowLineNumberPositions: [{x: 0, y: 0}, {x: 0, y: 50}, {x: 0, y: 100}, {x: 0, y: 150}],\n      },\n      bounds,\n      expectedLabels: [1, 2, 3, 1, 2, 3, 4, -3, -2, -1, -4, -3, -2, -1],\n    },\n  ];\n\n  for (const {description, config, bounds, expectedLabels} of TESTS) {\n    it(description, () => {\n      const el = getGridLineNumberLabelContainer();\n      const data = normalizePositionData(config, bounds);\n      drawGridLineNumbers(el, data, {canvasWidth: 800, canvasHeight: 600}, 1);\n\n      assert.strictEqual(el.children.length, expectedLabels.length, 'The right number of labels got created');\n      assert.strictEqual(el.textContent, expectedLabels.join(''), 'The labels text is correct');\n    });\n  }\n});\n\ndescribe('drawGridLineNumbers label placement', () => {\n  beforeEach(initFrameForGridLabels);\n\n  const bounds = {\n    minX: 100,\n    maxX: 300,\n    minY: 100,\n    maxY: 300,\n    allPoints: [{x: 100, y: 100}, {x: 300, y: 100}, {x: 300, y: 300}, {x: 100, y: 300}],\n  };\n\n  const TESTS = [\n    {\n      description: 'places row labels left and right under normal conditions',\n      config: {\n        positiveRowLineNumberPositions: [{x: 100, y: 140}, {x: 100, y: 180}, {x: 100, y: 220}, {x: 100, y: 260}],\n        negativeRowLineNumberPositions: [{x: 300, y: 140}, {x: 300, y: 180}, {x: 300, y: 220}, {x: 300, y: 260}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'left-mid', count: 4},\n        {className: 'right-mid', count: 4},\n      ],\n    },\n    {\n      description: 'places column labels top and bottom under normal conditions',\n      config: {\n        positiveColumnLineNumberPositions: [{x: 140, y: 100}, {x: 180, y: 100}, {x: 220, y: 100}, {x: 260, y: 100}],\n        negativeColumnLineNumberPositions: [{x: 140, y: 300}, {x: 180, y: 300}, {x: 220, y: 300}, {x: 260, y: 300}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'top-mid', count: 4},\n        {className: 'bottom-mid', count: 4},\n      ],\n    },\n    {\n      description: 'shifts the first row label down when the first column also has a label',\n      config: {\n        positiveRowLineNumberPositions: [{x: 100, y: 100}, {x: 100, y: 140}],\n        positiveColumnLineNumberPositions: [{x: 100, y: 100}, {x: 140, y: 100}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'bottom-mid', count: 2},\n        {className: 'right-top', count: 1},\n        {className: 'right-mid', count: 1},\n      ],\n    },\n    {\n      description: 'moves positive row labels inside the grid when they are too close to the edge',\n      config: {\n        positiveRowLineNumberPositions: [{x: 0, y: 20}, {x: 0, y: 40}],\n      },\n      bounds: {\n        minX: 5,\n        maxX: 995,\n        minY: 100,\n        maxY: 200,\n        allPoints: [{x: 5, y: 100}, {x: 995, y: 100}, {x: 995, y: 200}, {x: 5, y: 200}],\n      },\n      expectedLabels: [\n        {className: 'left-mid', count: 2},\n      ],\n    },\n    {\n      description: 'moves negative row labels inside the grid when they are too close to the edge',\n      config: {\n        negativeRowLineNumberPositions: [{x: 995, y: 120}, {x: 995, y: 140}],\n      },\n      bounds: {\n        minX: 5,\n        maxX: 995,\n        minY: 100,\n        maxY: 200,\n        allPoints: [{x: 5, y: 100}, {x: 995, y: 100}, {x: 995, y: 200}, {x: 5, y: 200}],\n      },\n      expectedLabels: [\n        {className: 'right-mid', count: 2},\n      ],\n    },\n    {\n      description: 'moves positive column labels inside the grid when they are too close to the edge',\n      config: {\n        positiveColumnLineNumberPositions: [{x: 20, y: 0}, {x: 40, y: 0}],\n      },\n      bounds: {\n        minX: 100,\n        maxX: 200,\n        minY: 5,\n        maxY: 995,\n        allPoints: [{x: 100, y: 5}, {x: 200, y: 5}, {x: 200, y: 995}, {x: 100, y: 995}],\n      },\n      expectedLabels: [\n        {className: 'top-mid', count: 2},\n      ],\n    },\n    {\n      description: 'moves negative column labels inside the grid when they are too close to the edge',\n      config: {\n        negativeColumnLineNumberPositions: [{x: 20, y: 995}, {x: 40, y: 995}],\n      },\n      bounds: {\n        minX: 100,\n        maxX: 200,\n        minY: 5,\n        maxY: 995,\n        allPoints: [{x: 100, y: 5}, {x: 200, y: 5}, {x: 200, y: 995}, {x: 100, y: 995}],\n      },\n      expectedLabels: [\n        {className: 'bottom-mid', count: 2},\n      ],\n    },\n  ];\n\n  for (const {description, config, bounds, expectedLabels} of TESTS) {\n    it(description,\n       () => drawGridLineNumbersAndAssertLabels(\n           config, bounds, {canvasWidth: 800, canvasHeight: 600}, 0, expectedLabels));\n  }\n});\n\ndescribe('drawGridLineNumbers inner-grid label placement', () => {\n  beforeEach(initFrameForGridLabels);\n\n  // Making a grid bounds object that's the size of the viewport so all labels flip inside the grid.\n  const bounds = {\n    minX: 0,\n    maxX: 1000,\n    minY: 0,\n    maxY: 1000,\n    allPoints: [{x: 0, y: 0}, {x: 1000, y: 0}, {x: 1000, y: 1000}, {x: 0, y: 1000}],\n  };\n\n  const TESTS = [\n    {\n      description: 'flips positive row labels inside the grid',\n      config: {\n        positiveRowLineNumberPositions: [{x: 0, y: 0}, {x: 0, y: 500}, {x: 0, y: 1000}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'left-top', count: 1},\n        {className: 'left-mid', count: 1},\n        {className: 'left-bottom', count: 1},\n      ],\n    },\n    {\n      description: 'flips negative row labels inside the grid',\n      config: {\n        negativeRowLineNumberPositions: [{x: 1000, y: 0}, {x: 1000, y: 500}, {x: 1000, y: 1000}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'right-top', count: 1},\n        {className: 'right-mid', count: 1},\n        {className: 'right-bottom', count: 1},\n      ],\n    },\n    {\n      description: 'flips positive column labels inside the grid',\n      config: {\n        positiveColumnLineNumberPositions: [{x: 0, y: 0}, {x: 500, y: 0}, {x: 1000, y: 0}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'top-left', count: 1},\n        {className: 'top-mid', count: 1},\n        {className: 'top-right', count: 1},\n      ],\n    },\n    {\n      description: 'flips negative column labels inside the grid',\n      config: {\n        negativeColumnLineNumberPositions: [{x: 0, y: 1000}, {x: 500, y: 1000}, {x: 1000, y: 1000}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'bottom-left', count: 1},\n        {className: 'bottom-mid', count: 1},\n        {className: 'bottom-right', count: 1},\n      ],\n    },\n  ];\n\n  for (const {description, config, bounds, expectedLabels} of TESTS) {\n    it(description,\n       () => drawGridLineNumbersAndAssertLabels(\n           config, bounds, {canvasWidth: 800, canvasHeight: 600}, 0, expectedLabels));\n  }\n});\n\ndescribe('drawGridLineNumbers label skipping logic', () => {\n  beforeEach(initFrameForGridLabels);\n\n  it('skips labels on all sides when they are too close to each other', () => {\n    drawGridLineNumbersAndAssertLabels(\n        {\n          positiveRowLineNumberPositions:\n              [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200].map(y => ({x: 100, y: y + 100})),\n          negativeRowLineNumberPositions:\n              [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200].map(y => ({x: 300, y: y + 100})),\n          positiveColumnLineNumberPositions:\n              [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200].map(x => ({y: 100, x: x + 100})),\n          negativeColumnLineNumberPositions:\n              [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200].map(x => ({y: 300, x: x + 100})),\n        },\n        {\n          minX: 100,\n          maxX: 300,\n          minY: 100,\n          maxY: 300,\n          allPoints: [{x: 100, y: 100}, {x: 300, y: 100}, {x: 300, y: 300}, {x: 100, y: 300}],\n        },\n        {\n          canvasWidth: 800,\n          canvasHeight: 600,\n        },\n        0, [\n          // Expecting every other positive column labels.\n          {className: 'bottom-mid', count: 6},\n          // Expecting every other negative column labels.\n          {className: 'top-mid', count: 6},\n          // Expecting every other positive row labels, except the first and last which are set to avoid\n          // column labels.\n          {className: 'right-mid', count: 4},\n          // Expected the first and last positive row labels.\n          {className: 'right-top', count: 1},\n          {className: 'right-bottom', count: 1},\n          // Expecting every other negative row labels, except the first and last which are set to avoid\n          // column labels.\n          {className: 'left-mid', count: 4},\n          // Expected the first and last negative row labels.\n          {className: 'left-top', count: 1},\n          {className: 'left-bottom', count: 1},\n        ]);\n  });\n});\n\ndescribe('drawGridLineNumbers label placement with vertical writing mode', () => {\n  beforeEach(initFrameForGridLabels);\n\n  const bounds = {\n    minX: 100,\n    maxX: 300,\n    minY: 100,\n    maxY: 300,\n    allPoints: [{x: 100, y: 100}, {x: 300, y: 100}, {x: 300, y: 300}, {x: 100, y: 300}],\n  };\n\n  const TESTS = [\n    {\n      description: 'vertical-lr positive row labels should be displayed at the top of the grid',\n      config: {\n        writingMode: 'vertical-lr',\n        positiveRowLineNumberPositions: [{x: 100, y: 140}, {x: 100, y: 180}, {x: 100, y: 220}, {x: 100, y: 260}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'bottom-mid', count: 4},\n      ],\n    },\n    {\n      description: 'vertical-lr positive column labels should be displayed left of the grid',\n      config: {\n        writingMode: 'vertical-lr',\n        positiveColumnLineNumberPositions: [{x: 140, y: 100}, {x: 180, y: 100}, {x: 220, y: 100}, {x: 260, y: 100}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'right-mid', count: 4},\n      ],\n    },\n    {\n      description: 'vertical-lr negative row labels should be displayed at the bottom of the grid',\n      config: {\n        writingMode: 'vertical-lr',\n        negativeRowLineNumberPositions: [{x: 300, y: 140}, {x: 300, y: 180}, {x: 300, y: 220}, {x: 300, y: 260}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'top-mid', count: 4},\n      ],\n    },\n    {\n      description: 'vertical-lr negative column labels should be displayed right of the grid',\n      config: {\n        writingMode: 'vertical-lr',\n        negativeColumnLineNumberPositions: [{x: 140, y: 300}, {x: 180, y: 300}, {x: 220, y: 300}, {x: 260, y: 300}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'left-mid', count: 4},\n      ],\n    },\n    {\n      description: 'vertical-rl positive row labels should be displayed at the top of the grid',\n      config: {\n        writingMode: 'vertical-rl',\n        positiveRowLineNumberPositions: [{x: 100, y: 140}, {x: 100, y: 180}, {x: 100, y: 220}, {x: 100, y: 260}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'bottom-mid', count: 4},\n      ],\n    },\n    {\n      description: 'vertical-rl positive column labels should be displayed right of the grid',\n      config: {\n        writingMode: 'vertical-rl',\n        positiveColumnLineNumberPositions: [{x: 140, y: 100}, {x: 180, y: 100}, {x: 220, y: 100}, {x: 260, y: 100}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'left-mid', count: 4},\n      ],\n    },\n    {\n      description: 'vertical-rl negative row labels should be displayed at the bottom of the grid',\n      config: {\n        writingMode: 'vertical-rl',\n        negativeRowLineNumberPositions: [{x: 300, y: 140}, {x: 300, y: 180}, {x: 300, y: 220}, {x: 300, y: 260}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'top-mid', count: 4},\n      ],\n    },\n    {\n      description: 'vertical-rl negative column labels should be displayed left of the grid',\n      config: {\n        writingMode: 'vertical-rl',\n        negativeColumnLineNumberPositions: [{x: 140, y: 300}, {x: 180, y: 300}, {x: 220, y: 300}, {x: 260, y: 300}],\n      },\n      bounds,\n      expectedLabels: [\n        {className: 'right-mid', count: 4},\n      ],\n    },\n  ];\n\n  for (const {description, config, bounds, expectedLabels} of TESTS) {\n    it(description,\n       () => drawGridLineNumbersAndAssertLabels(\n           config, bounds, {canvasWidth: 800, canvasHeight: 600}, 0, expectedLabels));\n  }\n});\n\ndescribe('normalizePositionData', () => {\n  it('returns an object with default values', () => {\n    const data = normalizePositionData({}, {\n      minX: 0,\n      maxX: 100,\n      minY: 0,\n      maxY: 100,\n      allPoints: [{x: 0, y: 0}, {x: 100, y: 0}, {x: 100, y: 100}, {x: 0, y: 100}],\n    });\n\n    assert.deepStrictEqual(data, {\n      bounds: {\n        minX: 0,\n        maxX: 100,\n        minY: 0,\n        maxY: 100,\n        width: 100,\n        height: 100,\n        allPoints: [{x: 0, y: 0}, {x: 100, y: 0}, {x: 100, y: 100}, {x: 0, y: 100}],\n      },\n      rows: {\n        positive: {\n          positions: [],\n          hasFirst: false,\n          hasLast: false,\n        },\n        negative: {\n          positions: [],\n          hasFirst: false,\n          hasLast: false,\n        },\n      },\n      columns: {\n        positive: {\n          positions: [],\n          hasFirst: false,\n          hasLast: false,\n        },\n        negative: {\n          positions: [],\n          hasFirst: false,\n          hasLast: false,\n        },\n      },\n    });\n  });\n\n  it('rounds positions', () => {\n    const data = normalizePositionData(\n        {\n          positiveRowLineNumberPositions: [{y: 1.54, x: 0}, {y: 5.89, x: 0}, {y: 10, x: 0}, {y: 123.7564353278, x: 0}],\n          negativeRowLineNumberPositions: [{y: 3, x: 0}, {y: 6.3265, x: 0}, {y: 28.463532, x: 0}, {y: 50, x: 0}],\n          positiveColumnLineNumberPositions: [{x: 0.654535365378, y: 0}, {x: 1.1323256, y: 0}, {x: 1.896057, y: 0}],\n          negativeColumnLineNumberPositions: [{x: 2, y: 0}, {x: 6, y: 0}, {x: 10.564543, y: 0}],\n        },\n        {\n          minX: 0,\n          maxX: 100,\n          minY: 0,\n          maxY: 100,\n          allPoints: [{x: 0, y: 0}, {x: 100, y: 0}, {x: 100, y: 100}, {x: 0, y: 100}],\n        });\n\n    assert.deepStrictEqual(data.rows.positive.positions.map(p => p.y), [2, 6, 10, 124]);\n    assert.deepStrictEqual(data.rows.negative.positions.map(p => p.y), [3, 6, 28, 50]);\n    assert.deepStrictEqual(data.columns.positive.positions.map(p => p.x), [1, 1, 2]);\n    assert.deepStrictEqual(data.columns.negative.positions.map(p => p.x), [2, 6, 11]);\n  });\n\n  it('detects first and last positions', () => {\n    const data = normalizePositionData(\n        {\n          positiveRowLineNumberPositions: [{y: 0, x: 0}, {y: 10, x: 0}, {y: 20, x: 0}],\n          negativeRowLineNumberPositions: [{y: 10, x: 30}, {y: 20, x: 30}, {y: 30, x: 30}],\n          positiveColumnLineNumberPositions: [{x: 10, y: 0}, {x: 20, y: 0}],\n          negativeColumnLineNumberPositions: [{x: 0, y: 30}, {x: 30, y: 30}],\n        },\n        {\n          minX: 0,\n          maxX: 30,\n          minY: 0,\n          maxY: 30,\n          allPoints: [{x: 0, y: 0}, {x: 30, y: 0}, {x: 30, y: 30}, {x: 0, y: 30}],\n        });\n\n    assert.isTrue(data.rows.positive.hasFirst);\n    assert.isFalse(data.rows.positive.hasLast);\n    assert.isFalse(data.rows.negative.hasFirst);\n    assert.isTrue(data.rows.negative.hasLast);\n    assert.isFalse(data.columns.positive.hasFirst);\n    assert.isFalse(data.columns.positive.hasLast);\n    assert.isTrue(data.columns.negative.hasFirst);\n    assert.isTrue(data.columns.negative.hasLast);\n  });\n\n  it('prefers line names over line numbers when present', () => {\n    const data = normalizePositionData(\n        {\n          gridHighlightConfig: {showLineNames: true},\n          positiveRowLineNumberPositions: [{x: 0, y: 10}, {x: 0, y: 20}, {x: 0, y: 30}],\n          positiveColumnLineNumberPositions: [{x: 10, y: 0}, {x: 20, y: 0}, {x: 30, y: 0}],\n          rowLineNameOffsets: [{name: 'foo', x: 0, y: 10}],\n          columnLineNameOffsets: [{name: 'bar', x: 10, y: 0}, {name: 'baz', x: 20, y: 0}],\n        },\n        {\n          minX: 0,\n          maxX: 30,\n          minY: 0,\n          maxY: 30,\n          allPoints: [{x: 0, y: 0}, {x: 30, y: 0}, {x: 30, y: 30}, {x: 0, y: 30}],\n        });\n\n    assert.strictEqual(data.rows.negative.positions.length, 0);\n    assert.strictEqual(data.columns.negative.positions.length, 0);\n    assert.strictEqual(\n        data.rows.positive.positions.length, 1, 'There should be only one row offset since there is only one name');\n    assert.strictEqual(\n        data.columns.positive.positions.length, 2, 'There should be 2 column offsets since there are 2 names');\n  });\n\n  it('returns the correct line name structure', () => {\n    const data = normalizePositionData(\n        {\n          gridHighlightConfig: {showLineNames: true},\n          rowLineNameOffsets: [\n            {name: 'foo', x: 0, y: 5},\n            {name: 'bar', x: 0, y: 5},\n            {name: 'test', x: 0, y: 20},\n            {name: 'baz', x: 0, y: 5},\n          ],\n          columnLineNameOffsets: [\n            {name: 'edge-start', x: 15, y: 0},\n            {name: 'edge-end', x: 17, y: 0},\n          ],\n        },\n        {\n          minX: 0,\n          maxX: 30,\n          minY: 0,\n          maxY: 30,\n          allPoints: [{x: 0, y: 0}, {x: 30, y: 0}, {x: 30, y: 30}, {x: 0, y: 30}],\n        });\n\n    assert.deepStrictEqual(data.rows.positive.positions, [{x: 0, y: 5}, {x: 0, y: 20}]);\n    assert.deepStrictEqual(data.rows.positive.names, [['foo', 'bar', 'baz'], ['test']]);\n    assert.deepStrictEqual(data.columns.positive.positions, [{x: 15, y: 0}, {x: 17, y: 0}]);\n    assert.deepStrictEqual(data.columns.positive.names, [['edge-start'], ['edge-end']]);\n  });\n});\n\ndescribe('drawGridAreaNames', () => {\n  beforeEach(initFrameForGridLabels);\n\n  const TESTS = [\n    {\n      description: 'does not create labels when not needed',\n      areaBounds: [],\n      expectedLabels: [],\n    },\n    {\n      description: 'creates the necessary number of area labels',\n      areaBounds: [\n        {\n          name: 'foo',\n          bounds: {allPoints: [{x: 0, y: 0}, {x: 10, y: 0}, {x: 10, y: 10}, {x: 0, y: 10}]},\n        },\n        {\n          name: 'bar',\n          bounds: {allPoints: [{x: 0, y: 0}, {x: 10, y: 0}, {x: 10, y: 10}, {x: 0, y: 10}]},\n        },\n      ],\n      expectedLabels: [\n        {textContent: 'foo'},\n        {textContent: 'bar'},\n      ],\n    },\n    {\n      description: 'positions area labels correctly',\n      areaBounds: [\n        {\n          name: 'foo',\n          bounds: {allPoints: [{x: 125, y: 22}, {x: 225, y: 22}, {x: 225, y: 42}, {x: 125, y: 42}]},\n        },\n        {\n          name: 'bar',\n          bounds: {allPoints: [{x: 678, y: 435}, {x: 878, y: 435}, {x: 878, y: 635}, {x: 678, y: 635}]},\n        },\n      ],\n      expectedLabels: [\n        {textContent: 'foo', top: '22px', left: '125px'},\n        {textContent: 'bar', top: '435px', left: '678px'},\n      ],\n    },\n  ];\n\n  for (const {description, areaBounds, expectedLabels} of TESTS) {\n    it(description, () => drawGridAreaNamesAndAssertLabels(areaBounds, undefined, undefined, expectedLabels));\n  }\n});\n\ndescribe('drawGridAreaNames  label placement with vertical writing mode', () => {\n  beforeEach(initFrameForGridLabels);\n\n  const areaBounds =\n      [{name: 'foo', bounds: {allPoints: [{x: 20, y: 30}, {x: 100, y: 30}, {x: 100, y: 50}, {x: 20, y: 50}]}}];\n  const TESTS = [\n    {\n      description: 'positions area labels correctly in vertical-lr writing-mode',\n      writingMode: 'vertical-lr',\n      areaBounds,\n      expectedLabels: [{textContent: 'foo', top: '30px', left: '20px'}],\n    },\n    {\n      description: 'positions area labels correctly in vertical-rl writing-mode',\n      writingMode: 'vertical-rl',\n      areaBounds,\n      expectedLabels: [{textContent: 'foo', top: '50px', left: '20px'}],\n    },\n  ];\n\n  for (const {description, writingMode, areaBounds, expectedLabels} of TESTS) {\n    // The way points are transformed using the writingMode matrix isn't what we're interested in testing here, so we\n    // just pass the identity matrix to make our life easier.\n    it(description, () => drawGridAreaNamesAndAssertLabels(areaBounds, new DOMMatrix(), writingMode, expectedLabels));\n  }\n});\n\ndescribe('drawMultipleGridLabels', () => {\n  it('can set labels on multiple grid nodes', () => {\n    initFrameForMultipleGridLabels(2);\n    const bounds = {\n      minX: 100,\n      maxX: 500,\n      minY: 100,\n      maxY: 500,\n      allPoints: [{x: 100, y: 100}, {x: 500, y: 100}, {x: 500, y: 500}, {x: 100, y: 500}],\n    };\n    const configs = [\n      {\n        layerId: 1,\n        positiveRowLineNumberPositions: [{x: 100, y: 100}, {x: 100, y: 150}, {x: 100, y: 200}],\n      },\n      {\n        layerId: 2,\n        positiveRowLineNumberPositions: [{x: 100, y: 100}, {x: 100, y: 150}, {x: 100, y: 200}],\n      },\n    ];\n    const expectedLayers = [\n      {\n        layerId: 1,\n        expectedLabels: [\n          {className: 'right-mid', count: 3},\n        ],\n      },\n      {\n        layerId: 2,\n        expectedLabels: [\n          {className: 'right-mid', count: 3},\n        ],\n      },\n    ];\n    drawMultipleGridLineNumbersAndAssertLabels(\n        configs.map(config => ({config, layerId: config.layerId})), bounds, {canvasWidth: 800, canvasHeight: 600},\n        expectedLayers);\n  });\n});\n\ndescribe('drawGridTrackSizes label creation', () => {\n  beforeEach(initFrameForGridLabels);\n\n  const TESTS = [\n    {\n      description: 'can display track sizes',\n      config: {\n        gridHighlightConfig: {\n          showTrackSizes: true,\n        },\n        columnTrackSizes: [{computedSize: 10, x: 10, y: 0}, {computedSize: 20, x: 20, y: 0}],\n        rowTrackSizes: [{computedSize: 10, x: 0, y: 10}, {computedSize: 20, x: 0, y: 20}],\n        rotationAngle: 0,\n      },\n      expectedLabels: ['10px', '20px', '10px', '20px'],\n    },\n  ];\n\n  for (const {description, config, expectedLabels} of TESTS) {\n    it(description, () => {\n      const el = getGridTrackSizesLabelContainer();\n      drawGridTrackSizes(el, config.rowTrackSizes, 'row', {canvasWidth: 800, canvasHeight: 600}, 1);\n      drawGridTrackSizes(el, config.columnTrackSizes, 'column', {canvasWidth: 800, canvasHeight: 600}, 1);\n      assert.strictEqual(el.children.length, expectedLabels.length, 'The right number of labels got created');\n      assert.strictEqual(el.textContent, expectedLabels.join(''), 'The labels text is correct');\n    });\n  }\n});\n\ndescribe('drawGridLineNames', () => {\n  beforeEach(initFrameForGridLabels);\n\n  const TESTS = [\n    {\n      description: 'places labels in the right spot',\n      rowLineNameOffsets: [\n        {x: 100, y: 100, name: 'first-row'},\n        {x: 100, y: 200, name: 'second-row'},\n        {x: 100, y: 300, name: 'third-row'},\n      ],\n      columnLineNameOffsets: [\n        {x: 100, y: 100, name: 'first-col'},\n        {x: 200, y: 100, name: 'second-col'},\n        {x: 300, y: 100, name: 'third-col'},\n      ],\n      expectedLabels: [\n        {type: 'row', textContent: 'first-row', y: 100},\n        {type: 'row', textContent: 'second-row', y: 199.5},\n        {type: 'row', textContent: 'third-row', y: 299.5},\n        {type: 'column', textContent: 'first-col', x: 99},\n        {type: 'column', textContent: 'second-col', x: 199},\n        {type: 'column', textContent: 'third-col', x: 299},\n      ],\n      deviceEmulationFactor: 1,\n    },\n    {\n      description: 'groups labels together when they are for the same line',\n      rowLineNameOffsets: [],\n      columnLineNameOffsets: [\n        {x: 100, y: 100, name: 'first-col'},\n        {x: 100, y: 100, name: 'also-first-col'},\n        {x: 200, y: 100, name: 'second-col'},\n        {x: 100, y: 100, name: 'and-another-first-col'},\n        {x: 200, y: 100, name: 'also-second-col'},\n      ],\n      expectedLabels: [\n        {type: 'column', textContent: 'first-colalso-first-coland-another-first-col'},\n        {type: 'column', textContent: 'second-colalso-second-col'},\n      ],\n      deviceEmulationFactor: 1,\n    },\n    {\n      description: 'places labels in the right spot with emulation factor = 2',\n      rowLineNameOffsets: [\n        {x: 100, y: 100, name: 'first-row'},\n        {x: 100, y: 200, name: 'second-row'},\n        {x: 100, y: 300, name: 'third-row'},\n      ],\n      columnLineNameOffsets: [\n        {x: 100, y: 100, name: 'first-col'},\n        {x: 200, y: 100, name: 'second-col'},\n        {x: 300, y: 100, name: 'third-col'},\n      ],\n      expectedLabels: [\n        {type: 'row', textContent: 'first-row', y: 200},\n        {type: 'row', textContent: 'second-row', y: 399.5},\n        {type: 'row', textContent: 'third-row', y: 599.5},\n        {type: 'column', textContent: 'first-col', x: 199},\n        {type: 'column', textContent: 'second-col', x: 399},\n        {type: 'column', textContent: 'third-col', x: 599},\n      ],\n      deviceEmulationFactor: 2,\n    },\n  ];\n\n  for (const {description, rowLineNameOffsets, columnLineNameOffsets, deviceEmulationFactor, expectedLabels} of TESTS) {\n    it(description,\n       () => drawGridLineNamesAndAssertLabels(\n           {\n             gridHighlightConfig: {\n               showLineNames: true,\n             },\n             rowLineNameOffsets,\n             columnLineNameOffsets,\n           },\n           {\n             minX: 100,\n             maxX: 300,\n             minY: 100,\n             maxY: 300,\n             allPoints: [{x: 100, y: 100}, {x: 300, y: 100}, {x: 300, y: 300}, {x: 100, y: 300}],\n           },\n           {canvasWidth: 800, canvasHeight: 600}, 0, deviceEmulationFactor, expectedLabels));\n  }\n});\n\ndescribe('generateLegibleTextColor', () => {\n  it('returns expected colors depending on the background color', () => {\n    // black\n    assert.strictEqual(generateLegibleTextColor('rgb(0, 0, 0)'), 'white');\n\n    // dark grey\n    assert.strictEqual(generateLegibleTextColor('rgb(50, 50, 50)'), 'white');\n\n    // light grey\n    assert.strictEqual(generateLegibleTextColor('rgb(200, 200, 200)'), '#121212');\n\n    // white\n    assert.strictEqual(generateLegibleTextColor('rgb(255, 255, 255)'), '#121212');\n\n    // several of the default colors (from OverlayColorGenerator.js)\n    assert.strictEqual(generateLegibleTextColor('rgb(245, 151, 148)'), '#121212');\n    assert.strictEqual(generateLegibleTextColor('rgb(212, 237, 49)'), '#121212');\n    assert.strictEqual(generateLegibleTextColor('rgb(91, 209, 215)'), '#121212');\n    assert.strictEqual(generateLegibleTextColor('rgb(188, 206, 251)'), '#121212');\n    assert.strictEqual(generateLegibleTextColor('rgb(208, 148, 234)'), '#121212');\n    assert.strictEqual(generateLegibleTextColor('rgb(235, 148, 207)'), '#121212');\n  });\n\n  it('ignores alpha', () => {\n    assert.strictEqual(generateLegibleTextColor('rgba(0, 0, 0, 0.8)'), 'white');\n  });\n\n  it('returns null for unparsable rgb colors', () => {\n    assert.isNull(generateLegibleTextColor('not a color'));\n    assert.isNull(generateLegibleTextColor(''));\n    assert.isNull(generateLegibleTextColor('rgb(r g b)'));\n  });\n\n  it('accepts #hex colors too', () => {\n    assert.strictEqual(generateLegibleTextColor('#000000'), 'white');\n    assert.strictEqual(generateLegibleTextColor('#FFFFFF'), '#121212');\n    assert.strictEqual(generateLegibleTextColor('#a68cf0'), '#121212');\n  });\n});\n"]}