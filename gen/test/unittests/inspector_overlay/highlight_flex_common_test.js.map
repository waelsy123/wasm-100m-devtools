{"version":3,"file":"highlight_flex_common_test.js","sourceRoot":"","sources":["../../../../../../test/unittests/inspector_overlay/highlight_flex_common_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport {distance, getColinearPointAtDistance, getGapQuadBetweenQuads, getLinesAndItemsQuads, getGapQuads, growQuadToEdgesOf, intersectSegments, segmentContains, uniteQuads} from '../../../inspector_overlay/highlight_flex_common.js';\nimport type {PathCommands, Position, Quad} from '../../../inspector_overlay/common.js';\n\nfunction createPathCommands(...points: number[]): PathCommands {\n  if (points.length !== 8) {\n    throw new Error('Expected 8 coordinates to describe the element');\n  }\n\n  const path: PathCommands = ['M'];\n  for (let i = 0; i < points.length; i += 2) {\n    path.push(points[i]);\n    path.push(points[i + 1]);\n    path.push('L');\n  }\n  path[path.length - 1] = 'Z';\n\n  return path;\n}\n\nfunction createItem(...points: number[]): {itemBorder: PathCommands, baseline: number} {\n  return {\n    itemBorder: createPathCommands(...points),\n    baseline: 0,\n  };\n}\n\nfunction createQuad(...points: number[]): Quad {\n  if (points.length !== 8) {\n    throw new Error('Expected 8 coordinates to describe the element');\n  }\n\n  return {\n    p1: {x: points[0], y: points[1]},\n    p2: {x: points[2], y: points[3]},\n    p3: {x: points[4], y: points[5]},\n    p4: {x: points[6], y: points[7]},\n  };\n}\n\ndescribe('getLinesAndItemsQuads', () => {\n  it('creates the right number of line and item quads', () => {\n    const lineQuads = getLinesAndItemsQuads(\n        createPathCommands(0, 0, 100, 0, 100, 100, 0, 100),\n        [\n          [\n            createItem(10, 10, 30, 10, 30, 30, 10, 30),\n            createItem(40, 10, 60, 10, 60, 30, 40, 30),\n            createItem(70, 10, 90, 10, 90, 30, 70, 30),\n          ],\n          [\n            createItem(10, 40, 70, 40, 70, 70, 10, 70),\n            createItem(80, 40, 90, 40, 90, 70, 80, 70),\n          ],\n          [\n            createItem(10, 80, 40, 80, 40, 90, 10, 90),\n            createItem(50, 80, 90, 80, 90, 90, 50, 90),\n          ],\n        ],\n        true, false);\n\n    assert.strictEqual(lineQuads.length, 3, '3 line quads got created');\n    assert.strictEqual(lineQuads[0].items.length, 3, '3 flex items on the first line got created');\n    assert.strictEqual(lineQuads[1].items.length, 2, '2 flex items on the second line got created');\n    assert.strictEqual(lineQuads[2].items.length, 2, '2 flex items on the third line got created');\n  });\n\n  it('creates a line quad as big as the container when there is only one line', () => {\n    const lineQuads = getLinesAndItemsQuads(\n        createPathCommands(0, 0, 10, 0, 10, 10, 0, 10), [[createItem(2, 2, 8, 2, 8, 8, 2, 8)]], true, false);\n\n    assert.deepStrictEqual(lineQuads[0].quad.p1, {x: 0, y: 0});\n    assert.deepStrictEqual(lineQuads[0].quad.p2, {x: 10, y: 0});\n    assert.deepStrictEqual(lineQuads[0].quad.p3, {x: 10, y: 10});\n    assert.deepStrictEqual(lineQuads[0].quad.p4, {x: 0, y: 10});\n  });\n\n  it('creates quads for flex lines that extend to the edges of the container in the main direction', () => {\n    const lineQuadsRowDirection = getLinesAndItemsQuads(\n        createPathCommands(0, 0, 100, 0, 100, 80, 0, 80),\n        [\n          [\n            createItem(10, 10, 30, 10, 30, 30, 10, 30),\n            createItem(40, 10, 60, 10, 60, 30, 40, 30),\n            createItem(70, 10, 90, 10, 90, 30, 70, 30),\n          ],\n          [\n            createItem(10, 40, 70, 40, 70, 70, 10, 70),\n            createItem(80, 40, 90, 40, 90, 70, 80, 70),\n          ],\n        ],\n        true, false);\n\n    assert.deepStrictEqual(lineQuadsRowDirection[0].quad, createQuad(0, 10, 100, 10, 100, 30, 0, 30));\n\n    assert.deepStrictEqual(lineQuadsRowDirection[1].quad, createQuad(0, 40, 100, 40, 100, 70, 0, 70));\n\n    const lineQuadsColumnDirection = getLinesAndItemsQuads(\n        createPathCommands(0, 0, 50, 0, 50, 70, 0, 70),\n        [\n          [\n            createItem(10, 10, 20, 10, 20, 30, 10, 30),\n            createItem(10, 40, 20, 40, 20, 50, 10, 50),\n          ],\n          [\n            createItem(30, 20, 40, 20, 40, 40, 30, 40),\n            createItem(30, 50, 40, 50, 40, 60, 30, 60),\n          ],\n        ],\n        false, false);\n\n    assert.deepStrictEqual(lineQuadsColumnDirection[0].quad, createQuad(10, 0, 20, 0, 20, 70, 10, 70));\n\n    assert.deepStrictEqual(lineQuadsColumnDirection[1].quad, createQuad(30, 0, 40, 0, 40, 70, 30, 70));\n  });\n\n  it('creates normal and extended quads for items', () => {\n    const lineQuads = getLinesAndItemsQuads(\n        createPathCommands(0, 0, 70, 0, 70, 40, 0, 40),\n        [\n          [\n            createItem(10, 10, 30, 10, 30, 30, 10, 30),\n            createItem(40, 10, 60, 10, 60, 30, 40, 30),\n          ],\n        ],\n        true, false);\n\n    assert.deepStrictEqual(\n        lineQuads[0].items[0], createQuad(10, 10, 30, 10, 30, 30, 10, 30), 'The first flex item quad matches the item');\n\n    assert.deepStrictEqual(\n        lineQuads[0].items[1], createQuad(40, 10, 60, 10, 60, 30, 40, 30),\n        'The second flex item quad matches the item');\n\n    assert.deepStrictEqual(\n        lineQuads[0].extendedItems[0], createQuad(10, 0, 30, 0, 30, 40, 10, 40),\n        'The first flex item extended quad extends to the cross edge of the flex line');\n\n    assert.deepStrictEqual(\n        lineQuads[0].extendedItems[1], createQuad(40, 0, 60, 0, 60, 40, 40, 40),\n        'The second flex item extended quad extends to the cross edge of the flex line');\n  });\n\n  it('creates correct quads with transformed layout', () => {\n    const lineQuads = getLinesAndItemsQuads(\n        createPathCommands(10, 70, 70, 10, 110, 50, 50, 110),\n        [\n          [\n            createItem(30, 70, 50, 50, 60, 60, 40, 80),\n            createItem(60, 40, 70, 30, 80, 40, 70, 50),\n          ],\n          [\n            createItem(40, 80, 50, 70, 60, 80, 50, 90),\n            createItem(50, 70, 80, 40, 90, 50, 60, 80),\n          ],\n        ],\n        true, false);\n\n    assert.deepStrictEqual(lineQuads[0].quad, createQuad(20, 80, 80, 20, 90, 30, 30, 90));\n    assert.deepStrictEqual(lineQuads[0].extendedItems[0], createQuad(30, 70, 50, 50, 60, 60, 40, 80));\n    assert.deepStrictEqual(lineQuads[0].extendedItems[1], createQuad(60, 40, 70, 30, 80, 40, 70, 50));\n\n    assert.deepStrictEqual(lineQuads[1].quad, createQuad(30, 90, 90, 30, 100, 40, 40, 100));\n    assert.deepStrictEqual(lineQuads[1].extendedItems[0], createQuad(40, 80, 50, 70, 60, 80, 50, 90));\n    assert.deepStrictEqual(lineQuads[1].extendedItems[1], createQuad(50, 70, 80, 40, 90, 50, 60, 80));\n  });\n});\n\ndescribe('getGapQuads', () => {\n  it('does not return any cross gap if there is only 1 line', () => {\n    const {crossGaps} = getGapQuads(\n        {\n          crossGap: 10,\n          mainGap: 10,\n          isHorizontalFlow: true,\n          isReverse: false,\n        },\n        [{\n          quad: createQuad(0, 0, 100, 0, 100, 100, 0, 100),\n          items: [],\n          extendedItems: [],\n        }]);\n\n    assert.strictEqual(crossGaps.length, 0, 'There cannot be cross gap if there is only one line');\n  });\n\n  it('does not return any main or cross gap if there actually isn\\'t any gaps', () => {\n    const {crossGaps, mainGaps} = getGapQuads(\n        {\n          crossGap: 0,\n          mainGap: 0,\n          isHorizontalFlow: true,\n          isReverse: false,\n        },\n        [\n          {\n            quad: createQuad(0, 10, 100, 10, 100, 30, 0, 30),\n            items: [\n              createQuad(10, 10, 30, 10, 30, 30, 10, 30),\n              createQuad(40, 10, 60, 10, 60, 30, 30, 40),\n              createQuad(70, 10, 90, 10, 90, 30, 70, 30),\n            ],\n            extendedItems: [\n              createQuad(10, 10, 30, 10, 30, 30, 10, 30),\n              createQuad(40, 10, 60, 10, 60, 30, 30, 40),\n              createQuad(70, 10, 90, 10, 90, 30, 70, 30),\n            ],\n          },\n          {\n            quad: createQuad(0, 40, 100, 40, 100, 70, 70, 0),\n            items: [\n              createQuad(10, 40, 70, 40, 70, 70, 10, 70),\n              createQuad(80, 40, 90, 40, 90, 70, 80, 70),\n            ],\n            extendedItems: [\n              createQuad(10, 40, 70, 40, 70, 70, 10, 70),\n              createQuad(80, 40, 90, 40, 90, 70, 80, 70),\n            ],\n          },\n        ]);\n\n    assert.strictEqual(crossGaps.length, 0, 'No cross gap quads created when there is no cross gap');\n    assert.strictEqual(mainGaps[0].length, 0, 'No main gap quads created when there is no main gap on the first line');\n    assert.strictEqual(mainGaps[1].length, 0, 'No main gap quads created when there is no main gap on the second line');\n  });\n\n  it('returns 1 less gap than the number of lines and the number of items', () => {\n    const {crossGaps, mainGaps} = getGapQuads(\n        {\n          crossGap: 10,\n          mainGap: 10,\n          isHorizontalFlow: true,\n          isReverse: false,\n        },\n        [\n          {\n            quad: createQuad(0, 10, 100, 10, 100, 30, 0, 30),\n            items: [\n              createQuad(10, 10, 30, 10, 30, 30, 10, 30),\n              createQuad(40, 10, 60, 10, 60, 30, 30, 40),\n              createQuad(70, 10, 90, 10, 90, 30, 70, 30),\n            ],\n            extendedItems: [\n              createQuad(10, 10, 30, 10, 30, 30, 10, 30),\n              createQuad(40, 10, 60, 10, 60, 30, 30, 40),\n              createQuad(70, 10, 90, 10, 90, 30, 70, 30),\n            ],\n          },\n          {\n            quad: createQuad(0, 40, 100, 40, 100, 70, 70, 0),\n            items: [\n              createQuad(10, 40, 70, 40, 70, 70, 10, 70),\n              createQuad(80, 40, 90, 40, 90, 70, 80, 70),\n            ],\n            extendedItems: [\n              createQuad(10, 40, 70, 40, 70, 70, 10, 70),\n              createQuad(80, 40, 90, 40, 90, 70, 80, 70),\n            ],\n          },\n          {\n            quad: createQuad(0, 80, 100, 80, 100, 90, 90, 0),\n            items: [\n              createQuad(10, 80, 40, 80, 40, 90, 10, 90),\n              createQuad(50, 80, 90, 80, 90, 90, 50, 90),\n            ],\n            extendedItems: [\n              createQuad(10, 80, 40, 80, 40, 90, 10, 90),\n              createQuad(50, 80, 90, 80, 90, 90, 50, 90),\n            ],\n          },\n        ]);\n\n    assert.strictEqual(crossGaps.length, 2, 'There are 2 cross gaps for 3 lines');\n    assert.strictEqual(mainGaps[0].length, 2, 'There are 2 main gaps on the first line, which has 3 items');\n    assert.strictEqual(mainGaps[1].length, 1, 'There is 1 main gap on the second line, which has 2 items');\n    assert.strictEqual(mainGaps[2].length, 1, 'There is 1 main gap on the third line, which has 2 items');\n  });\n});\n\ndescribe('getGapQuadBetweenQuads', () => {\n  it('creates a quad between 2 quads stacked either vertically or horizontally, also when reversed', () => {\n    const quadV = getGapQuadBetweenQuads(\n        createQuad(0, 0, 60, 0, 60, 10, 0, 10),\n        createQuad(0, 20, 60, 20, 60, 30, 0, 30),\n        10,\n        true,\n        false,\n    );\n    assert.deepStrictEqual(quadV, createQuad(0, 10, 60, 10, 60, 20, 0, 20));\n\n    const quadVReversed = getGapQuadBetweenQuads(\n        createQuad(0, 20, 60, 20, 60, 30, 0, 30),\n        createQuad(0, 0, 60, 0, 60, 10, 0, 10),\n        10,\n        true,\n        true,\n    );\n    assert.deepStrictEqual(quadVReversed, quadV);\n\n    const quadH = getGapQuadBetweenQuads(\n        createQuad(0, 0, 10, 0, 10, 50, 50, 0),\n        createQuad(20, 0, 30, 0, 30, 50, 50, 20),\n        10,\n        false,\n        false,\n    );\n    assert.deepStrictEqual(quadH, createQuad(10, 0, 20, 0, 20, 50, 10, 50));\n\n    const quadHReversed = getGapQuadBetweenQuads(\n        createQuad(20, 0, 30, 0, 30, 50, 50, 20),\n        createQuad(0, 0, 10, 0, 10, 50, 50, 0),\n        10,\n        false,\n        true,\n    );\n    assert.deepStrictEqual(quadHReversed, quadH);\n  });\n\n  it('works when the gap is smaller than the distance between the quads', () => {\n    const quad = getGapQuadBetweenQuads(\n        createQuad(0, 0, 30, 0, 30, 20, 0, 20),\n        createQuad(0, 50, 30, 50, 30, 70, 0, 70),\n        10,\n        true,\n        false,\n    );\n    assert.deepStrictEqual(quad, createQuad(0, 30, 30, 30, 30, 40, 0, 40));\n  });\n\n  it('works when the quads are transformed', () => {\n    const quad = getGapQuadBetweenQuads(\n        createQuad(0, 20, 20, 0, 40, 20, 20, 40),\n        createQuad(50, 70, 70, 50, 80, 60, 60, 80),\n        10,\n        true,\n        false,\n    );\n    // The rounding of coordinates ends up 1px off, but this won't really matter visually, so the test just accounts for\n    // it here.\n    assert.deepStrictEqual(quad, createQuad(31, 51, 51, 31, 59, 39, 39, 59));\n  });\n});\n\ndescribe('uniteQuads', () => {\n  it('creates a quad that is big enough to contain the 2 passed quads', () => {\n    const quad = uniteQuads(\n        createQuad(0, 20, 10, 20, 10, 30, 0, 30),\n        createQuad(20, 10, 40, 10, 40, 40, 20, 40),\n        true,\n        false,\n    );\n    assert.deepStrictEqual(quad, createQuad(0, 10, 40, 10, 40, 40, 0, 40));\n  });\n\n  it('can be called multiple times with the previously united quad to construct a flex line out of flex items', () => {\n    let quad = uniteQuads(\n        createQuad(0, 20, 10, 20, 10, 30, 0, 30),\n        createQuad(20, 10, 40, 10, 40, 40, 20, 40),\n        true,\n        false,\n    );\n    quad = uniteQuads(\n        quad,\n        createQuad(60, 30, 90, 30, 90, 50, 60, 50),\n        true,\n        false,\n    );\n    quad = uniteQuads(\n        quad,\n        createQuad(130, 0, 180, 0, 180, 30, 130, 30),\n        true,\n        false,\n    );\n    assert.deepStrictEqual(quad, createQuad(0, 0, 180, 0, 180, 50, 0, 50));\n  });\n\n  it('also works when the quads are transformed', () => {\n    const quad = uniteQuads(\n        createQuad(0, 20, 20, 0, 40, 20, 20, 40),\n        createQuad(50, 70, 70, 50, 80, 60, 60, 80),\n        false,\n        false,\n    );\n    assert.deepStrictEqual(quad, createQuad(0, 20, 20, 0, 80, 60, 60, 80));\n  });\n});\n\ndescribe('growQuadToEdgesOf', () => {\n  it('works horizontally', () => {\n    const quad = growQuadToEdgesOf(\n        createQuad(10, 10, 20, 10, 20, 20, 10, 20),\n        createQuad(0, 0, 60, 0, 60, 30, 0, 30),\n        true,\n    );\n    assert.deepStrictEqual(quad, createQuad(0, 10, 60, 10, 60, 20, 0, 20));\n  });\n\n  it('works vertically', () => {\n    const quad = growQuadToEdgesOf(\n        createQuad(10, 10, 20, 10, 20, 20, 10, 20),\n        createQuad(0, 0, 60, 0, 60, 30, 0, 30),\n        false,\n    );\n    assert.deepStrictEqual(quad, createQuad(10, 0, 20, 0, 20, 30, 10, 30));\n  });\n\n  it('works with transformed quads', () => {\n    const quad = growQuadToEdgesOf(\n        createQuad(30, 60, 60, 30, 80, 50, 50, 80),\n        createQuad(10, 60, 60, 10, 100, 50, 50, 100),\n        true,\n    );\n    assert.deepStrictEqual(quad, createQuad(20, 70, 70, 20, 90, 40, 40, 90));\n  });\n});\n\ndescribe('getColinearPointAtDistance', () => {\n  function assertPoint(p1: Position, p2: Position, distance: number, expected: Position): void {\n    const point = getColinearPointAtDistance(p1, p2, distance);\n    assert.deepStrictEqual({x: Math.round(point.x), y: Math.round(point.y)}, expected);\n  }\n\n  it('returns the right coordinates when the line is horizontal', () => {\n    assertPoint({x: 0, y: 0}, {x: 10, y: 0}, 5, {x: 5, y: 0});\n  });\n\n  it('returns the right coordinates when the line is vertical', () => {\n    assertPoint({x: 0, y: 0}, {x: 0, y: 10}, 5, {x: 0, y: 5});\n  });\n\n  it('returns the right coordinates when the line is at an angle', () => {\n    assertPoint({x: 0, y: 0}, {x: 10, y: 10}, 5, {x: 4, y: 4});\n  });\n\n  it('also works when distance is longer than the p1-p2 segment', () => {\n    assertPoint({x: 10, y: 20}, {x: 10, y: 40}, 50, {x: 10, y: 70});\n  });\n});\n\ndescribe('distance', () => {\n  function assertDistance(p1: Position, p2: Position, expected: number): void {\n    const d = distance(p1, p2);\n    assert.deepStrictEqual(Math.round(d), expected);\n  }\n\n  it('works', () => {\n    assertDistance({x: 0, y: 0}, {x: 10, y: 0}, 10);\n    assertDistance({x: 0, y: 0}, {x: 100, y: 0}, 100);\n    assertDistance({x: 10, y: 0}, {x: 0, y: 0}, 10);\n    assertDistance({x: 10, y: 10}, {x: 10, y: 30}, 20);\n    assertDistance({x: 10, y: 10}, {x: 10, y: 5}, 5);\n    assertDistance({x: 10, y: 10}, {x: 20, y: 20}, 14);\n  });\n});\n\ndescribe('segmentContains', () => {\n  it('works with straight segments', () => {\n    assert.isFalse(segmentContains([{x: 0, y: 0}, {x: 0, y: 10}], {x: 10, y: 10}));\n    assert.isFalse(segmentContains([{x: 0, y: 10}, {x: 0, y: 0}], {x: 10, y: 10}));\n    assert.isFalse(segmentContains([{x: 10, y: 10}, {x: 100, y: 10}], {x: 10, y: 20}));\n    assert.isFalse(segmentContains([{x: 10, y: 10}, {x: 10, y: 100}], {x: 10, y: 0}));\n\n    assert.isTrue(segmentContains([{x: 0, y: 0}, {x: 0, y: 100}], {x: 0, y: 10}));\n    assert.isTrue(segmentContains([{x: 0, y: 100}, {x: 0, y: 0}], {x: 0, y: 10}));\n    assert.isTrue(segmentContains([{x: 10, y: 10}, {x: 20, y: 10}], {x: 15, y: 10}));\n    assert.isTrue(segmentContains([{x: 20, y: 10}, {x: 10, y: 10}], {x: 15, y: 10}));\n  });\n\n  it('works with other segments', () => {\n    assert.isFalse(segmentContains([{x: 0, y: 0}, {x: 10, y: 10}], {x: 10, y: 100}));\n    assert.isFalse(segmentContains([{x: 20, y: 20}, {x: 30, y: 0}], {x: 10, y: 100}));\n\n    assert.isTrue(segmentContains([{x: 0, y: 0}, {x: 100, y: 100}], {x: 50, y: 50}));\n    assert.isTrue(segmentContains([{x: 0, y: 100}, {x: 100, y: 0}], {x: 50, y: 50}));\n  });\n});\n\ndescribe('intersectSegments', () => {\n  function assertIntersection(s1: Position[], s2: Position[], expected: Position): void {\n    const point = intersectSegments(s1, s2);\n    assert.deepStrictEqual({x: Math.round(point.x), y: Math.round(point.y)}, expected);\n  }\n\n  it('works when x or y is 0', () => {\n    assertIntersection([{x: 0, y: 0}, {x: 0, y: 10}], [{x: 0, y: 5}, {x: 5, y: 5}], {x: 0, y: 5});\n    assertIntersection([{x: 0, y: 0}, {x: 100, y: 0}], [{x: 50, y: 0}, {x: 50, y: 5}], {x: 50, y: 0});\n    assertIntersection([{x: -5, y: 0}, {x: 5, y: 0}], [{x: 0, y: -5}, {x: 0, y: 5}], {x: 0, y: 0});\n  });\n\n  it('works in simple cases', () => {\n    assertIntersection([{x: 5, y: 15}, {x: 15, y: 5}], [{x: 5, y: 5}, {x: 15, y: 15}], {x: 10, y: 10});\n    assertIntersection([{x: 5, y: 10}, {x: 15, y: 10}], [{x: 10, y: 5}, {x: 10, y: 15}], {x: 10, y: 10});\n  });\n\n  it('works when segments only intersect outside their boundaries', () => {\n    assertIntersection([{x: 5, y: 5}, {x: 5, y: 15}], [{x: 15, y: 10}, {x: 25, y: 10}], {x: 5, y: 10});\n  });\n});\n"]}