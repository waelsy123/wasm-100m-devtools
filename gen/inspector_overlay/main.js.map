{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../inspector_overlay/main.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// @ts-ignore Importing CSS is handled in Rollup.\nimport commonStyle from './common.css'; // eslint-disable-line rulesdir/es_modules_import\nimport {adoptStyleSheet} from './common.js';\nimport {gridStyle} from './highlight_grid_common.js';\nimport {DistancesOverlay} from './tool_distances.js';\n// @ts-ignore Importing CSS is handled in Rollup.\nimport highlightGridStyle from './tool_grid.css'; // eslint-disable-line rulesdir/es_modules_import\n// @ts-ignore Importing CSS is handled in Rollup.\nimport highlightStyle from './tool_highlight.css'; // eslint-disable-line rulesdir/es_modules_import\nimport {HighlightOverlay} from './tool_highlight.js';\n// @ts-ignore Importing CSS is handled in Rollup.\nimport pausedStyle from './tool_paused.css'; // eslint-disable-line rulesdir/es_modules_import\nimport type {PausedToolMessage} from './tool_paused.js';\nimport {PausedOverlay} from './tool_paused.js';\nimport type {PersistentToolMessage} from './tool_persistent.js';\nimport {PersistentOverlay} from './tool_persistent.js';\n// @ts-ignore Importing CSS is handled in Rollup.\nimport screenshotStyle from './tool_screenshot.css'; // eslint-disable-line rulesdir/es_modules_import\nimport {ScreenshotOverlay} from './tool_screenshot.js';\nimport type {ScreenshotToolMessage} from './tool_screenshot.js';\n// @ts-ignore Importing CSS is handled in Rollup.\nimport sourceOrderStyle from './tool_source_order.css'; // eslint-disable-line rulesdir/es_modules_import\nimport {SourceOrderOverlay} from './tool_source_order.js';\nimport {ViewportSizeOverlay} from './tool_viewport_size.js';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface Window {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    InspectorOverlayHost: {send(data: PausedToolMessage|PersistentToolMessage|ScreenshotToolMessage|string): void};\n  }\n}\n\nadoptStyleSheet(commonStyle);\n\nconst gridStyleSheet = new CSSStyleSheet();\ngridStyleSheet.replaceSync(gridStyle);\n\nconst highlightOverlay = new HighlightOverlay(window, [highlightStyle, gridStyleSheet]);\nconst persistentOverlay = new PersistentOverlay(window, [highlightGridStyle, gridStyleSheet]);\nconst distancesOverlay = new DistancesOverlay(window);\nconst pausedOverlay = new PausedOverlay(window, pausedStyle);\nconst screenshotOverlay = new ScreenshotOverlay(window, screenshotStyle);\nconst sourceOrderOverlay = new SourceOrderOverlay(window, sourceOrderStyle);\nconst viewportSizeOverlay = new ViewportSizeOverlay(window);\n\ninterface Overlays {\n  distances: DistancesOverlay;\n  highlight: HighlightOverlay;\n  persistent: PersistentOverlay;\n  paused: PausedOverlay;\n  screenshot: ScreenshotOverlay;\n  sourceOrder: SourceOrderOverlay;\n  viewportSize: ViewportSizeOverlay;\n}\n\ntype PlatformName = string;\n\n// Key in this object is the name the backend refers to a particular overlay by.\nconst overlays: Overlays = {\n  distances: distancesOverlay,\n  highlight: highlightOverlay,\n  persistent: persistentOverlay,\n  paused: pausedOverlay,\n  screenshot: screenshotOverlay,\n  sourceOrder: sourceOrderOverlay,\n  viewportSize: viewportSizeOverlay,\n};\n\nlet currentOverlay: Overlays[keyof Overlays];\nlet platformName: PlatformName;\n\ntype MessageLookup = {\n  'setOverlay': keyof Overlays,\n  'setPlatform': PlatformName,\n  drawingFinished: '',\n};\n\nconst dispatch = <K extends keyof MessageLookup>(message: [a: K, b: MessageLookup[K]]) => {\n  const functionName = message[0];\n  if (functionName === 'setOverlay') {\n    const overlayName = message[1] as keyof Overlays;\n    if (currentOverlay) {\n      currentOverlay.uninstall();\n    }\n    currentOverlay = overlays[overlayName];\n    currentOverlay.setPlatform(platformName);\n    // TODO: setPlatform invokes install() for compatibility with the backend.\n    // The call to install() can be removed from setPlatform() after the backend is updated.\n    if (!currentOverlay.installed) {\n      currentOverlay.install();\n    }\n  } else if (functionName === 'setPlatform') {\n    platformName = message[1];\n  } else if (functionName === 'drawingFinished') {\n    // TODO The logic needs to be added here once the backend starts sending this event.\n  } else {\n    currentOverlay.dispatch(message);\n  }\n};\n\n// Window has an additional dispatch function added, so retype as unknown first\n(window as unknown as {dispatch: Function}).dispatch = dispatch;\n"]}